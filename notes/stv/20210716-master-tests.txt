#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#


# Targets
# -----------------------------------------------------
  # Experiment with latest changes to allow multiple users running jobs concurrently with Dynamic Allocation [Done]
  # This test is run with the dynamic allocation changes that are included in master, but without the cache timeout


# -----------------------------------------------------
# Checkout master 
#[user@desktop]

source "${HOME:?}/aglais.env"
pushd "${AGLAIS_CODE}"

    git checkout master

popd



# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    docker run \
        --rm \
        --tty \
        --interactive \
        --name ansibler2 \
        --hostname ansibler \
        --env "SSH_AUTH_SOCK=/mnt/ssh_auth_sock" \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw,z" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE:?}/deployments:/deployments:ro,z" \
        atolmis/ansible-client:2020.12.02 \
        bash



# -----------------------------------------------------
# Set the target cloud to delete.
#[root@ansibler]

    cloudname=gaia-test



# -----------------------------------------------------
# Delete everything.
#[root@ansibler]

    time \
        /deployments/openstack/bin/delete-all.sh \
            "${cloudname:?}"


	> Done

# -----------------------------------------------------
# Create everything, using a standard config.
#[root@ansibler]

    time \
        /deployments/hadoop-yarn/bin/create-all.sh \
            "${cloudname:?}" \
            'medium-04'

	> Done

	> real	42m32.830s
	> user	10m34.492s
	> sys	2m50.442s



# -----------------------------------------------------
# Setup integration with github
#[root@ansibler]


  ssh zeppelin \
        '
        export githubuser=username
        export githubpass=pass

        rm -rf /home/fedora/zeppelin-0.8.2-bin-all/notebook
	git clone https://${githubuser:?}:${githubpass:?}@github.com/wfau/aglais-notebooks.git /home/fedora/zeppelin-0.8.2-bin-all/notebook

	cat > "${HOME}/zeppelin-0.8.2-bin-all/notebook/.git/hooks/post-commit" << EOF
	#!/bin/sh
	git push 

	EOF

	chmod +x ${HOME}/zeppelin-0.8.2-bin-all/notebook/.git/hooks/post-commit
	/home/fedora/zeppelin-0.8.2-bin-all/bin/zeppelin-daemon.sh restart
	'

	> Cloning into '/home/fedora/zeppelin-0.8.2-bin-all/notebook'...
	  Zeppelin stop                                              [  OK  ]
	  Zeppelin start                                             [  OK  ]


# -----------------------------------------------------
# Single User tests
# Login via Firefox
#[user@desktop]

    firefox --new-window "http://128.232.227.131:8080" &


        /AglaisPublicExamples/SetUp                                                           
   
        [Success]



        /AglaisPublicExamples/Start here                                                           
   
        [Success]



        /AglaisPublicExamples/Source counts over the sky
  
        # Plot up the results
        > Took 43 sec. Last updated by admin at July 15 2021, 5:42:48 PM.
       
        [Success]



	/AglaisPublicExamples/Mean RA proper motion plot
        
        # Mean RA proper motion plot
        > Took 1 min 13 sec. Last updated by admin at July 15 2021, 5:46:02 PM. (outdated)
  
        [Success]



        /AglaisPublicExamples/Data holdings
 
        [Success]



        /AglaisPublicExamples/Good astrometric solutions via ML Random Forrest classifier

	# Raw catalogue with selected columns
	> Took 6 min 23 sec. Last updated by admin at July 15 2021, 7:54:53 PM.


        # Train up the Random Forrest
        > Took 3 min 37 sec. Last updated by admin at July 15 2021, 7:58:38 PM.

        [Success]


        
	/AglaisPublicExamples/5d kinematic clustering

	# Create and cache the primary data set
        > Took 8 min 10 sec. Last updated by admin at July 16 2021, 12:34:52 AM. (outdated)

	[Success]


        # Run HDBSCAN clusterer

	org.apache.thrift.transport.TTransportException
		at org.apache.thrift.transport.TIOStreamTransport.read(TIOStreamTransport.java:132)
		at org.apache.thrift.transport.TTransport.readAll(TTransport.java:86)
		at org.apache.thrift.protocol.TBinaryProtocol.readAll(TBinaryProtocol.java:429)
		at org.apache.thrift.protocol.TBinaryProtocol.readI32(TBinaryProtocol.java:318)
		at org.apache.thrift.protocol.TBinaryProtocol.readMessageBegin(TBinaryProtocol.java:219)
		at org.apache.thrift.TServiceClient.receiveBase(TServiceClient.java:69)
		at org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.recv_interpret(RemoteInterpreterService.java:274)
		at org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.interpret(RemoteInterpreterService.java:258)
		at org.apache.zeppelin.interpreter.remote.RemoteInterpreter$4.call(RemoteInterpreter.java:233)
		at org.apache.zeppelin.interpreter.remote.RemoteInterpreter$4.call(RemoteInterpreter.java:229)
		at org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.callRemoteFunction(RemoteInterpreterProcess.java:135)
		at org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret(RemoteInterpreter.java:228)
		at org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:449)
		at org.apache.zeppelin.scheduler.Job.run(Job.java:188)
		at org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:315)
		at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
		at java.util.concurrent.FutureTask.run(FutureTask.java:266)

        [Failed]

        # This doesn't work for the Live service anyway. Guess is that Driver / Zeppelin node runs out of memory

         

	/experiments/dcr/eDR3 Cuts
	 
        # Notebook completed after aprox. 5 minutes
	 
        [Success]


        /experiments/dcr/ML_cuts
        
        # Show CAMD Unsorted
        # Has been running for 20+ minutes..
        # Full CPU Usage and 15/21 GB RAM used on Zeppelin node

        # Looks like that cell has a couple .toPandas() calls, which may be bringing a potentially large dataset in memory on the Zeppelin node
        
        # ....

        > Took 2 hrs 58 min 12 sec. Last updated by admin at July 16 2021, 12:00:28 AM. (outdated)

		io.grpc.StatusRuntimeException: UNAVAILABLE: keepalive watchdog timeout
			at io.grpc.Status.asRuntimeException(Status.java:526)
			at io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter.onClose(ClientCalls.java:434)
			at io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:39)
			at io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23)
			at io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40)
			at io.grpc.internal.CensusStatsModule$StatsClientInterceptor$1$1.onClose(CensusStatsModule.java:678)
			at io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:39)
			at io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23)
			at io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40)
			at io.grpc.internal.CensusTracingModule$TracingClientInterceptor$1$1.onClose(CensusTracingModule.java:403)
			at io.grpc.internal.ClientCallImpl.closeObserver(ClientCallImpl.java:459)
			at io.grpc.internal.ClientCallImpl.access$300(ClientCallImpl.java:63)
			at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.close(ClientCallImpl.java:546)
			at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.access$600(ClientCallImpl.java:467)
			at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInContext(ClientCallImpl.java:584)
			at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
			at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)
 

         # Cells after:

	> java.net.ConnectException: Connection refused (Connection refused)
		at java.net.PlainSocketImpl.socketConnect(Native Method)


        [Failed]

        # No idea if this has ever worked for the live system

 


# -------------------------------------------------------------
# Repeated single user tests of the Forrest Classifier notebook
#[user@desktop]


    firefox --new-window "http://128.232.227.131:8080" &


        /AglaisPublicExamples/SetUp                                                           
   
        [Success]


        /AglaisPublicExamples/Good astrometric solutions via ML Random Forrest classifier

	# Raw catalogue with selected columns
	> Took 9 min 38 sec. Last updated by admin at July 16 2021, 12:47:20 PM.


        # Train up the Random Forrest
        > Took 3 min 59 sec. Last updated by admin at July 16 2021, 12:51:29 PM.


        [Success]



        # Repeat Same notebook as soon as last cell has completed




        /AglaisPublicExamples/Good astrometric solutions via ML Random Forrest classifier

	# Raw catalogue with selected columns
	> Took 33 sec. Last updated by admin at July 16 2021, 1:02:21 PM.

	# Define the training samples	
	> Took 3 min 46 sec. Last updated by admin at July 16 2021, 1:08:32 PM.


        # Train up the Random Forrest
        > Took 38 min 32 sec. Last updated by admin at July 16 2021, 1:47:05 PM.
 

        # Classification confusion matrix
        > Took 27 min 3 sec. Last updated by admin at July 16 2021, 2:14:09 PM.


        [Success] (Slow)




        # Restart the Spark Interpreter and run again



        /AglaisPublicExamples/SetUp                                                           
   
        [Success]


        /AglaisPublicExamples/Good astrometric solutions via ML Random Forrest classifier

	# Raw catalogue with selected columns
	> Took 7 min 48 sec. Last updated by admin at July 16 2021, 2:35:44 PM.

	# Define the training samples	
	> Took 4 sec. Last updated by admin at July 16 2021, 2:35:53 PM.

        # Train up the Random Forrest
        > Took 3 min 43 sec. Last updated by admin at July 16 2021, 2:39:37 PM.

 
        # Took 35 minutes morethan first try

        [Success] (Slow)



# -------------------------------------------------------------
# Multi user tests (Sequential)
#[user@desktop]


	# Current Yarn application is using up 95% of resources

	# After running previous session, open a new incognito tab and login as second user
	# Run the same notebook




        /AglaisPublicExamples/SetUp                                                           
   
        [Running]

        # The Yarn application that is started for user #2 is stuck at 0% resources and RUNNING
        # Resources are never released from the previous application, so it is never started
        # The assumption currently, is that the cached dataset is causing the executors involved to be attached to the application indefinitely

        # Restart Interpreter for user #1

        # Job #2 starts, and starts using 47% resources
 
        [Success]



        /AglaisPublicExamples/Good astrometric solutions via ML Random Forrest classifier

        # Job #2 starts using 95% resources
	# Raw catalogue with selected columns
        > Took 6 min 26 sec. Last updated by gaiauser at July 16 2021, 5:21:17 PM.



	# Define the training samples	
        > Took 4 sec. Last updated by gaiauser at July 16 2021, 5:21:26 PM.


        # Train up the Random Forrest
        > Took 3 min 55 sec. Last updated by gaiauser at July 16 2021, 5:25:22 PM.

        [Success]


# -------------------------------------------------------------
# Multi user tests (Concurrent)
#[user@desktop]

        # Restart all Spark interpreters


        /AglaisPublicExamples/SetUp      Started (User #1)                                                           

        /AglaisPublicExamples/SetUp      Started (User #2)                                                           

        /AglaisPublicExamples/SetUp      Completed (User #1)    
       
        /AglaisPublicExamples/SetUp      Completed (User #2)    



        /AglaisPublicExamples/Good astrometric solutions via ML Random Forrest classifier      Started (User #1)  

        /AglaisPublicExamples/Good astrometric solutions via ML Random Forrest classifier      Started (User #2)  

        /AglaisPublicExamples/Good astrometric solutions via ML Random Forrest classifier      Completed (User #1)  
          # Raw catalogue with selected columns          
          > Took 9 min 49 sec. Last updated by admin at July 16 2021, 7:57:21 PM.


          # Train up the Random Forrest
          > Took 5 min 21 sec. Last updated by admin at July 16 2021, 8:02:57 PM.




        /AglaisPublicExamples/Good astrometric solutions via ML Random Forrest classifier      Completed (User #2)  
          # Raw catalogue with selected columns   
          > Took 11 min 2 sec. Last updated by gaiauser at July 16 2021, 7:57:21 PM.


          # Train up the Random Forrest
          > Took 5 min 23 sec. Last updated by gaiauser at July 16 2021, 8:03:00 PM.


