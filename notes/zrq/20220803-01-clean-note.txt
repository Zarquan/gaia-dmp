#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2022, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Success

    Result:

        Work in progress ...

# -----------------------------------------------------
# Try removing the extra stuff.
#[user@desktop]


    >   ....
    >       {
    >         "text": "%md\n\n ....",
    >         "user": "DMorris",
    >         "dateUpdated": "2022-08-02T05:03:53+0000",
    >         "progress": 0,
    >         "config": {
    >           "tableHide": false,
    >           "editorSetting": {
    >             "language": "markdown",
    >             "editOnDblClick": true,
    >             "completionKey": "TAB",
    >             "completionSupport": false
    >           },
    >           "colWidth": 12,
    >           "editorMode": "ace/mode/markdown",
    >           "fontSize": 9,
    >           "editorHide": true,
    >           "results": {},
    >           "enabled": true
    >         },
    >         "settings": {
    >           "params": {},
    >           "forms": {}
    >         },
    >         "results": {
    >           "code": "SUCCESS",
    >           "msg": [
    >             {
    >               "type": "HTML",
    >               "data": "...."
    >             }
    >           ]
    >         },
    >         "apps": [],
    >         "runtimeInfos": {},
    >         "progressUpdateIntervalMs": 500,
    >         "jobName": "paragraph_1659001346667_581267386",
    >         "id": "20201013-131059_546082898",
    >         "dateCreated": "2022-07-28T09:42:26+0000",
    >         "dateStarted": "2022-08-02T05:03:53+0000",
    >         "dateFinished": "2022-08-02T05:03:53+0000",
    >         "status": "FINISHED",
    >         "focus": true,
    >         "$$hashKey": "object:1365"
    >       },....

    #
    # Split the text into an array of lines.
    jq '
        [
        .paragraphs[] | {title, text} | .text |= split("\n")
        ]
        ' example-007.zpln

    >   [
    >     {
    >       "title": null,
    >       "text": [
    >         "%md",
    >         "",
    >         "<!--",
    >         "",
    >         "    Gaia Data Processing and Analysis Consortium (DPAC) ",
    >         "    Co-ordination Unit 9 Work Package 930",
    >         "    ",
    >         "    (c) 2005-2025 Gaia DPAC",
    >         "    ",
    >         "    This program is free software: you can redistribute it and/or modify",
    >         "    it under the terms of the GNU General Public License as published by",
    >         "    the Free Software Foundation, either version 3 of the License, or",
    >         "    (at your option) any later version.",
    >         "",
    >         "    This program is distributed in the hope that it will be useful,",
    >         "    but WITHOUT ANY WARRANTY; without even the implied warranty of",
    >         "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
    >         "    GNU General Public License for more details.",
    >         "",
    >         "    You should have received a copy of the GNU General Public License",
    >         "    along with this program.  If not, see <https://www.gnu.org/licenses/>.",
    >         "    -->",
    >         "",
    >         "# Using ML to define an astrometrically clean sample of stars",
    >         "",
    >         "Follows the Gaia EDR3 performance verification \"The Gaia Catalogue of Nearby Stars\" (Smart et al. 2021) in classifying astrometric solutions as good or bad via supervised ML. Employs a Random Forrest classifier plus appropriately defined training sets - see https://arxiv.org/abs/2012.02061 for further details. The work flow implemented here follows closely that described in Section 2, \"GCNS Generation\" (GCNS = Gaia Catalogue of Nearby Stars) and is designed to clean up a 100pc (= nearby) sample.",
    >         "",
    >         "   "
    >       ]
    >     },
    >     {
    >       "title": "Basic catalogue query selections and predicates",
    >       "text": [
    >         "%spark.pyspark",
    >         "import gaiadmpsetup",
    >         "",
    >         "# this is the set of astrometric features to be used. In reality several iterations of this workflow might be required with an expanded set, and some figure-of-merit,",
    >         "# e.g. Gini index, would be used to select those most important to the RF classification - cf. Table A.1 in the GCNS paper.",
    >         "astrometric_features = [",
    >         "    'parallax_error', ",
    >         "    'parallax_over_error',",
    >         "    'astrometric_sigma5d_max',",
    >         "    'pmra_error',",
    >         "    'pmdec_error',",
    >         "    'astrometric_excess_noise',",
    >         "    'ipd_gof_harmonic_amplitude',",
    >         "    'ruwe', ",
    >         "    'visibility_periods_used',",
    >         "    'pmdec',",
    >         "    'pmra',",
    >         "    'ipd_frac_odd_win',",
    >         "    'ipd_frac_multi_peak',",
    >         "    'astrometric_gof_al',",
    >         "    'parallax_pmdec_corr',",
    >         "    'astrometric_excess_noise_sig'",
    >         "]",
    >         "# ... the last two are included to cross check against the Gini index results presented in the paper.",
    >         "",
    >         "# quick mode: set an additional predicate filter on random_index here to limit to 10% (or 1%: change 10 to 100) sampling etc:",
    >         "quick_filter = ''# AND MOD(random_index, 10) = 0'",
    >         "# ... to switch this off, simply specify an empty string. But to avoid overloading matplotlib when visualising results, keep this one:",
    >         "quick_plot_filter = ' AND MOD(random_index, 25) = 0'",
    >         "",
    >         "# reformat the above attribute list into an SQL comma-separated select string",
    >         "features_select_string = ('%s, '*(len(astrometric_features) - 1) + '%s ')%tuple(astrometric_features)",
    >         "#print (features_select_string)",
    >         "",
    >         "# Confirmed by Luis Sarro, personal communication: actually we train on ABS(parallax_over_error), see e.g. GCNS paper Figure A.5",
    >         "features_select_string = features_select_string.replace('parallax_over_error','ABS(parallax_over_error) AS parallax_over_error')",
    >         "",
    >         "# photometric consistency predicate - e.g. Evans et al. (2018), Babusiaux et al. (2018) for DR2:",
    >         "#photometric_consistency_filter = ' AND phot_bp_rp_excess_factor BETWEEN 1.0 + (0.03 * POW(bp_rp, 2.0)) AND 1.3 + (0.06 * POW(bp_rp, 2.0))'",
    >         "# Riello et al. (2020) for EDR3: fgbp_grp defined by Equation 6 and coefficients in Table 2; sig_cstarg defined by Equation 18:",
    >         "photometric_consistency_indicators = \\",
    >         "    '1.15436 + 0.033772*bp_rp + 0.032277*bp_rp*bp_rp AS fgbp_grp_0p5, ' + \\",
    >         "    '1.162004 + 0.011464*bp_rp + 0.049255*bp_rp*bp_rp -0.005879*bp_rp*bp_rp*bp_rp AS fgbp_grp_0p5_4p0, ' + \\",
    >         "    '1.057572 + 0.0140537*bp_rp AS fgbp_grp_4p0, ' + \\",
    >         "    '0.0059898 + 8.817481e-12*POW(phot_g_mean_mag, 7.618399) AS sig_cstarg, '",
    >         "photometric_consistency_filter = ' AND (' + \\",
    >         "    '(bp_rp < 0.5 AND ABS(phot_bp_rp_excess_factor - fgbp_grp_0p5) < 2.0 * sig_cstarg) OR ' + \\",
    >         "    '(bp_rp BETWEEN 0.5 AND 4.0 AND ABS(phot_bp_rp_excess_factor - fgbp_grp_0p5_4p0) < 2.0 * sig_cstarg) OR ' + \\",
    >         "    '(bp_rp >= 4.0 AND ABS(phot_bp_rp_excess_factor - fgbp_grp_4p0) < 2.0 * sig_cstarg))'",
    >         "# N.B. this \"ultra-clean\" 2-sigma selection loses very faint red objects owing to the GBP photometry issue discussed in Riello et al. (2020), Section 8.1",
    >         "# and is done here for simplicity. The GCNS proper uses external (infrared) photometry from 2MASS to define the good training sample.",
    >         ""
    >       ]
    >     },
    >     {
    >       "title": "Raw catalogue with selected columns",
    >       "text": [
    >         "%spark.pyspark",
    >         "",
    >         "# clear any previously cached data in the context (cells may be executed in any order, and out-dated by changes from here onwards)",
    >         "sqlContext.clearCache()",
    >         "",
    >         "# a conservative selection of everything that COULD be within 100pc, including things with measured ",
    >         "# distances putting them outside the 100pc horizon when their true distances are within, and also including ",
    >         "# loads of spurious chaff with the wheat of course, plus bad things with significant, unphysical parallaxes:",
    >         "raw_sources_df = spark.sql('SELECT source_id, random_index, phot_g_mean_mag, phot_bp_rp_excess_factor, bp_rp, g_rp, parallax, ra, dec, b, ' + photometric_consistency_indicators + features_select_string + ' FROM gaiadr3.gaia_source WHERE ABS(parallax) > 8.0')",
    >         "",
    >         "# cache it for speedy access below (all subsequent samples are derived from this):",
    >         "raw_sources_cached = raw_sources_df.cache()",
    >         "# ... some good advice concerning caching in Spark here: https://towardsdatascience.com/best-practices-for-caching-in-spark-sql-b22fb0f02d34",
    >         "",
    >         "# register as SQL-queryable",
    >         "raw_sources_cached.createOrReplaceTempView('raw_sources')",
    >         "",
    >         "raw_sources_cached.count()",
    >         "# EDR3: 1,724,028 sources in 10min 21sec",
    >         "# (cf. GCNS: 1,211,740 sources with varpi > 8mas plus 512,288 sources with varpi < -8 = 1,724,028 in total) "
    >       ]
    >     },
    >     ....
    >     ....
    >   ]


    #
    # Format the JSON as YAML.
    jq '
        [
        .paragraphs[] | {title, text} | .text |= split("\n")
        ]
        ' example-007.zpln \
    | yq -P '.'


    >   - title: null
    >     text:
    >       - '%md'
    >       - ""
    >       - <!--
    >       - ""
    >       - '    Gaia Data Processing and Analysis Consortium (DPAC) '
    >       - '    Co-ordination Unit 9 Work Package 930'
    >       - '    '
    >       - '    (c) 2005-2025 Gaia DPAC'
    >       - '    '
    >       - '    This program is free software: you can redistribute it and/or modify'
    >       - '    it under the terms of the GNU General Public License as published by'
    >       - '    the Free Software Foundation, either version 3 of the License, or'
    >       - '    (at your option) any later version.'
    >       - ""
    >       - '    This program is distributed in the hope that it will be useful,'
    >       - '    but WITHOUT ANY WARRANTY; without even the implied warranty of'
    >       - '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the'
    >       - '    GNU General Public License for more details.'
    >       - ""
    >       - '    You should have received a copy of the GNU General Public License'
    >       - '    along with this program.  If not, see <https://www.gnu.org/licenses/>.'
    >       - '    -->'
    >       - ""
    >       - '# Using ML to define an astrometrically clean sample of stars'
    >       - ""
    >       - Follows the Gaia EDR3 performance verification "The Gaia Catalogue of Nearby Stars" (Smart et al. 2021) in classifying astrometric solutions as good or bad via supervised ML. Employs a Random Forrest classifier plus appropriately defined training sets - see https://arxiv.org/abs/2012.02061 for further details. The work flow implemented here follows closely that described in Section 2, "GCNS Generation" (GCNS = Gaia Catalogue of Nearby Stars) and is designed to clean up a 100pc (= nearby) sample.
    >       - ""
    >       - '   '
    >   - title: Basic catalogue query selections and predicates
    >     text:
    >       - '%spark.pyspark'
    >       - import gaiadmpsetup
    >       - ""
    >       - '# this is the set of astrometric features to be used. In reality several iterations of this workflow might be required with an expanded set, and some figure-of-merit,'
    >       - '# e.g. Gini index, would be used to select those most important to the RF classification - cf. Table A.1 in the GCNS paper.'
    >       - astrometric_features = [
    >       - '    ''parallax_error'', '
    >       - '    ''parallax_over_error'','
    >       - '    ''astrometric_sigma5d_max'','
    >       - '    ''pmra_error'','
    >       - '    ''pmdec_error'','
    >       - '    ''astrometric_excess_noise'','
    >       - '    ''ipd_gof_harmonic_amplitude'','
    >       - '    ''ruwe'', '
    >       - '    ''visibility_periods_used'','
    >       - '    ''pmdec'','
    >       - '    ''pmra'','
    >       - '    ''ipd_frac_odd_win'','
    >       - '    ''ipd_frac_multi_peak'','
    >       - '    ''astrometric_gof_al'','
    >       - '    ''parallax_pmdec_corr'','
    >       - '    ''astrometric_excess_noise_sig'''
    >       - ']'
    >       - '# ... the last two are included to cross check against the Gini index results presented in the paper.'
    >       - ""
    >       - '# quick mode: set an additional predicate filter on random_index here to limit to 10% (or 1%: change 10 to 100) sampling etc:'
    >       - quick_filter = ''# AND MOD(random_index, 10) = 0'
    >       - '# ... to switch this off, simply specify an empty string. But to avoid overloading matplotlib when visualising results, keep this one:'
    >       - quick_plot_filter = ' AND MOD(random_index, 25) = 0'
    >       - ""
    >       - '# reformat the above attribute list into an SQL comma-separated select string'
    >       - features_select_string = ('%s, '*(len(astrometric_features) - 1) + '%s ')%tuple(astrometric_features)
    >       - '#print (features_select_string)'
    >       - ""
    >       - '# Confirmed by Luis Sarro, personal communication: actually we train on ABS(parallax_over_error), see e.g. GCNS paper Figure A.5'
    >       - features_select_string = features_select_string.replace('parallax_over_error','ABS(parallax_over_error) AS parallax_over_error')
    >       - ""
    >       - '# photometric consistency predicate - e.g. Evans et al. (2018), Babusiaux et al. (2018) for DR2:'
    >       - '#photometric_consistency_filter = '' AND phot_bp_rp_excess_factor BETWEEN 1.0 + (0.03 * POW(bp_rp, 2.0)) AND 1.3 + (0.06 * POW(bp_rp, 2.0))'''
    >       - '# Riello et al. (2020) for EDR3: fgbp_grp defined by Equation 6 and coefficients in Table 2; sig_cstarg defined by Equation 18:'
    >       - photometric_consistency_indicators = \
    >       - '    ''1.15436 + 0.033772*bp_rp + 0.032277*bp_rp*bp_rp AS fgbp_grp_0p5, '' + \'
    >       - '    ''1.162004 + 0.011464*bp_rp + 0.049255*bp_rp*bp_rp -0.005879*bp_rp*bp_rp*bp_rp AS fgbp_grp_0p5_4p0, '' + \'
    >       - '    ''1.057572 + 0.0140537*bp_rp AS fgbp_grp_4p0, '' + \'
    >       - '    ''0.0059898 + 8.817481e-12*POW(phot_g_mean_mag, 7.618399) AS sig_cstarg, '''
    >       - photometric_consistency_filter = ' AND (' + \
    >       - '    ''(bp_rp < 0.5 AND ABS(phot_bp_rp_excess_factor - fgbp_grp_0p5) < 2.0 * sig_cstarg) OR '' + \'
    >       - '    ''(bp_rp BETWEEN 0.5 AND 4.0 AND ABS(phot_bp_rp_excess_factor - fgbp_grp_0p5_4p0) < 2.0 * sig_cstarg) OR '' + \'
    >       - '    ''(bp_rp >= 4.0 AND ABS(phot_bp_rp_excess_factor - fgbp_grp_4p0) < 2.0 * sig_cstarg))'''
    >       - '# N.B. this "ultra-clean" 2-sigma selection loses very faint red objects owing to the GBP photometry issue discussed in Riello et al. (2020), Section 8.1'
    >       - '# and is done here for simplicity. The GCNS proper uses external (infrared) photometry from 2MASS to define the good training sample.'
    >       - ""
    >     ....
    >     ....





