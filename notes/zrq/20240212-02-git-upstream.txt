#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#
# AIMetrics: []
#

    Target:

        Notes on how to merge changes from the main WFAU (uptream) repository.
        People have their own ways of doing this, but this documents the method I use.

        I work in a new branch in my personal fork (prev notes).
        Once I'm happy with the changes I commit and push them to my personal fork on GitHub
        and then create a pull request on the main WFAU (uptream) repository to get them
        approved and merged.

        Once the pull request is approved and merged, I use the following steps
        to update my personal fork to match the main WFAU (uptream) repository.

        (*) There is a 'update this fork' button in the GitHub UI, but I've had issues
        with this in the past. Sometimes it creates a new commit when it doesn't need to.
        Which gets you stuck in a loop, because that new commit then needs to be
        merged and synced ... which creates a new commit ...

        Personal choice, I find it easier to do this manually using the command line.
        YMMV YourMilageMayVary.

    Result:

        Personal fork on desktop and in GitHub synced to contain the latest changes
        from the main WFAU (uptream) repository.


# -----------------------------------------------------
# Add the main WFAU (upstream) repository to the local git config.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        git remote -v

        >   origin      git@github.com:Zarquan/gaia-dmp.git (fetch)
        >   origin      git@github.com:Zarquan/gaia-dmp.git (push)


        # Add the main WFAU repository if it isn't in the list.
        git remote add 'upstream' 'https://github.com/wfau/gaia-dmp.git'


        git remote -v

        >   origin      git@github.com:Zarquan/gaia-dmp.git (fetch)
        >   origin      git@github.com:Zarquan/gaia-dmp.git (push)
        >   upstream    https://github.com/wfau/gaia-dmp.git (fetch)
        >   upstream    https://github.com/wfau/gaia-dmp.git (push)


    popd

    #
    # Note - the names 'origin' and 'upstream' are convention.
    # Technically, you can give them whatever names you want.
    #
    # You only need to do this once for a local clone.
    # The remote URLs will be stored in the local config file.
    #
    # I'm using the 'git@github.com' syntax for my personal fork, but the I'm using
    # the 'https://github.com' syntax for the main WFAU repository.
    # This means git will automatically use my ssh keys to authenticate for my fork,
    # but it will ask for username and password if it tries to modify files in the
    # main WFAU repository
    # This effectivley makes the main WFAU repository read only.
    #

# -----------------------------------------------------
# Merge upstream changes.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        # Checkout the master branch on our local clone of our personal fork (origin).
        git checkout master


        # Sanity check - pull any new changes from our personal fork (origin).
        git pull


        # Fetch the latest changes from the main WFAU repository (upstream).
        git fetch upstream


        # Merges the changes from the main WFAU repository (upstream) master branch
        # into our own local master branch.
        git merge upstream/master


        # Sanity check.
        git status


        # Push the merged changes to our personal fork (origin).
        git push


    popd

    #
    # Assuming we haven't modifed the same files this should
    # go straight through without creating another commit.
    #
    # If we have modified the same files, you will need to resolve
    # the conflicts locally and comit the shanges before you can
    # complete the merge.
    #

