#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2022, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#


    Using git is causing a lot of problems ATM.

    Options:
        A plain file system on the Zeppelin node.
        A local git repo on the Zeppelin node, but no upstream.

        Either can be backed up by a cron job run from another machine.
        Start with desktop and work on data node later.

        Simple rolling cron job using rsync and symlinks.
        https://linuxconfig.org/how-to-create-incremental-backups-using-rsync-on-linux

        If more than x copies, delete the oldest.
        Daily, monthly and hourly backups.
        Backups use symlinks for duplicates and deletes deleted files.
        The most recent hourly is linked as the 'latest'.
        We can trigger a run manually at any point.
        The rsync call is a pull from the live server using the dns name.
        So rolling the dns to create a new live server will change the rsync target.
        Creating a new test or dev deploy won't get included in the backup.

        A new deployment is created by rsync from the latest backup.


        1) Create the first copy using the known good state of the notebooks.
        2) Setup rsync/cron to pull a backup to desktop
        3) Make this the live deploy and check the backups accumulate as expected.
        4) Add email reporting ...








