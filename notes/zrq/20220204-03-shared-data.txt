#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2022, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Ideas on how we can share data between deployments without conflict.

    Two main cases where we need to share data.
    * GaiaXPy source code
    * Aglais notebooks

    Using a shared drive causes conflict problems.
    If the share is read/write, one instance can overwrite the data for another.
    If the share is read-only, we still have problems when we want to upgrade the data for one instance but not all.

    What if, we install git on a server, with ssh key access control, and use that as the shared source.

    Each deployment would clone the git repository, including tags and branches.
    The clone is stored on ephemeral storage, and is released when the instance is deleted.
    Updating the origin can be done using git commands, either from an instance or a local clone specifically for making the changes.
    Updating and pushing to origin would be an admin role, authenticated by ssh keys.

    1) Create a server on the data cloud.
    2) Install git.
    3) Create user accounts for developers, and a anon account to use for deployments.

    How to setup a git repo for sharing.
    https://stackoverflow.com/questions/3242282/how-to-configure-an-existing-git-repo-to-be-shared-by-a-unix-group

    3) Setup a repo for GaiaXPy.
    4) Setup a repo for our notebooks.

    5) Connect as 'anon' and checkout a clone of a tagged version as part of our deployment process.
    6) Check the deployment works

    6) Connect as developer and checkout a clone of a tagged version to our local system.
    7) Modify the clone to include specific changes.
    8) Push selected changes upstream to the shared repo.

    Distributed nature of git also gives us a form of backup.
    If our developers keep local clones, then we can resore from that if we need to.


    Issues with creating infrastructure services using command line client.
    Seems to work OK using Ansible .. so go figure.
    Ansible would help with creating user accounts and managing ssh keys etc.

    Develop a create-all delete-all scripts for the infrastructure services ?
    If we do that, then the infrastructure services can't be the only copy of the data.
    All of the infrastructure services would have to store a backup of their data outside the cloud.




