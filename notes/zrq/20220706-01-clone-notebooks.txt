#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2022, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Testing code for creating a user's the clone of public notebooks..

    Result:

        Work in progress ...

# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name ansibler \
        --hostname ansibler \
        --publish 3000:3000 \
        --env "SSH_AUTH_SOCK=/mnt/ssh_auth_sock" \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw,z" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE:?}/deployments:/deployments:ro,z" \
        ghcr.io/wfau/atolmis/ansible-client:2022.03.19 \
        bash


# -----------------------------------------------------
# Set the target configuration.
#[root@ansibler]

    cloudbase=arcus
    cloudname=iris-gaia-red
    configname=zeppelin-26.43-spark-3.26.43


# -----------------------------------------------------
# Deploy everything.
#[root@ansibler]

    time \
        source /deployments/hadoop-yarn/bin/deploy.sh

    >   real    24m52.350s
    >   user    7m31.147s
    >   sys     1m26.863s

    #
    # ** Needed to remove jupyter from pip requirements.txt due to a broken dependency.
    # Fixed in a branch from Stelios?
    #


# -----------------------------------------------------
# Create a test user account.
#[root@ansibler]

    source /deployments/zeppelin/bin/create-user-tools.sh

    createlinuxuser 'Benjamin' 'puppy' | jq '.'

    >   {
    >     "name": "Benjamin",
    >     "type": "puppy",
    >     "home": "/home/Benjamin",
    >     "uid": 20001,
    >     "debug": {
    >       "script": "create-linux-user.sh",
    >       "result": "PASS",
    >       "messages": [
    >         "PASS: adduser [Benjamin] done",
    >         "PASS: mkdir [/home/Benjamin/.ssh] done",
    >         "PASS: adding public key for [zepelin] done",
    >         "SKIP: adding public key for [Benjamin] skipped (no key)"
    >       ]
    >     }
    >   }


    createshirouser 'Benjamin' 'puppy' | jq '.'

    >   {
    >     "name": "Benjamin",
    >     "type": "puppy",
    >     "role": "user",
    >     "pass": "tieSooSe1book2Boomo5",
    >     "hash": "$shiro1$SHA-256$500000$mLCSQOzDfRbyUH3TAG06kg==$KR/tR/KbFy4w6u0wpbOWUMGPPytCUox2GbYeV9o39DI=",
    >     "debug": {
    >       "script": "create-shiro-user.sh",
    >       "result": "PASS",
    >       "messages": [
    >         "PASS: passgen done",
    >         "PASS: hashpass done",
    >         "PASS: database INSERT done"
    >       ]
    >     }
    >   }


# -----------------------------------------------------
# Experiments with notebooks.
#[root@ansibler]

    username=Benjamin
    usertype=test
    userpass=tieSooSe1book2Boomo5

    source /deployments/zeppelin/bin/zeppelin-rest-tools.sh

    zeppelinurl='http://zeppelin:8080'

    # Login with an invalid password
    zeplogin "${username}" "badpass"

    >   {
    >     "status": "FORBIDDEN",
    >     "message": ""
    >   }


    # Login with a valid password
    zeplogin "${username}" "${userpass}"

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "Benjamin",
    >       "ticket": "98e86cc7-048e-442d-8011-c433aff1bf2b",
    >       "roles": "[]"
    >     }
    >   }


    # List the Public notebooks
    curl \
        --silent \
        --cookie "${zepcookies:?}" \
        "${zeppelinurl:?}/api/notebook" \
    | jq '
        [
        .body[] | select(.path | startswith("/Public")) | {id, path}
        ]
        '

    >   [
    >     {
    >       "id": "2GRTQZFUM",
    >       "path": "/Public Examples/1. Start here"
    >     },
    >     {
    >       "id": "2GRA39HCN",
    >       "path": "/Public Examples/2. Data holdings"
    >     },
    >     {
    >       "id": "2GQ6WMH9W",
    >       "path": "/Public Examples/3. Source counts over the sky"
    >     },
    >     {
    >       "id": "2GSNYBDWB",
    >       "path": "/Public Examples/4. Mean proper motions over the sky"
    >     },
    >     {
    >       "id": "2H2YRJCKM",
    >       "path": "/Public Examples/5. Working with Gaia XP spectra"
    >     },
    >     {
    >       "id": "2GZME59KY",
    >       "path": "/Public Examples/6. Working with cross-matched surveys"
    >     },
    >     {
    >       "id": "2GQDKZ59J",
    >       "path": "/Public Examples/7. Good astrometric solutions via ML Random Forrest classifier"
    >     },
    >     {
    >       "id": "2GVXKC266",
    >       "path": "/Public Examples/8. Tips and tricks"
    >     }
    >   ]


    # Count the test user's notebooks
    curl \
        --silent \
        --cookie "${zepcookies:?}" \
        "${zeppelinurl:?}/api/notebook" \
    | jq '
        [
        .body[] | select(.path | startswith("/Users/'${username}'")) | {id, path}
        ] | length
        '

    >   0


    # Count a known user's notebooks
    curl \
        --silent \
        --cookie "${zepcookies:?}" \
        "${zeppelinurl:?}/api/notebook" \
    | jq '
        [
        .body[] | select(.path | startswith("/Users/zrq")) | {id, path}
        ] | length
        '

    >   2


    curl \
        --silent \
        --cookie "${zepcookies:?}" \
        "${zeppelinurl:?}/api/notebook" \
    | jq '
        [
        .body[] | select(.path | startswith("/Users/nch")) | {id, path}
        ] | length
        '

    >   18


    # Clone a notebook.
    noteid="2GQDKZ59J"
    srcpath="/Public Examples/7. Good astrometric solutions via ML Random Forrest classifier"
    newpath="/Users/${username}/7. Good astrometric solutions via ML Random Forrest classifier"

    curl \
        --silent \
        --location \
        --request POST \
        --cookie "${zepcookies:?}" \
        --header 'Content-Type: application/json' \
        --data "{
            \"name\": \"${newpath}\"
            }" \
        "${zeppelinurl}/api/notebook/${noteid}" \
    | jq '.'

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": "2H9PFM17G"
    >   }


    # Check the files on the server.
    ssh zeppelin \
        "
        date
        hostname
        echo "----"
        ls -1 'zeppelin/notebook/Users/${username}'
        echo "----"
        "

    >   Wed Jul  6 04:43:25 UTC 2022
    >   iris-gaia-red-20220706-zeppelin
    >   ----
    >   7. Good astrometric solutions via ML Random Forrest classifier_2H9PFM17G.zpln
    >   ----


    # Clone the same notebook again.
    curl \
        --silent \
        --location \
        --request POST \
        --cookie "${zepcookies:?}" \
        --header 'Content-Type: application/json' \
        --data "{
            \"name\": \"${newpath}\"
            }" \
        "${zeppelinurl}/api/notebook/${noteid}" \
    | jq '.'

    >   {
    >     "exception": "IOException",
    >     "message": "java.io.IOException: Fail to clone note",
    >     "stacktrace": "
    >           java.io.IOException: java.io.IOException: Fail to clone note
    >             ....
    >             ....
    >           Caused by: java.io.IOException: Fail to clone note
    >             ... 77 more
    >           Caused by: org.apache.zeppelin.notebook.exception.NotePathAlreadyExistsException: Note '/Users/Benjamin/7. Good astrometric solutions via ML Random Forrest classifier' existed
    >             ....
    >             ....
    >             ... 76 more
    >           "
    >   }

    # OMG that's crappy.

    # Clone an unknown notebook.
    curl \
        --silent \
        --location \
        --request POST \
        --cookie "${zepcookies:?}" \
        --header 'Content-Type: application/json' \
        --data "{
            \"name\": \"${newpath}\"
            }" \
        "${zeppelinurl}/api/notebook/badid" \
    | jq '.'

    >   {
    >     "exception": "IOException",
    >     "message": "java.io.IOException: Fail to clone note",
    >     "stacktrace": "...."
    >   }

    # OMG that's crappy.

    # Success
    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": "2H9PFM17G"
    >   }


    # Unknown or duplicate
    >   {
    >     "exception": "IOException",
    >     "message": "java.io.IOException: ....",
    >     "stacktrace": "
    >       ....
    >       ....
    >       "
    >   }


    # Get notebook permission.
    noteid=2H9PFM17G
    curl \
        --silent \
        --location \
        --cookie "${zepcookies:?}" \
        "${zeppelinurl}/api/notebook/${noteid}/permissions" \
    | jq '.'

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "readers": [
    >         "Benjamin"
    >       ],
    >       "owners": [
    >         "Benjamin"
    >       ],
    >       "writers": [
    >         "Benjamin"
    >       ],
    >       "runners": [
    >         "Benjamin"
    >       ]
    >     }
    >   }

    # Looks good.


# -----------------------------------------------------
# -----------------------------------------------------

    Login as the user
    Check response & exit with error

    Count the User's Examples folder.
    if > 0
        List the user's examples
            Add [id, path] to list
        exit with skip

    For each public example
        Clone into User's examples
        Check response
        if != OK
            exit with fail
        Add [id, path] to list
    exit with done

    Run the code on Zeppelin node and use localhost as the URL.
    Avoids issues with DNS and SSL ..

    Plus we have access to the same json-tools as the other scripts.





