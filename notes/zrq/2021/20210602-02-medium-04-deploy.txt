#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#



# -----------------------------------------------------
# Checkout the target branch.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

            git checkout '20210602-zrq-resources'

    popd

    >   ....
    >   ....


# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name ansibler \
        --hostname ansibler \
        --env "SSH_AUTH_SOCK=/mnt/ssh_auth_sock" \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw,z" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE:?}/deployments:/deployments:ro,z" \
        atolmis/ansible-client:2020.12.02 \
        bash


# -----------------------------------------------------
# Set the target cloud.
#[root@ansibler]

    cloudname=gaia-prod


# -----------------------------------------------------
# Delete everything.
#[root@ansibler]

    time \
        /deployments/openstack/bin/delete-all.sh \
            "${cloudname:?}"

    >   real    1m4.348s
    >   user    0m27.481s
    >   sys     0m3.890s


# -----------------------------------------------------
# Create everything, using a standard config.
#[root@ansibler]

    time \
        /deployments/hadoop-yarn/bin/create-all.sh \
            "${cloudname:?}" \
            'medium-04'

    >   real    58m39.444s
    >   user    13m42.458s
    >   sys     4m32.181s


# -----------------------------------------------------
# Check the deployment status.
#[root@ansibler]

    cat '/tmp/aglais-status.yml'

    >   aglais:
    >     status:
    >       deployment:
    >         type: hadoop-yarn
    >         conf: medium-04
    >         name: gaia-prod-20210602
    >         date: 20210602T162915
    >     spec:
    >       openstack:
    >         cloud: gaia-prod


# -----------------------------------------------------
# Add the Zeppelin user accounts.
#[root@ansibler]

    ssh zeppelin

        pushd "${HOME}"
        ln -s "zeppelin-0.8.2-bin-all" "zeppelin"

            pushd "zeppelin"

                # Manual edit to add names and passwords
                vi conf/shiro.ini

                # Restart Zeppelin for the changes to take.
                ./bin/zeppelin-daemon.sh restart

            popd
        popd
    exit

    >   ....
    >   ....


# -----------------------------------------------------
# Get the public IP address of our Zeppelin node.
#[root@ansibler]

    deployname=$(
        yq read \
            '/tmp/aglais-status.yml' \
                'aglais.status.deployment.name'
        )

    zeppelinid=$(
        openstack \
            --os-cloud "${cloudname:?}" \
            server list \
                --format json \
        | jq -r '.[] | select(.Name == "'${deployname:?}'-zeppelin") | .ID'
        )

    zeppelinip=$(
        openstack \
            --os-cloud "${cloudname:?}" \
            server show \
                --format json \
                "${zeppelinid:?}" \
        | jq -r '.addresses' \
        | sed '
            s/[[:space:]]//
            s/.*=\(.*\)/\1/
            s/.*,\(.*\)/\1/
            '
        )

cat << EOF
Zeppelin ID [${zeppelinid:?}]
Zeppelin IP [${zeppelinip:?}]
EOF

    >   Zeppelin ID [f1592b3f-9352-4b60-8d9c-bf0fde11c6ca]
    >   Zeppelin IP [128.232.227.188]


# -----------------------------------------------------
# Update our DNS entries.
#[root@ansibler]

    ssh root@infra-ops.aglais.uk

        vi /var/aglais/dnsmasq/hosts/gaia-prod.hosts

        ~   128.232.227.188  zeppelin.gaia-prod.aglais.uk


        podman kill --signal SIGHUP dnsmasq

        podman logs dnsmasq | tail

        exit

    >   dnsmasq[1]: read /etc/dnsmasq/hosts/gaia-prod.hosts - 1 addresses
    >   dnsmasq[1]: read /etc/dnsmasq/hosts/gaia-test.hosts - 1 addresses
    >   dnsmasq[1]: read /etc/dnsmasq/hosts/gaia-dev.hosts - 1 addresses


# -----------------------------------------------------
# Login to the Zeppelin node and check the shares and links.
#[root@ansibler]

    ssh "fedora@zeppelin.${cloudname:?}.aglais.uk"

        ls -alh /data/gaia/

    >   GDR2
    >   GDR2_6514

    >   GEDR3
    >   GEDR3_2048
    >   GEDR3_4096
    >   GEDR3_8192
    >   GEDR3_11932

    >   edr2 -> /data/gaia/GDR2_6514
    >   edr3 -> /data/gaia/GEDR3_11932


        ls -alh /data/gaia/GDR2

    >   GDR2_GAIASOURCE -> /data/gaia/GDR2_6514/GDR2_6514_GAIASOURCE


        ls -alh /data/gaia/GDR2_6514

    >   GDR2_6514_GAIASOURCE
    >   GDR2_GAIASOURCE -> GDR2_6514_GAIASOURCE


        ls -alh /data/gaia/GDR2_6514/GDR2_6514_GAIASOURCE | wc -l

    >   6517


        ls -alh /data/gaia/GEDR3

    >   GEDR3_GAIASOURCE               -> /data/gaia/GEDR3_2048/GEDR3_2048_GAIASOURCE
    >   GEDR3_PS1_BEST_NEIGHBOURS      -> /data/gaia/GEDR3_2048/GEDR3_2048_PS1_BEST_NEIGHBOURS
    >   GEDR3_ALLWISE_BEST_NEIGHBOURS  -> /data/gaia/GEDR3_2048/GEDR3_2048_ALLWISE_BEST_NEIGHBOURS
    >   GEDR3_2MASSPSC_BEST_NEIGHBOURS -> /data/gaia/GEDR3_2048/GEDR3_2048_2MASSPSC_BEST_NEIGHBOURS


        ls -alh /data/gaia/GEDR3_11932

    >   GEDR3_11932_GAIASOURCE
    >   GEDR3_GAIASOURCE -> GEDR3_11932_GAIASOURCE


        ls -alh /data/gaia/GEDR3_11932/GEDR3_11932_GAIASOURCE | wc -l

    >   11935


        ls -alh /data/gaia/GEDR3_2048

    >   GEDR3_2048_GAIASOURCE
    >   GEDR3_2048_PS1_BEST_NEIGHBOURS
    >   GEDR3_2048_ALLWISE_BEST_NEIGHBOURS
    >   GEDR3_2048_2MASSPSC_BEST_NEIGHBOURS

    >   GEDR3_GAIASOURCE               -> GEDR3_2048_GAIASOURCE
    >   GEDR3_PS1_BEST_NEIGHBOURS      -> GEDR3_2048_PS1_BEST_NEIGHBOURS
    >   GEDR3_ALLWISE_BEST_NEIGHBOURS  -> GEDR3_2048_ALLWISE_BEST_NEIGHBOURS
    >   GEDR3_2MASSPSC_BEST_NEIGHBOURS -> GEDR3_2048_2MASSPSC_BEST_NEIGHBOURS


        ls -alh /data/gaia/GEDR3_2048/GEDR3_2048_GAIASOURCE | wc -l

    >   2052


        ls -alh /data/gaia/GEDR3_2048/GEDR3_2048_2MASSPSC_BEST_NEIGHBOURS | wc -l

    >   2052


        ls -alh /data/gaia/GEDR3_2048/GEDR3_2048_ALLWISE_BEST_NEIGHBOURS | wc -l

    >   2052


        ls -alh /data/gaia/GEDR3_2048/GEDR3_2048_PS1_BEST_NEIGHBOURS | wc -l

    >   2052


        ls -alh /data/gaia/GEDR3_4096

    >   GEDR3_4096_GAIASOURCE
    >   GEDR3_4096_PS1_BEST_NEIGHBOURS
    >   GEDR3_4096_ALLWISE_BEST_NEIGHBOURS
    >   GEDR3_4096_2MASSPSC_BEST_NEIGHBOURS

    >   GEDR3_GAIASOURCE               -> GEDR3_4096_GAIASOURCE
    >   GEDR3_PS1_BEST_NEIGHBOURS      -> GEDR3_4096_PS1_BEST_NEIGHBOURS
    >   GEDR3_ALLWISE_BEST_NEIGHBOURS  -> GEDR3_4096_ALLWISE_BEST_NEIGHBOURS
    >   GEDR3_2MASSPSC_BEST_NEIGHBOURS -> GEDR3_4096_2MASSPSC_BEST_NEIGHBOURS


        ls -alh /data/gaia/GEDR3_4096/GEDR3_4096_GAIASOURCE | wc -l

    >   4100


        ls -alh /data/gaia/GEDR3_4096/GEDR3_4096_PS1_BEST_NEIGHBOURS | wc -l

    >   3


        ls -alh /data/gaia/GEDR3_4096/GEDR3_4096_ALLWISE_BEST_NEIGHBOURS | wc -l

    >   3


        ls -alh /data/gaia/GEDR3_4096/GEDR3_4096_2MASSPSC_BEST_NEIGHBOURS | wc -l

    >   3


        ls -alh /data/gaia/GEDR3_8192

    >   GEDR3_8192_GAIASOURCE
    >   GEDR3_8192_PS1_BEST_NEIGHBOURS
    >   GEDR3_8192_ALLWISE_BEST_NEIGHBOURS
    >   GEDR3_8192_2MASSPSC_BEST_NEIGHBOURS

    >   GEDR3_GAIASOURCE               -> GEDR3_8192_GAIASOURCE
    >   GEDR3_PS1_BEST_NEIGHBOURS      -> GEDR3_8192_PS1_BEST_NEIGHBOURS
    >   GEDR3_ALLWISE_BEST_NEIGHBOURS  -> GEDR3_8192_ALLWISE_BEST_NEIGHBOURS
    >   GEDR3_2MASSPSC_BEST_NEIGHBOURS -> GEDR3_8192_2MASSPSC_BEST_NEIGHBOURS


        ls -alh /data/gaia/GEDR3_8192/GEDR3_8192_GAIASOURCE | wc -l

    >   8196

        ls -alh /data/gaia/GEDR3_8192/GEDR3_8192_PS1_BEST_NEIGHBOURS | wc -l

    >   3


        ls -alh /data/gaia/GEDR3_8192/GEDR3_8192_ALLWISE_BEST_NEIGHBOURS | wc -l

    >   3


        ls -alh /data/gaia/GEDR3_8192/GEDR3_8192_2MASSPSC_BEST_NEIGHBOURS | wc -l

    >   3


# -----------------------------------------------------
# -----------------------------------------------------
# Login via Firefox
#[user@desktop]

    firefox --new-window "http://zeppelin.gaia-prod.aglais.uk:8080/" &


# -----------------------------------------------------
# -----------------------------------------------------

    Run the test againts the new data ....

    Good astrometric solutions via ML Random Forest classifier
    https://raw.githubusercontent.com/wfau/aglais-notebooks/main/2FRPC4BFS/note.json

        #
        # Change the column name.
        astrometric_features = [
            ....
            'astrometric_sigma5d_max',
            ....
            ]

        #
        # Use the 8192 partition data.
        gs_parquet = sqlContext.read.parquet('file:////data/gaia/GEDR3_8192/GEDR3_GAIASOURCE')

        #
        # Starting a new test, (500 trees on 100% data)
        #

        First cell - Took 3 sec. Last updated by zrq at June 03 2021, 3:31:27 AM.
        Last cell  - Took 0 sec. Last updated by zrq at June 03 2021, 4:19:58 AM.

        datediff --format '%Hhr %Mmin %Ssec' '3:31:27' '4:19:58'

        0hr 48min 31sec

        #
        # Use the 4096 partition data.
        gs_parquet = sqlContext.read.parquet('file:////data/gaia/GEDR3_4096/GEDR3_GAIASOURCE')

        #
        # Starting a new test, (500 trees on 100% data)
        #

        First cell - Took 0 sec. Last updated by zrq at June 03 2021, 4:28:38 AM.
        Last cell  - Took 0 sec. Last updated by zrq at June 03 2021, 5:00:45 AM.

        datediff --format '%Hhr %Mmin %Ssec' '4:28:38' '5:00:45'

        0hr 32min 7sec

        #
        # Use the 2048 partition data.
        gs_parquet = sqlContext.read.parquet('file:////data/gaia/GEDR3_2048/GEDR3_GAIASOURCE')

        #
        # Starting a new test, (500 trees on 100% data)
        #

        First cell - Took 0 sec. Last updated by zrq at June 03 2021, 5:06:09 AM.
        Last cell  - Took 0 sec. Last updated by zrq at June 03 2021, 5:38:49 AM.

        datediff --format '%Hhr %Mmin %Ssec' '5:06:09' '5:38:49'

        0hr 32min 40sec




        #
        # Starting a new test, (500 trees on 100% data)
        # Leaving existing PySpark interpreter running
        #

        First cell - Took 0 sec. Took 0 sec. Last updated by zrq at June 03 2021, 11:52:00 AM.
        Last cell  - Took 0 sec. Took 1 sec. Last updated by zrq at June 03 2021, 2:20:00 PM.

        datediff --format '%Hhr %Mmin %Ssec' '11:52:00' '14:20:00'

        2hr 28min 0sec

        #
        # Still have problems with leaving the PySpark interpreter running.
        #



