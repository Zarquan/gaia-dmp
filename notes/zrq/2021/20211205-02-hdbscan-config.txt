#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Test deployment with large memory node for Zeppelin.
        branch: zarquan:20211011-zrq-hdbscan-config
        config: zeppelin-27.45-spark-6.27.45

    Result:


# -----------------------------------------------------
# Check the current branch.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        git branch

    popd

    >     20210113-zrq-source-build
    >   * 20211011-zrq-hdbscan-config
    >     20211105-zrq-iris-2022
    >     20211202-zrq-PR-testing
    >     master


# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name ansibler \
        --hostname ansibler \
        --publish 3000:3000 \
        --publish 8088:8088 \
        --env "SSH_AUTH_SOCK=/mnt/ssh_auth_sock" \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw,z" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE:?}/deployments:/deployments:ro,z" \
        atolmis/ansible-client:2021.08.25 \
        bash


# -----------------------------------------------------
# Set the target cloud.
#[root@ansibler]

    cloudname=gaia-dev


# -----------------------------------------------------
# Delete everything from dev and test.
#[root@ansibler]

    time \
        /deployments/openstack/bin/delete-all.sh \
            'gaia-dev'

    >   real    3m39.616s
    >   user    1m21.066s
    >   sys     0m10.550s


    time \
        /deployments/openstack/bin/delete-all.sh \
            'gaia-test'

    >   real    1m4.121s
    >   user    0m28.168s
    >   sys     0m3.589s


# -----------------------------------------------------
# Create everything, using the new config.
#[root@ansibler]

    time \
        /deployments/hadoop-yarn/bin/create-all.sh \
            "${cloudname:?}" \
            'zeppelin-27.45-spark-6.27.45' \
            'test' \
        | tee /tmp/create.log

    >   real    172m9.607s
    >   user    41m6.443s
    >   sys     7m14.635s

    >   TASK [Run benchmarker] ..
    >   changed: [localhost] => {
    >       "changed": true,
    >       "cmd": ["python3", "/tmp/run-test.py"],
    >       "delta": "2:13:22.275427",
    >       "end": "2021-12-05 20:46:17.106842",
    >       "rc": 0,
    >       "start": "2021-12-05 18:32:54.831415",
    >       "stderr": "",
    >       "stderr_lines": [],
    >       "stdout": "Test completed after: 8001.97 seconds ....",
    >       "stdout_lines": [
    >           "Test completed after: 8001.97 seconds",
    >           ....
    >           ]
    >       }
    >   ....
    >   ....
    >   PLAY RECAP ..
    >   localhost : ok=9    changed=6    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

    >   Test completed after: 8164.41 seconds
    >       {
    >       'SetUp': {
    >           'totaltime': '37.92',
    >           'status': 'SUCCESS',
    >           'msg': '',
    >           'valid': 'TRUE'
    >           },
    >       'Mean_proper_motions_over_the_sky': {
    >           'totaltime': '44.44',
    >           'status': 'SUCCESS',
    >           'msg': '',
    >           'valid': 'TRUE'
    >           },
    >       'Source_counts_over_the_sky.json': {
    >           'totaltime': '11.78',
    >           'status': 'SUCCESS',
    >           'msg': '',
    >           'valid': 'TRUE'
    >           },
    >       'Good_astrometric_solutions_via_ML_Random_Forrest_classifier': {
    >           'totaltime': '479.20',
    >           'status': 'SUCCESS',
    >           'msg': '',
    >           'valid': 'TRUE'
    >           },
    >       'QC_cuts_dev.json': {
    >           'totaltime': '4247.33',
    >           'status': 'SUCCESS',
    >           'msg': '',
    >           'valid': 'TRUE'
    >           },
    >       'WD_detection_dev.json': {
    >           'totaltime': '3181.30',
    >           'status': 'SUCCESS',
    >           'msg': '',
    >           'valid': 'TRUE'
    >           }
    >       }


# -----------------------------------------------------
# -----------------------------------------------------
# Setup a SSH tunnel SOCKS proxy.
# https://www.digitalocean.com/community/tutorials/how-to-route-web-traffic-securely-without-a-vpn-using-a-socks-tunnel
# Running 'htop' on the Zeppelin node to keep the connection alive.
#[user@desktop]

    podman exec \
        --tty \
        --interactive \
        ansibler \
            bash -c \
            '
            ssh \
                -t \
                -D "3000"  \
                zeppelin \
                    "
                    htop
                    "
            '


# -----------------------------------------------------
# Login to the Zeppelin, Spark and Grafana UI using FoxyProxy SOCKS proxy.
#[user@desktop]

    firefox \
        'http://zeppelin:8080/' \
        'http://monitor:3000/login' \
        'http://master01:8088/cluster' \
        &


    Create our Prometheus data source.
    http://monitor:3000/datasources/new

        URL: http://monitor:9090/
        scrape: 1s

    Import our dashboards from local disc.
    http://monitor:3000/dashboard/import

        deployments/common/grafana/20210705-02-grafana-dash.json
        deployments/common/grafana/node-exporter-v20201010-1633446087511.json

        http://monitor:3000/d/34S3C8k7z/my-first-dash&refresh=5s
        http://monitor:3000/d/xfpJB9FGz/1-node-exporter-for-prometheus-dashboard-en-v20201010?orgId=1&refresh=5s


# -----------------------------------------------------

    Screenshots
    /home/Zarquan/Desktop/projects/WFAU/aglais/screenshots/20211206-1300

    Zeppelin main page, after tests completed
    ....

    Using ML to define an astrometrically clean sample of stars
    ....

    HEALPix density map
    ....

    Mean RA proper motion plot
    ....

    Training a Random Forest to identify White Dwarf Stars
    ....


# -----------------------------------------------------

    Spark UI
    ....

    Grafana
    ....

    Grafana
    ....


