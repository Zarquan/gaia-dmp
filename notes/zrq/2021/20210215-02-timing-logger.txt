#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    Target:

        Issue #371
        https://github.com/wfau/aglais/issues/371

        Create a jq parser to extract the timing information from a Zeppelin notebook.

    Result:

        Work in progress ...


    #
    # REST API documentation.
    # https://zeppelin.apache.org/docs/0.7.0/rest-api/rest-notebook.html#export-a-note

    #
    # REST API template
    # http://[zeppelin-server]:[zeppelin-port]/api/notebook/export/[noteId]

    #
    # HTML notebook URL
    # http://128.232.227.222:8080/#/notebook/2FX82FMTH


# -----------------------------------------------------
# Use the REST API to get the notebook contents.
#[user@desktop]

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FX82FMTH' \
    | jq '.'

    >   ....
    >   ....

    #
    # Select just the text outputs.
    #

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FX82FMTH' \
    | jq '
        .body.paragraphs[] | .results | select(.code == "SUCCESS") | .msg[] | select(.type == "TEXT")
        '

    >   {
    >     "type": "TEXT",
    >     "data": "1724028"
    >   }
    >   {
    >     "type": "TEXT",
    >     "data": "<Figure size 648x648 with 1 Axes>\n"
    >   }
    >   {
    >     "type": "TEXT",
    >     "data": "Good training data size: 244740 rows\nBad  training data size: 244740 rows\n"
    >   }
    >   {
    >     "type": "TEXT",
    >     "data": "   |      1      2\n------------------------------\n 1 |  80320    553\n 2 |     10  80422\n\nMisclassifications for the test set: 0.35 %\n"
    >   }
    >   {
    >     "type": "TEXT",
    >     "data": "Relative importance of astrometric features:\n\n           parallax_error  :  0.238293\n      parallax_over_error  :  0.090757\n astrometric_sigma_5d_max  :  0.216903\n               pmra_error  :  0.152419\n              pmdec_error  :  0.135658\n astrometric_excess_noise  :  0.078488\nipd_gof_harmonic_amplitude  :  0.036072\n                     ruwe  :  0.016268\n  visibility_periods_used  :  0.007118\n                    pmdec  :  0.007725\n                     pmra  :  0.004116\n         ipd_frac_odd_win  :  0.001107\n      ipd_frac_multi_peak  :  0.009796\n       astrometric_gof_al  :  0.003791\n      parallax_pmdec_corr  :  0.000393\nastrometric_excess_noise_sig  :  0.001098\n"
    >   }
    >   {
    >     "type": "TEXT",
    >     "data": "<Figure size 432x698.4 with 1 Axes>\n"
    >   }


    #
    # Exclude image outputs.
    #

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FX82FMTH' \
    | jq '
        .body.paragraphs[] | del(.results | select(.code == "SUCCESS") | .msg[] | select(.type == "IMG"))
        '

    >   {
    >     "text": "%md\n\n# Using ML to define an astrometrically clean sample of stars\n\n   Follows Gaia EDR3 performance verification paper DPACP-81 (Smart et al.) in classifying astrometric solutions as good or bad\n   via supervised ML. Employs a Random Forrest classifier plus appropriately defined training sets - see\n\n   https://arxiv.org/abs/2012.02061\n  \n   for further details. The work flow implemented here follows closely that described in Section 2, \"GCNS Generation\"\n   (GCNS = Gaia Catalogue of Nearby Stars) and is designed to clean up a 100pc (= nearby) sample.\n\n   <i>Version employing newer, richer dataframe API in pyspark ML</i>\n   \n   <b>IMPORTANT NOTE: </b> current deployment has Spark 2.4.7 installed. That specific version's API is documented here:\n   \n   https://spark.apache.org/docs/2.4.7/ml-classification-regression.html#random-forest-classifier\n   \n   Beware of following on-line message board and other fora posts for help and examples as they more often than not describe and link to different versions, and the API is evolving <i>all the time</i>.\n   \n   ",
    >     "user": "gaiauser",
    >     "dateUpdated": "Feb 15, 2021 8:15:17 AM",
    >     "config": {
    >       "tableHide": false,
    >       "editorSetting": {
    >         "language": "markdown",
    >         "editOnDblClick": true,
    >         "completionKey": "TAB",
    >         "completionSupport": false
    >       },
    >       "colWidth": 12,
    >       "editorMode": "ace/mode/markdown",
    >       "fontSize": 9,
    >       "editorHide": false,
    >       "results": {},
    >       "enabled": true
    >     },
    >     "settings": {
    >       "params": {},
    >       "forms": {}
    >     },
    >     "results": {
    >       "code": "SUCCESS",
    >       "msg": [
    >         {
    >           "type": "HTML",
    >           "data": "<div class=\"markdown-body\">\n<h1>Using ML to define an astrometrically clean sample of stars</h1>\n<p>Follows Gaia EDR3 performance verification paper DPACP-81 (Smart et al.) in classifying astrometric solutions as good or bad<br/> via supervised ML. Employs a Random Forrest classifier plus appropriately defined training sets - see</p>\n<p><a href=\"https://arxiv.org/abs/2012.02061\">https://arxiv.org/abs/2012.02061</a></p>\n<p>for further details. The work flow implemented here follows closely that described in Section 2, &ldquo;GCNS Generation&rdquo;<br/> (GCNS = Gaia Catalogue of Nearby Stars) and is designed to clean up a 100pc (= nearby) sample.</p>\n<p><i>Version employing newer, richer dataframe API in pyspark ML</i></p>\n<p><b>IMPORTANT NOTE: </b> current deployment has Spark 2.4.7 installed. That specific version&rsquo;s API is documented here:</p>\n<p><a href=\"https://spark.apache.org/docs/2.4.7/ml-classification-regression.html#random-forest-classifier\">https://spark.apache.org/docs/2.4.7/ml-classification-regression.html#random-forest-classifier</a></p>\n<p>Beware of following on-line message board and other fora posts for help and examples as they more often than not describe and link to different versions, and the API is evolving <i>all the time</i>.</p>\n</div>"
    >         }
    >       ]
    >     },
    >     "apps": [],
    >     "jobName": "paragraph_1613126076679_1211627861",
    >     "id": "20201013-131059_546082898",
    >     "dateCreated": "Feb 12, 2021 10:34:36 AM",
    >     "dateStarted": "Feb 15, 2021 8:15:17 AM",
    >     "dateFinished": "Feb 15, 2021 8:15:17 AM",
    >     "status": "FINISHED",
    >     "progressUpdateIntervalMs": 500
    >   }
    >   ....
    >   ....
    >   {
    >     "text": "%spark.pyspark\n\n# where are the NULLs in raw_sources features selection?\nfor feature in astrometric_features: print (spark.sql('SELECT COUNT(*) AS ' + feature + '_nulls FROM raw_sources WHERE ' + feature + ' IS NULL').show())\n# scan_direction_strength_k2 is the culprit!\n    \n# alternatively could try:\n#Dict_Null = {col:df.filter(df[col].isNull()).count() for col in df.columns}\n#Dict_Null\n    \n",
    >     "user": "gaiauser",
    >     "dateUpdated": "Feb 13, 2021 6:14:46 PM",
    >     "config": {
    >       "editorSetting": {
    >         "language": "python",
    >         "editOnDblClick": false,
    >         "completionKey": "TAB",
    >         "completionSupport": true
    >       },
    >       "colWidth": 12,
    >       "editorMode": "ace/mode/python",
    >       "fontSize": 9,
    >       "results": {},
    >       "enabled": true
    >     },
    >     "settings": {
    >       "params": {},
    >       "forms": {}
    >     },
    >     "apps": [],
    >     "jobName": "paragraph_1613126076687_1356332997",
    >     "id": "20201124-171324_1960205489",
    >     "dateCreated": "Feb 12, 2021 10:34:36 AM",
    >     "dateStarted": "Feb 13, 2021 6:14:46 PM",
    >     "dateFinished": "Feb 13, 2021 6:29:25 PM",
    >     "status": "FINISHED",
    >     "errorMessage": "",
    >     "progressUpdateIntervalMs": 500
    >   }

    #
    # Select specific fields.
    #

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FYRDDR17' \
    | jq '
        .body.paragraphs[] | {
            title,
            status,
            dateStarted,
            dateFinished,
            status: .results.code
            }
        '

    >   {
    >     "title": "Paragraph 001",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 11:51:15 AM",
    >     "dateFinished": "Feb 15, 2021 11:51:17 AM"
    >   }
    >   ....
    >   ....

    #
    # Select text message lines that begin with '-'.
    #

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FYRDDR17' \
    | jq '
        .body.paragraphs[] | {
            title,
            status,
            dateStarted,
            dateFinished,
            status: .results.code,
            output: (.results | select(.msg | length > 0) | .msg[] | select(.type == "TEXT") | .data | split("\n") | map(select(startswith("-"))))
            }
        '

    >   {
    >     "title": "Paragraph 001",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 11:51:15 AM",
    >     "dateFinished": "Feb 15, 2021 11:51:17 AM",
    >     "output": [
    >       "-rw-------.  1 fedora fedora  503 Feb 13 03:21 .bash_history",
    >       "-rw-r--r--.  1 fedora fedora   18 Feb 16  2019 .bash_logout",
    >       "-rw-r--r--.  1 fedora fedora  141 Feb 16  2019 .bash_profile",
    >       "-rw-r--r--.  1 fedora fedora  376 Feb 16  2019 .bashrc",
    >       "-rw-------.  1 fedora fedora    0 Feb 12 10:34 .scala_history"
    >     ]
    >   }

    #
    # Add the elapsed time calculation.
    #

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FYRDDR17' \
    | jq '.' \
    | sed '
        s/\("dateStarted":[[:space:]]*\)"\([[:alpha:]]*\)[[:space:]]*\([[:alpha:]]*\)[[:space:]]*\([[:digit:]]*\)[[:space:]]*\([[:digit:]]*:[[:digit:]]*:[[:digit:]]*\)[[:space:]]*\([[:alpha:]]*\)[[:space:]]*\([[:digit:]]*\)"/\1"\7 \3 \4 \5"/
        s/\("dateFinished":[[:space:]]*\)"\([[:alpha:]]*\)[[:space:]]*\([[:alpha:]]*\)[[:space:]]*\([[:digit:]]*\)[[:space:]]*\([[:digit:]]*:[[:digit:]]*:[[:digit:]]*\)[[:space:]]*\([[:alpha:]]*\)[[:space:]]*\([[:digit:]]*\)"/\1"\7 \3 \4 \5"/
        /"started":/ {
            h
            s/\([[:space:]]*\)"dateStarted":[[:space:]]*\("[^"]*"\).*$/\1\2/
            x
            }
        /"finished":/ {
            H
            x
            s/[[:space:]]*"dateFinished":[[:space:]]*\("[^"]*"\).*$/ \1/
            s/\([[:space:]]*\)\(.*\)/\1echo "\1\\"elapsedTime\\": \\"$(datediff --format "%H:%M:%S" --input-format "%Y %b %d %H:%M:%S" \2)\\","/e
            x
            G
            }
        ' \

        #
        # !!!!! the dates are in a different format !
        #

        #
        # Back to square one with the date format .. although they are not as bad as the previous ones.
        # Might be able to do it without the sed processing step.
        #


    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FYRDDR17' \
    | jq '.' \
    | sed '
        /"dateStarted":/ {
            h
            s/\([[:space:]]*\)"dateStarted":[[:space:]]*\("[^"]*"\).*$/\1\2/
            x
            }
        /"dateFinished":/ {
            H
            x
            s/[[:space:]]*"dateFinished":[[:space:]]*\("[^"]*"\).*$/ \1/
            s/\([[:space:]]*\)\(.*\)/\1echo "\1\\"elapsedTime\\": \\"$(datediff --format "%H:%M:%S" --input-format "%b %d, %Y %H:%M:%S %p" \2)\\","/e
            x
            G
            }
        ' \

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "paragraphs": [
    >         {
    >           "title": "Paragraph 001",
    >           "text": "%sh\nls -al\n",
    >           "user": "gaiauser",
    >           "dateUpdated": "Feb 15, 2021 11:51:15 AM",
    >           ....
    >           ....
    >           "id": "20210215-115033_1362835282",
    >           "dateCreated": "Feb 15, 2021 11:50:33 AM",
    >           "dateStarted": "Feb 15, 2021 11:51:15 AM",
    >           "dateFinished": "Feb 15, 2021 11:51:17 AM",
    >           "elapsedTime": "0:0:2",
    >           "status": "FINISHED",
    >           "progressUpdateIntervalMs": 500
    >         },
    >       ....
    >       ....
    >       "info": {}
    >     }
    >   }

    #
    # Add the field selection and output parser.
    #

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FYRDDR17' \
    | jq '
        .body.paragraphs[] | {
            title,
            status,
            dateStarted,
            dateFinished,
            status: .results.code,
            output: (.results | select(.msg | length > 0) | .msg[] | select(.type == "TEXT") | .data | split("\n") | map(select(startswith("-"))))
            }
        ' \
    | sed '
        /"dateStarted":/ {
            h
            s/\([[:space:]]*\)"dateStarted":[[:space:]]*\("[^"]*"\).*$/\1\2/
            x
            }
        /"dateFinished":/ {
            H
            x
            s/[[:space:]]*"dateFinished":[[:space:]]*\("[^"]*"\).*$/ \1/
            s/\([[:space:]]*\)\(.*\)/\1echo "\1\\"elapsedTime\\": \\"$(datediff --format "%H:%M:%S" --input-format "%b %d, %Y %H:%M:%S %p" \2)\\","/e
            x
            G
            }
        '

    >   {
    >     "title": "Paragraph 001",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 11:51:15 AM",
    >     "dateFinished": "Feb 15, 2021 11:51:17 AM",
    >     "elapsedTime": "0:0:2",
    >     "output": [
    >       "-rw-------.  1 fedora fedora  503 Feb 13 03:21 .bash_history",
    >       "-rw-r--r--.  1 fedora fedora   18 Feb 16  2019 .bash_logout",
    >       "-rw-r--r--.  1 fedora fedora  141 Feb 16  2019 .bash_profile",
    >       "-rw-r--r--.  1 fedora fedora  376 Feb 16  2019 .bashrc",
    >       "-rw-------.  1 fedora fedora    0 Feb 12 10:34 .scala_history"
    >     ]
    >   }


# -----------------------------------------------------
# Try it on the real notebook.
#[user@desktop]

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FX82FMTH' \
    | jq '
        .body.paragraphs[] | {
            title,
            status,
            dateStarted,
            dateFinished,
            status: .results.code,
            output: (.results | select(.msg | length > 0) | .msg[] | select(.type == "TEXT") | .data | split("\n") | map(select(startswith("-"))))
            }
        ' \
    | sed '
        /"dateStarted":/ {
            h
            s/\([[:space:]]*\)"dateStarted":[[:space:]]*\("[^"]*"\).*$/\1\2/
            x
            }
        /"dateFinished":/ {
            H
            x
            s/[[:space:]]*"dateFinished":[[:space:]]*\("[^"]*"\).*$/ \1/
            s/\([[:space:]]*\)\(.*\)/\1echo "\1\\"elapsedTime\\": \\"$(datediff --format "%H:%M:%S" --input-format "%b %d, %Y %H:%M:%S %p" \2)\\","/e
            x
            G
            }
        '

    >   {
    >     "title": "Select sources",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:25:36 PM",
    >     "dateFinished": "Feb 15, 2021 2:27:03 PM",
    >     "elapsedTime": "0:1:27",
    >     "output": []
    >   }
    >   {
    >     "title": "Hertzsprung-Russell diagram",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:27:03 PM",
    >     "dateFinished": "Feb 15, 2021 2:30:44 PM",
    >     "elapsedTime": "0:3:41",
    >     "output": []
    >   }
    >   {
    >     "title": "Selecting training data",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:30:44 PM",
    >     "dateFinished": "Feb 15, 2021 2:37:18 PM",
    >     "elapsedTime": "0:6:34",
    >     "output": []
    >   }

    #
    # Missing some elements ..
    #

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FX82FMTH' \
    | jq '
        .body.paragraphs[] | {
            title,
            status,
            dateStarted,
            dateFinished,
            status: .results.code
            }
        ' \
    | sed '
        /"dateStarted":/ {
            h
            s/\([[:space:]]*\)"dateStarted":[[:space:]]*\("[^"]*"\).*$/\1\2/
            x
            }
        /"dateFinished":/ {
            H
            x
            s/[[:space:]]*"dateFinished":[[:space:]]*\("[^"]*"\).*$/ \1/
            s/\([[:space:]]*\)\(.*\)/\1echo "\1\\"elapsedTime\\": \\"$(datediff --format "%H:%M:%S" --input-format "%b %d, %Y %H:%M:%S %p" \2)\\","/e
            x
            G
            }
        '

    # Skips rows if output is null ?

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FX82FMTH' \
    | jq '
        .body.paragraphs[] | {
            title,
            status,
            dateStarted,
            dateFinished,
            status: .results.code,
            output: (.results | select(.msg | length > 0) | .msg[] | select(.type == "TEXT"))
            }
        '

    >   {
    >     "title": "Select sources",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:25:36 PM",
    >     "dateFinished": "Feb 15, 2021 2:27:03 PM",
    >     "output": {
    >       "type": "TEXT",
    >       "data": "1724028"
    >     }
    >   }
    >   {
    >     "title": "Hertzsprung-Russell diagram",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:27:03 PM",
    >     "dateFinished": "Feb 15, 2021 2:30:44 PM",
    >     "output": {
    >       "type": "TEXT",
    >       "data": "<Figure size 648x648 with 1 Axes>\n"
    >     }
    >   }
    >   {
    >     "title": "Selecting training data",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:30:44 PM",
    >     "dateFinished": "Feb 15, 2021 2:37:18 PM",
    >     "output": {
    >       "type": "TEXT",
    >       "data": "Good training data size: 244740 rows\nBad  training data size: 244740 rows\n"
    >     }
    >   }

    #
    # Add a default value to the output.
    #

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FX82FMTH' \
    | jq '
        .body.paragraphs[] | {
            title,
            status,
            dateStarted,
            dateFinished,
            status: .results.code,
            output: ((.results | select(.msg | length > 0) | .msg[] | select(.type == "TEXT") ) // "-")
            }
        '

    >   {
    >     "title": "Introduction",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:25:31 PM",
    >     "dateFinished": "Feb 15, 2021 2:25:31 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Astrometric features ",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:25:31 PM",
    >     "dateFinished": "Feb 15, 2021 2:25:36 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Select sources",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:25:36 PM",
    >     "dateFinished": "Feb 15, 2021 2:27:03 PM",
    >     "output": {
    >       "type": "TEXT",
    >       "data": "1724028"
    >     }
    >   }
    >   {
    >     "title": "Hertzsprung-Russell diagram",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:27:03 PM",
    >     "dateFinished": "Feb 15, 2021 2:30:44 PM",
    >     "output": {
    >       "type": "TEXT",
    >       "data": "<Figure size 648x648 with 1 Axes>\n"
    >     }
    >   }
    >   {
    >     "title": null,
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:30:44 PM",
    >     "dateFinished": "Feb 15, 2021 2:30:44 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Selecting training data",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:30:44 PM",
    >     "dateFinished": "Feb 15, 2021 2:37:18 PM",
    >     "output": {
    >       "type": "TEXT",
    >       "data": "Good training data size: 244740 rows\nBad  training data size: 244740 rows\n"
    >     }
    >   }
    >   {
    >     "title": null,
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:37:19 PM",
    >     "dateFinished": "Feb 15, 2021 2:37:19 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Random forest training",
    >     "status": null,
    >     "dateStarted": "Feb 15, 2021 2:37:19 PM",
    >     "dateFinished": "Feb 15, 2021 2:16:12 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Random forest testing",
    >     "status": null,
    >     "dateStarted": "Feb 15, 2021 2:16:12 PM",
    >     "dateFinished": "Feb 15, 2021 2:16:12 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Misclassification fraction",
    >     "status": null,
    >     "dateStarted": "Feb 15, 2021 2:16:12 PM",
    >     "dateFinished": "Feb 15, 2021 2:16:41 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Feature importance",
    >     "status": null,
    >     "dateStarted": "Feb 15, 2021 2:16:42 PM",
    >     "dateFinished": "Feb 15, 2021 2:16:42 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Hertzsprung-Russell diagram",
    >     "status": null,
    >     "dateStarted": "Feb 15, 2021 2:16:42 PM",
    >     "dateFinished": "Feb 15, 2021 2:18:31 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Classification probabilities",
    >     "status": null,
    >     "dateStarted": "Feb 15, 2021 2:18:31 PM",
    >     "dateFinished": "Feb 15, 2021 2:19:29 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Good sources plot",
    >     "status": null,
    >     "dateStarted": "Feb 15, 2021 2:19:29 PM",
    >     "dateFinished": "Feb 15, 2021 2:20:24 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Bad sources plot",
    >     "status": null,
    >     "dateStarted": "Feb 15, 2021 2:20:25 PM",
    >     "dateFinished": "Feb 15, 2021 2:21:19 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Good/bad count",
    >     "status": null,
    >     "dateStarted": "Feb 15, 2021 2:21:20 PM",
    >     "dateFinished": "Feb 15, 2021 2:22:16 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Parallax over error distribution",
    >     "status": null,
    >     "dateStarted": "Feb 15, 2021 2:22:16 PM",
    >     "dateFinished": "Feb 15, 2021 2:22:26 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Null values check",
    >     "status": null,
    >     "dateStarted": "Feb 15, 2021 2:22:26 PM",
    >     "dateFinished": "Feb 15, 2021 2:23:13 PM",
    >     "output": "-"
    >   }
    >   {
    >     "title": null,
    >     "status": null,
    >     "dateStarted": null,
    >     "dateFinished": null,
    >     "output": "-"
    >   }

# -----------------------------------------------------
# Try it on the real notebook.
#[user@desktop]

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FX82FMTH' \
    | jq '
        .body.paragraphs[] | {
            title,
            status,
            dateStarted,
            dateFinished,
            status: .results.code,
            output: ((.results | select(.msg | length > 0) | .msg[] | select(.type == "TEXT") | .data | split("\n") | map(select(startswith("-")))) // "-")
            }
        ' \
    | sed '
        /"dateStarted":/ {
            h
            s/\([[:space:]]*\)"dateStarted":[[:space:]]*\("[^"]*"\).*$/\1\2/
            x
            }
        /"dateFinished":/ {
            H
            x
            s/[[:space:]]*"dateFinished":[[:space:]]*\("[^"]*"\).*$/ \1/
            s/\([[:space:]]*\)\(.*\)/\1echo "\1\\"elapsedTime\\": \\"$(datediff --format "%H:%M:%S" --input-format "%b %d, %Y %H:%M:%S %p" \2)\\","/e
            x
            G
            }
        '

    >   {
    >     "title": "Introduction",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:25:31 PM",
    >     "dateFinished": "Feb 15, 2021 2:25:31 PM",
    >     "elapsedTime": "0:0:0",
    >     "output": "-"
    >   }
    >   ....
    >   ....
    >   {
    >     "title": "Null values check",
    >     "status": null,
    >     "dateStarted": "Feb 15, 2021 2:22:26 PM",
    >     "dateFinished": "Feb 15, 2021 2:23:13 PM",
    >     "elapsedTime": "0:0:47",
    >     "output": "-"
    >   }
    >   {
    >     "title": null,
    >     "status": null,
    >     "dateStarted": null,
    >   ddiff: Error: reference DATE must be specified
    >
    >   sh: line 2: dateFinished:: command not found
    >     "dateFinished": null,
    >     "elapsedTime": "Usage: datediff [OPTION]... DATE/TIME [DATE/TIME]...


# -----------------------------------------------------
# Add a null value check for the dates.
#[user@desktop]

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FX82FMTH' \
    | jq '
        .body.paragraphs[] | {
            title,
            status,
            dateStarted,
            dateFinished,
            status: .results.code,
            output: ((.results | select(.msg | length > 0) | .msg[] | select(.type == "TEXT") | .data | split("\n") | map(select(startswith("-")))) // "-")
            }
        ' \
    | sed '
        /"dateStarted": null,/d
        /"dateStarted":/ {
            h
            s/\([[:space:]]*\)"dateStarted":[[:space:]]*\("[^"]*"\).*$/\1\2/
            x
            }
        /"dateFinished": null,/ d
        /"dateFinished":/ {
            H
            x
            s/[[:space:]]*"dateFinished":[[:space:]]*\("[^"]*"\).*$/ \1/
            s/\([[:space:]]*\)\(.*\)/\1echo "\1\\"elapsedTime\\": \\"$(datediff --format "%H:%M:%S" --input-format "%b %d, %Y %H:%M:%S %p" \2)\\","/e
            x
            G
            }
        '

    >   {
    >     "title": "Introduction",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:25:31 PM",
    >     "dateFinished": "Feb 15, 2021 2:25:31 PM",
    >     "elapsedTime": "0:0:0",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Astrometric features ",
    >     "status": "SUCCESS",
    >     "dateStarted": "Feb 15, 2021 2:25:31 PM",
    >     "dateFinished": "Feb 15, 2021 2:25:36 PM",
    >     "elapsedTime": "0:0:5",
    >     "output": "-"
    >   }
    >   ....
    >   ....
    >   {
    >     "title": "Null values check",
    >     "status": null,
    >     "dateStarted": "Feb 15, 2021 2:22:26 PM",
    >     "dateFinished": "Feb 15, 2021 2:23:13 PM",
    >     "elapsedTime": "0:0:47",
    >     "output": "-"
    >   }
    >   {
    >     "title": null,
    >     "status": null,
    >     "output": "-"
    >   }



# -----------------------------------------------------
# Skip cells with no result code.
#[user@desktop]

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FX82FMTH' \
    | jq '
        .body.paragraphs[] | select(.results.code != null) | {
            title,
            status,
            dateStarted,
            dateFinished,
            result: .results.code,
            output: ((.results | select(.msg | length > 0) | .msg[] | select(.type == "TEXT") | .data | split("\n") | map(select(startswith("-")))) // "-")
            }
        ' \
    | sed '
        /"dateStarted": null,/d
        /"dateStarted":/ {
            h
            s/\([[:space:]]*\)"dateStarted":[[:space:]]*\("[^"]*"\).*$/\1\2/
            x
            }
        /"dateFinished": null,/ d
        /"dateFinished":/ {
            H
            x
            s/[[:space:]]*"dateFinished":[[:space:]]*\("[^"]*"\).*$/ \1/
            s/\([[:space:]]*\)\(.*\)/\1echo "\1\\"elapsedTime\\": \\"$(datediff --format "%H:%M:%S" --input-format "%b %d, %Y %H:%M:%S %p" \2)\\","/e
            x
            G
            }
        '

    >   {
    >     "title": "Introduction",
    >     "status": "FINISHED",
    >     "dateStarted": "Feb 15, 2021 2:25:31 PM",
    >     "dateFinished": "Feb 15, 2021 2:25:31 PM",
    >     "elapsedTime": "0:0:0",
    >     "result": "SUCCESS",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Astrometric features ",
    >     "status": "FINISHED",
    >     "dateStarted": "Feb 15, 2021 2:25:31 PM",
    >     "dateFinished": "Feb 15, 2021 2:25:36 PM",
    >     "elapsedTime": "0:0:5",
    >     "result": "SUCCESS",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Select sources",
    >     "status": "FINISHED",
    >     "dateStarted": "Feb 15, 2021 2:25:36 PM",
    >     "dateFinished": "Feb 15, 2021 2:27:03 PM",
    >     "elapsedTime": "0:1:27",
    >     "result": "SUCCESS",
    >     "output": []
    >   }
    >   {
    >     "title": "Hertzsprung-Russell diagram",
    >     "status": "FINISHED",
    >     "dateStarted": "Feb 15, 2021 2:27:03 PM",
    >     "dateFinished": "Feb 15, 2021 2:30:44 PM",
    >     "elapsedTime": "0:3:41",
    >     "result": "SUCCESS",
    >     "output": []
    >   }
    >   {
    >     "title": null,
    >     "status": "FINISHED",
    >     "dateStarted": "Feb 15, 2021 2:30:44 PM",
    >     "dateFinished": "Feb 15, 2021 2:30:44 PM",
    >     "elapsedTime": "0:0:0",
    >     "result": "SUCCESS",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Selecting training data",
    >     "status": "FINISHED",
    >     "dateStarted": "Feb 15, 2021 2:30:44 PM",
    >     "dateFinished": "Feb 15, 2021 2:37:18 PM",
    >     "elapsedTime": "0:6:34",
    >     "result": "SUCCESS",
    >     "output": []
    >   }
    >   {
    >     "title": null,
    >     "status": "FINISHED",
    >     "dateStarted": "Feb 15, 2021 2:37:19 PM",
    >     "dateFinished": "Feb 15, 2021 2:37:19 PM",
    >     "elapsedTime": "0:0:0",
    >     "result": "SUCCESS",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Random forest training",
    >     "status": "FINISHED",
    >     "dateStarted": "Feb 15, 2021 2:37:19 PM",
    >     "dateFinished": "Feb 15, 2021 4:11:30 PM",
    >     "elapsedTime": "1:34:11",
    >     "result": "SUCCESS",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Random forest testing",
    >     "status": "FINISHED",
    >     "dateStarted": "Feb 15, 2021 4:11:30 PM",
    >     "dateFinished": "Feb 15, 2021 4:11:30 PM",
    >     "elapsedTime": "0:0:0",
    >     "result": "SUCCESS",
    >     "output": "-"
    >   }




# -----------------------------------------------------
# Swap sed and jq, don't include the start and end dates in the output.
#[user@desktop]

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/2FX82FMTH' \
    | jq '.' \
    | sed '
        /"dateStarted": null,/d
        /"dateStarted":/ {
            h
            s/\([[:space:]]*\)"dateStarted":[[:space:]]*\("[^"]*"\).*$/\1\2/
            x
            }
        /"dateFinished": null,/ d
        /"dateFinished":/ {
            H
            x
            s/[[:space:]]*"dateFinished":[[:space:]]*\("[^"]*"\).*$/ \1/
            s/\([[:space:]]*\)\(.*\)/\1echo "\1\\"elapsedTime\\": \\"$(datediff --format "%H:%M:%S" --input-format "%b %d, %Y %H:%M:%S %p" \2)\\","/e
            x
            G
            }
        ' \
    | jq '
        .body.paragraphs[] | select(.results.code != null) | {
            title,
            result: .results.code,
            time:   .elapsedTime,
            output: ((.results | select(.msg | length > 0) | .msg[] | select(.type == "TEXT") | .data | split("\n") | map(select(startswith("-")))) // "-")
            }
        '


    >   {
    >     "title": "Introduction",
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Astrometric features ",
    >     "result": "SUCCESS",
    >     "time": "0:0:5",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Select sources",
    >     "result": "SUCCESS",
    >     "time": "0:1:27",
    >     "output": []
    >   }
    >   {
    >     "title": "Hertzsprung-Russell diagram",
    >     "result": "SUCCESS",
    >     "time": "0:3:41",
    >     "output": []
    >   }
    >   {
    >     "title": null,
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Selecting training data",
    >     "result": "SUCCESS",
    >     "time": "0:6:34",
    >     "output": []
    >   }
    >   {
    >     "title": null,
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Random forest training",
    >     "result": "SUCCESS",
    >     "time": "1:34:11",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Random forest testing",
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Misclassification fraction",
    >     "result": "SUCCESS",
    >     "time": "0:17:40",
    >     "output": [
    >       "------------------------------"
    >     ]
    >   }
    >   {
    >     "title": "Feature importance",
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": []
    >   }

