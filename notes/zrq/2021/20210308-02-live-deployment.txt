#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


    Target:

        Deploy a larger than normal configuration to the live server.

    Results:

        Work in progress ...


# -----------------------------------------------------
# Checkout a specific version.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        git checkout '20210308-live-deployment'

    popd


# -----------------------------------------------------
# Increase the number of worker nodes.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        gedit deployments/hadoop-yarn/ansible/hosts.yml

                 workers:
                     hosts:
        -                worker[01:04]:
        +                worker[01:08]:


    popd


# -----------------------------------------------------
# Create a container to work with - explicitly set the cloud name.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    AGLAIS_CLOUD=gaia-prod

    podman run \
        --rm \
        --tty \
        --interactive \
        --name ansibler \
        --hostname ansibler \
        --env "SSH_AUTH_SOCK=/mnt/ssh_auth_sock" \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw,z" \
        --env "cloudname=${AGLAIS_CLOUD:?}" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE:?}/deployments:/deployments:ro,z" \
        atolmis/ansible-client:2020.12.02 \
        bash


# -----------------------------------------------------
# Delete everything ....
#[root@ansibler]

    time \
        /deployments/openstack/bin/delete-all.sh \
            'gaia-dev'

    >   real    3m32.071s
    >   user    1m14.020s
    >   sys     0m10.751s


    time \
        /deployments/openstack/bin/delete-all.sh \
            'gaia-test'

    >   real    1m28.767s
    >   user    0m33.556s
    >   sys     0m4.843s


    time \
        /deployments/openstack/bin/delete-all.sh \
            'gaia-prod'

    >   real    2m48.190s
    >   user    1m1.928s
    >   sys     0m8.552s


# -----------------------------------------------------
# Create everything ....
#[root@ansibler]

    time \
        /deployments/hadoop-yarn/bin/create-all.sh \
            "${cloudname:?}"

    >   real	44m12.086s
    >   user	10m45.203s
    >   sys	3m35.964s


# -----------------------------------------------------
# Add the Zeppelin user accounts.
#[root@ansibler]

    ssh zeppelin

        pushd zeppelin-0.8.2-bin-all/
            pushd conf/

                # Manual edit to add names and passwords
                vi shiro.ini

                    ....
                    ....
            popd

            # Restart Zeppelin for the changes to take.
            ./bin/zeppelin-daemon.sh restart

        popd


# -----------------------------------------------------
# Add the ssh login accounts.
#[root@ansibler]

    pushd "deployments/hadoop-yarn/ansible"

        ansible-playbook \
            --inventory "hosts.yml" \
            "60-user-logins.yml"

    popd


# -----------------------------------------------------
# Get the public IP address of our Zeppelin node.
#[root@ansibler]

    deployname=$(
        yq read \
            '/tmp/aglais-status.yml' \
                'aglais.status.deployment.name'
        )

    zeppelinid=$(
        openstack \
            --os-cloud "${cloudname:?}" \
            server list \
                --format json \
        | jq -r '.[] | select(.Name == "'${deployname:?}'-zeppelin") | .ID'
        )

    zeppelinip=$(
        openstack \
            --os-cloud "${cloudname:?}" \
            server show \
                --format json \
                "${zeppelinid:?}" \
        | jq -r '.addresses' \
        | sed '
            s/[[:space:]]//
            s/.*=\(.*\)/\1/
            s/.*,\(.*\)/\1/
            '
        )

    yq write \
        --inplace \
        '/tmp/aglais-status.yml' \
            'aglais.status.zeppelin.hostname' \
            "zeppelin.${cloudname:?}.aglais.uk"

    yq write \
        --inplace \
        '/tmp/aglais-status.yml' \
            'aglais.status.zeppelin.publicipv4' \
            "${zeppelinip}"


cat << EOF
Zeppelin ID [${zeppelinid:?}]
Zeppelin IP [${zeppelinip:?}]
EOF

    >   Zeppelin ID [ae610da8-f837-4828-9f9b-8611b02a7a4d]
    >   Zeppelin IP [128.232.227.220]


# -----------------------------------------------------
# Update our DNS entries.
#[root@ansibler]

    ssh root@infra-ops.aglais.uk

        vi /var/aglais/dnsmasq/hosts/gaia-prod.hosts

        ~   128.232.227.220  zeppelin.gaia-prod.aglais.uk


        podman kill --signal SIGHUP dnsmasq

        podman logs dnsmasq | tail

    >   dnsmasq[1]: cleared cache
    >   dnsmasq[1]: read /etc/dnsmasq/hosts/gaia-prod.hosts - 1 addresses
    >   dnsmasq[1]: read /etc/dnsmasq/hosts/gaia-test.hosts - 0 addresses
    >   dnsmasq[1]: read /etc/dnsmasq/hosts/gaia-dev.hosts - 1 addresses


# -----------------------------------------------------
# Check our DNS entries.
#[root@ansibler]

    sudo dnf install -y bind-utils

    dig '@infra-ops.aglais.uk' "zeppelin.${cloudname:?}.aglais.uk"

    >   ;; ANSWER SECTION:
    >   zeppelin.gaia-prod.aglais.uk. 300 IN	A	128.232.227.220
    >   
    >   ;; AUTHORITY SECTION:
    >   gaia-prod.aglais.uk.	300	IN	NS	infra-ops.aglais.uk.


# -----------------------------------------------------
# -----------------------------------------------------
# Login via Firefox
#[user@desktop]

    firefox --new-window 'http://zeppelin.aglais.uk:8080/' &

# -----------------------------------------------------
# Run a test notebook ..
#[user@zeppelin]

    Good astrometric solutions via ML Random Forrest classifier
    https://raw.githubusercontent.com/wfau/aglais-notebooks/main/2FRPC4BFS/note.json



# -----------------------------------------------------
# Check the notebook timing .
#[root@ansibler]

    gaiauser=....
    gaiapass=....

    zeppelinurl=http://zeppelin.aglais.uk:8080
    notebookid=2G15QWAHZ

    timingdir=/tmp/aglais/timing
    timingfile=${timingdir:?}/aglais-notebookid-$(date '+%Y%m%dT%H%M%S').json

    mkdir -p "${timingdir:?}"
    rm -f "${timingfile:?}"


    dnf install -y dateutils


    curl \
        --request 'POST' \
        --cookie-jar "${timingdir:?}/cookies" \
        --data "userName=${gaiauser:?}" \
        --data "password=${gaiapass:?}" \
        "${zeppelinurl:?}/api/login"


    >   {"status":"OK","message":"","body":{"principal":"zrq","ticket":"f8a0daf0-fcd3-4f3a-8cb5-ef6c338a1ad5","roles":"[\"user\"]"}}[root@ansibler ansible]#

    curl \
        --silent \
        --cookie "${timingdir:?}/cookies" \
        "${zeppelinurl:?}/api/notebook/${notebookid}" \
    | jq '.' \
    > "${timingfile:?}"


    sed '
        /"dateStarted": null,/d
        /"dateStarted":/ {
            h
            s/\([[:space:]]*\)"dateStarted":[[:space:]]*\("[^"]*"\).*$/\1\2/
            x
            }
        /"dateFinished": null,/ d
        /"dateFinished":/ {
            H
            x
            s/[[:space:]]*"dateFinished":[[:space:]]*\("[^"]*"\).*$/ \1/
            s/\([[:space:]]*\)\(.*\)/\1echo "\1\\"elapsedTime\\": \\"$(datediff --format "%H:%M:%S" --input-format "%b %d, %Y %H:%M:%S %p" \2)\\","/e
            x
            G
            }
        ' \
    "${timingfile:?}" \
    | jq '
        .body.paragraphs[] | select(.results.code != null) | {
            title,
            result: .results.code,
            time:   .elapsedTime,
            output: ((.results | select(.msg | length > 0) | .msg[] | select(.type == "TEXT") | .data | split("\n") | map(select(startswith("-")))) // "-")
            }
        ' \


    #
    # Quick filter enabled
    # 500 trees
    #

    >   {
    >     "title": "MD intro",
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Feature select",
    >     "result": "SUCCESS",
    >     "time": "0:0:48",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Raw sources",
    >     "result": "SUCCESS",
    >     "time": "0:7:33",
    >     "output": []
    >   }
    >   {
    >     "title": "Hertzsprung-Russell diagram",
    >     "result": "SUCCESS",
    >     "time": "0:0:6",
    >     "output": []
    >   }
    >   {
    >     "title": "MD text",
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Select good/bad training data",
    >     "result": "SUCCESS",
    >     "time": "0:0:7",
    >     "output": []
    >   }
    >   {
    >     "title": "Transform training data",
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Train classifier",
    >     "result": "SUCCESS",
    >     "time": "0:6:12",
    >   
    >     "output": "-"
    >   }
    >   {
    >     "title": "Apply model",
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Misclassified fraction",
    >     "result": "SUCCESS",
    >     "time": "0:0:11",
    >     "output": [
    >       "------------------------------"
    >     ]
    >   }
    >   {
    >     "title": null,
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": []
    >   }
    >   {
    >     "title": null,
    >     "result": "SUCCESS",
    >     "time": "0:0:30",
    >     "output": []
    >   }
    >   {
    >     "title": "Probability histogram",
    >     "result": "SUCCESS",
    >     "time": "0:0:10",
    >     "output": []
    >   }
    >   {
    >     "title": "Good sources sky plot",
    >     "result": "SUCCESS",
    >     "time": "0:0:14",
    >     "output": []
    >   }
    >   {
    >     "title": "Bad sources sky plot",
    >     "result": "SUCCESS",
    >     "time": "0:0:15",
    >     "output": []
    >   }
    >   {
    >     "title": "Good/bad count",
    >     "result": "SUCCESS",
    >     "time": "0:0:16",
    >     "output": []
    >   }
    >   {
    >     "title": "Parallax over error plot",
    >     "result": "SUCCESS",
    >     "time": "0:0:5",
    >     "output": []
    >   }
    >   {
    >     "title": "Null features count",
    >     "result": "SUCCESS",
    >     "time": "0:0:27",
    >     "output": []
    >   }


    #
    # Full dataset
    # 5000 trees
    #


    >   {
    >     "title": "MD intro",
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Feature select",
    >     "result": "SUCCESS",
    >     "time": "0:0:6",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Raw sources",
    >     "result": "SUCCESS",
    >     "time": "0:0:46",
    >     "output": []
    >   }
    >   {
    >     "title": "Hertzsprung-Russell diagram",
    >     "result": "SUCCESS",
    >     "time": "0:2:31",
    >     "output": []
    >   }
    >   {
    >     "title": "MD text",
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Good/bad training data",
    >     "result": "SUCCESS",
    >     "time": "0:3:54",
    >     "output": []
    >   }
    >   {
    >     "title": "Training transform",
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": "-"
    >   }
    >   {
    >     "title": "RandomForestClassifier",
    >     "result": "SUCCESS",
    >     "time": "1:22:16",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Apply model",
    >     "result": "SUCCESS",
    >     "time": "0:0:0",
    >     "output": "-"
    >   }
    >   {
    >     "title": "Misclassified fraction",
    >     "result": "SUCCESS",
    >     "time": "0:13:15",
    >     "output": [
    >       "------------------------------"
    >     ]
    >   }
    >   {
    >     "title": null,
    >     "result": "SUCCESS",
    >     "time": "0:0:1",
    >     "output": []
    >   }
    >   {
    >     "title": null,
    >     "result": "SUCCESS",
    >     "time": "0:36:36",
    >     "output": []
    >   }
    >   {
    >     "title": "Probability histogram",
    >     "result": "SUCCESS",
    >     "time": "0:9:28",
    >     "output": []
    >   }
    >   {
    >     "title": "Good sources sky plot",
    >     "result": "SUCCESS",
    >     "time": "0:18:1",
    >     "output": []
    >   }
    >   {
    >     "title": "Bad sources sky plot",
    >     "result": "SUCCESS",
    >     "time": "0:18:3",
    >     "output": []
    >   }
    >   {
    >     "title": "Good/bad count",
    >     "result": "SUCCESS",
    >     "time": "0:18:33",
    >     "output": []
    >   }
    >   {
    >     "title": "Parallax over error plot",
    >     "result": "SUCCESS",
    >     "time": "0:10:31",
    >     "output": []
    >   }
    >   {
    >     "title": "Null features count ",
    >     "result": "SUCCESS",
    >     "time": "0:6:46",
    >     "output": []
    >   }

