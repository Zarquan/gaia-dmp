#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2022, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Automate creating ceph shares.

    Result:

        Work in progress ...

        testnames=(
            Hamar
            Carclop
            Halda
            Jaden
            Mavaca
            Franilley
            Masonania
            Webbbron
            Granwaler
            )

# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name ansibler \
        --hostname ansibler \
        --publish 3000:3000 \
        --env "SSH_AUTH_SOCK=/mnt/ssh_auth_sock" \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw,z" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE:?}/deployments:/deployments:ro,z" \
        ghcr.io/wfau/atolmis/ansible-client:2022.03.19 \
        bash


# -----------------------------------------------------
# Set the target configuration.
#[root@ansibler]

    cloudbase=arcus
    cloudname=iris-gaia-red
    configname=zeppelin-26.43-spark-3.26.43


# -----------------------------------------------------
# Deploy everything.
#[root@ansibler]

    time \
        source /deployments/hadoop-yarn/bin/deploy.sh

    >   ....
    >   ....


# -----------------------------------------------------
# Create some test users.
#[root@ansibler]

    source /deployments/zeppelin/bin/create-user-tools.sh

    testnames=(
        Hamar
        Carclop
        )

    createarrayusers \
        "${testnames[@]}" \
    | tee /tmp/testusers.json \
    | jq '.'

    >   {
    >     "users": [
    >       {
    >         "linuxuser": {
    >           "name": "Hamar",
    >           "type": "test",
    >           "linuxuid": "20001",
    >           "debug": {
    >             "script": "create-linux-user.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: adduser [Hamar] done",
    >               "PASS: mkdir [/home/Hamar/.ssh] done",
    >               "PASS: adding public key for [zepelin] done",
    >               "SKIP: adding public key for [Hamar] skipped (no key)"
    >             ]
    >           }
    >         },
    >         "shirouser": {
    >           "name": "Hamar",
    >           "type": "test",
    >           "role": "user",
    >           "password": "nongoe1ieChezoPh5voh",
    >           "passhash": "$shiro1$SHA-256$500000$+edR4a++Ht+1fT0FcPv0RQ==$Wa9yygstbwP7v2GNJs/pdd5twjyJkjlifcPm8b20rrI=",
    >           "debug": {
    >             "script": "create-shiro-user.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: passgen done",
    >               "PASS: hashpass done",
    >               "PASS: database INSERT done"
    >             ]
    >           }
    >         },
    >         "hdfsspace": {
    >           "path": "/albert/Hamar",
    >           "owner": "Hamar",
    >           "group": "supergroup",
    >           "debug": {
    >             "script": "create-hdfs-space.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: hdfs mkdir [/albert/Hamar] done",
    >               "PASS: hdfs chown [/albert/Hamar] done"
    >             ]
    >           }
    >         },
    >         "notebooks": {
    >           "user": "Hamar",
    >           "debug": {
    >             "script": "clone-notebooks.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "SKIP: Notebooks skipped - null password"
    >             ]
    >           }
    >         }
    >       },
    >       {
    >         "linuxuser": {
    >           "name": "Carclop",
    >           "type": "test",
    >           "linuxuid": "20002",
    >           "debug": {
    >             "script": "create-linux-user.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: adduser [Carclop] done",
    >               "PASS: mkdir [/home/Carclop/.ssh] done",
    >               "PASS: adding public key for [zepelin] done",
    >               "SKIP: adding public key for [Carclop] skipped (no key)"
    >             ]
    >           }
    >         },
    >         "shirouser": {
    >           "name": "Carclop",
    >           "type": "test",
    >           "role": "user",
    >           "password": "Eepheeb3iezoorohph3g",
    >           "passhash": "$shiro1$SHA-256$500000$cSSLEivWu8xq/WAZQJPfkw==$0JSvRrWCjNfhL7TYRp4jib9N2ZdB6FPHhYfPBXHVcpk=",
    >           "debug": {
    >             "script": "create-shiro-user.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: passgen done",
    >               "PASS: hashpass done",
    >               "PASS: database INSERT done"
    >             ]
    >           }
    >         },
    >         "hdfsspace": {
    >           "path": "/albert/Carclop",
    >           "owner": "Carclop",
    >           "group": "supergroup",
    >           "debug": {
    >             "script": "create-hdfs-space.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: hdfs mkdir [/albert/Carclop] done",
    >               "PASS: hdfs chown [/albert/Carclop] done"
    >             ]
    >           }
    >         },
    >         "notebooks": {
    >           "user": "Carclop",
    >           "debug": {
    >             "script": "clone-notebooks.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "SKIP: Notebooks skipped - null password"
    >             ]
    >           }
    >         }
    >       }
    >     ]
    >   }

    #
    # Fail - create-shiro created a new password, but it didn't get passed to clone-notebooks
    # bugfix ....
    # Try againa
    #

    source /deployments/zeppelin/bin/create-user-tools.sh

    testnames=(
        Halda
        Jaden
        )

    createarrayusers \
        "${testnames[@]}" \
    | tee /tmp/testusers.json \
    | jq '.'

    >   {
    >     "users": [
    >       {
    >         "linuxuser": {
    >           "name": "Halda",
    >           "type": "test",
    >           "linuxuid": "20003",
    >           "debug": {
    >             "script": "create-linux-user.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: adduser [Halda] done",
    >               "PASS: mkdir [/home/Halda/.ssh] done",
    >               "PASS: adding public key for [zepelin] done",
    >               "SKIP: adding public key for [Halda] skipped (no key)"
    >             ]
    >           }
    >         },
    >         "hdfsspace": {
    >           "path": "/albert/Halda",
    >           "owner": "Halda",
    >           "group": "supergroup",
    >           "debug": {
    >             "script": "create-hdfs-space.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: hdfs mkdir [/albert/Halda] done",
    >               "PASS: hdfs chown [/albert/Halda] done"
    >             ]
    >           }
    >         },
    >         "shirouser": {
    >           "name": "Halda",
    >           "type": "test",
    >           "role": "user",
    >           "password": "iepheeneex3aapaih2oC",
    >           "passhash": "$shiro1$SHA-256$500000$kqula/PkGA/KkeYoKKhyxw==$zglkEyvSk7Gx3/fPGiGUJnNKWoWgguMRLsbOALsZQ6A=",
    >           "debug": {
    >             "script": "create-shiro-user.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: passgen done",
    >               "PASS: hashpass done",
    >               "PASS: database INSERT done"
    >             ]
    >           }
    >         },
    >         "notebooks": {
    >           "user": "Halda",
    >           "debug": {
    >             "script": "clone-notebooks.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: Login [Halda] done",
    >               "PASS: Clone done [2GRTQZFUM][/Users/Halda/examples/1. Start here]",
    >               "PASS: Clone done [2GRA39HCN][/Users/Halda/examples/2. Data holdings]",
    >               "PASS: Clone done [2GQ6WMH9W][/Users/Halda/examples/3. Source counts over the sky]",
    >               "PASS: Clone done [2GSNYBDWB][/Users/Halda/examples/4. Mean proper motions over the sky]",
    >               "PASS: Clone done [2H2YRJCKM][/Users/Halda/examples/5. Working with Gaia XP spectra]",
    >               "PASS: Clone done [2GZME59KY][/Users/Halda/examples/6. Working with cross-matched surveys]",
    >               "PASS: Clone done [2GQDKZ59J][/Users/Halda/examples/7. Good astrometric solutions via ML Random Forrest classifier]",
    >               "PASS: Clone done [2GVXKC266][/Users/Halda/examples/8. Tips and tricks]"
    >             ]
    >           }
    >         }
    >       },
    >       {
    >         "linuxuser": {
    >           "name": "Jaden",
    >           "type": "test",
    >           "linuxuid": "20004",
    >           "debug": {
    >             "script": "create-linux-user.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: adduser [Jaden] done",
    >               "PASS: mkdir [/home/Jaden/.ssh] done",
    >               "PASS: adding public key for [zepelin] done",
    >               "SKIP: adding public key for [Jaden] skipped (no key)"
    >             ]
    >           }
    >         },
    >         "hdfsspace": {
    >           "path": "/albert/Jaden",
    >           "owner": "Jaden",
    >           "group": "supergroup",
    >           "debug": {
    >             "script": "create-hdfs-space.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: hdfs mkdir [/albert/Jaden] done",
    >               "PASS: hdfs chown [/albert/Jaden] done"
    >             ]
    >           }
    >         },
    >         "shirouser": {
    >           "name": "Jaden",
    >           "type": "test",
    >           "role": "user",
    >           "password": "oev4Fuu8ouxahpie7Sho",
    >           "passhash": "$shiro1$SHA-256$500000$CP2kSSjVuXLLZUTgRxHobA==$J7B59jBA1xs4nW59cgAAfkKzvr7TVVg33xEYVNFucGQ=",
    >           "debug": {
    >             "script": "create-shiro-user.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: passgen done",
    >               "PASS: hashpass done",
    >               "PASS: database INSERT done"
    >             ]
    >           }
    >         },
    >         "notebooks": {
    >           "user": "Jaden",
    >           "debug": {
    >             "script": "clone-notebooks.sh",
    >             "result": "PASS",
    >             "messages": [
    >               "PASS: Login [Jaden] done",
    >               "PASS: Clone done [2GRTQZFUM][/Users/Jaden/examples/1. Start here]",
    >               "PASS: Clone done [2GRA39HCN][/Users/Jaden/examples/2. Data holdings]",
    >               "PASS: Clone done [2GQ6WMH9W][/Users/Jaden/examples/3. Source counts over the sky]",
    >               "PASS: Clone done [2GSNYBDWB][/Users/Jaden/examples/4. Mean proper motions over the sky]",
    >               "PASS: Clone done [2H2YRJCKM][/Users/Jaden/examples/5. Working with Gaia XP spectra]",
    >               "PASS: Clone done [2GZME59KY][/Users/Jaden/examples/6. Working with cross-matched surveys]",
    >               "PASS: Clone done [2GQDKZ59J][/Users/Jaden/examples/7. Good astrometric solutions via ML Random Forrest classifier]",
    >               "PASS: Clone done [2GVXKC266][/Users/Jaden/examples/8. Tips and tricks]"
    >             ]
    >           }
    >         }
    >       }
    >     ]
    >   }


# -----------------------------------------------------
# Experiment with create-share fragments ...
#[root@ansibler]

    # Set the Manila API version.
    # https://stackoverflow.com/a/58806536
    export OS_SHARE_API_VERSION=2.46

    sharecloud=iris-gaia-data

    openstack \
        --os-cloud "${sharecloud:?}" \
        share list

    >   +--------------------------------------+-----------------------------+-------+-------------+-----------+-----------+-----------------+------+-------------------+
    >   | ID                                   | Name                        |  Size | Share Proto | Status    | Is Public | Share Type Name | Host | Availability Zone |
    >   +--------------------------------------+-----------------------------+-------+-------------+-----------+-----------+-----------------+------+-------------------+
    >   | 1e1ed68a-e5fe-47a3-a663-7096231a9324 | aglais-data-gaia-dr2-6514   |   512 | CEPHFS      | available | True      | ceph01_cephfs   |      | nova              |
    >   | 5b1ff330-22f6-4bc7-bc03-529a55726c72 | aglais-data-gaia-edr3-11932 |   540 | CEPHFS      | available | True      | ceph01_cephfs   |      | nova              |
    >   | 298ad303-9d81-4540-b4f0-d099ade46be2 | aglais-data-gaia-edr3-2048  |  1024 | CEPHFS      | available | True      | ceph01_cephfs   |      | nova              |
    >   | 8ff99245-70fe-4c44-9c61-4979c10e7d06 | aglais-data-gaia-edr3-4096  |  1024 | CEPHFS      | available | True      | ceph01_cephfs   |      | nova              |
    >   | 2ec7b3d6-8d70-44a0-9424-9d869f18c0f0 | aglais-data-gaia-edr3-8192  |  1024 | CEPHFS      | available | True      | ceph01_cephfs   |      | nova              |
    >   | d07a403d-12aa-4b72-9a2e-9136d29721fb | aglais-data-panstarrs-ps1   |   300 | CEPHFS      | available | True      | ceph01_cephfs   |      | nova              |
    >   | 9faa8e39-ba47-474f-8abd-d6303fb9436e | aglais-data-twomass-allsky  |    40 | CEPHFS      | available | True      | ceph01_cephfs   |      | nova              |
    >   | 417fb77f-5659-46e3-a074-7c1d7c18a0fe | aglais-data-wise-allwise    |   350 | CEPHFS      | available | True      | ceph01_cephfs   |      | nova              |
    >   | 79574044-f43f-4992-b953-365fabd4b142 | aglais-tools                |  1024 | CEPHFS      | available | True      | ceph01_cephfs   |      | nova              |
    >   | e3ad95b3-6d7e-484b-8cbc-2e3e521683bf | aglais-user-dcr             |  1024 | CEPHFS      | available | True      | ceph01_cephfs   |      | nova              |
    >   | 2f6ef970-27d1-47a1-b7a5-3ac7a9027f21 | aglais-user-nch             | 50000 | CEPHFS      | available | True      | ceph01_cephfs   |      | nova              |
    >   | e4a87621-2e57-4a38-a7fb-283d0731572e | aglais-user-stv             |  1024 | CEPHFS      | available | True      | ceph01_cephfs   |      | nova              |
    >   | 493b34ad-cbec-42ca-9308-36bc09b79528 | aglais-user-zrq             |  1025 | CEPHFS      | available | True      | ceph01_cephfs   |      | nova              |
    >   +--------------------------------------+-----------------------------+-------+-------------+-----------+-----------+-----------------+------+-------------------+

    sharename=aglais-user-zrq
    sharejson=$(mktemp)

    openstack \
        --os-cloud "${sharecloud:?}" \
        share show \
            --format json \
            "${sharename:?}" \
    | tee "${sharejson:?}" \
    | jq '.'

    >   {
    >     "access_rules_status": "active",
    >     "availability_zone": "nova",
    >     "create_share_from_snapshot_support": false,
    >     "created_at": "2022-01-03T13:19:35.000000",
    >     "description": "",
    >     "export_locations": "\npath = 10.4.200.9:6789,10.4.200.13:6789,10.4.200.17:6789:/volumes/_nogroup/0471daf5-5ba4-4fda-8b7c-2bfc7ebb4eff\nid = aa3b4da1-582a-447b-92d5-04d87ec89a69\npreferred = False",
    >     "has_replicas": false,
    >     "id": "493b34ad-cbec-42ca-9308-36bc09b79528",
    >     "is_public": true,
    >     "mount_snapshot_support": false,
    >     "name": "aglais-user-zrq",
    >     "project_id": "e216e6b502134b6185380be6ccd0bf09",
    >     "properties": {},
    >     "replication_type": null,
    >     "revert_to_snapshot_support": false,
    >     "share_group_id": null,
    >     "share_network_id": null,
    >     "share_proto": "CEPHFS",
    >     "share_type": "12668f5c-44e4-4b63-abf1-c56002ccc424",
    >     "share_type_name": "ceph01_cephfs",
    >     "size": 1025,
    >     "snapshot_id": null,
    >     "snapshot_support": false,
    >     "source_share_group_snapshot_member_id": null,
    >     "status": "available",
    >     "task_state": null,
    >     "user_id": "5fa0c97a6dd14e01a3c7d91dad5c6b17",
    >     "volume_type": "ceph01_cephfs"
    >   }

    sharejson=$(mktemp)
    errorfile=$(mktemp)

    sharename=unknown
    sharename=aglais-user-zrq

    openstack \
        --os-cloud "${sharecloud:?}" \
        share show \
            --format json \
            "${sharename:?}" \
        1> "${sharejson:?}" \
        2> "${errorfile:?}"
        retcode=$?

    if [ ${retcode} -eq 0 ]
    then
        shareuuid=$(
            jq -r '.id' "${sharejson}"
            )
        echo "Share found [${sharename}][${shareuuid}]"
    else
        echo "Share not found [${sharename}]"
    fi

    >   Share not found [unknown]

    >   Share found [aglais-user-zrq][493b34ad-cbec-42ca-9308-36bc09b79528]


# -----------------------------------------------------
# Experiment with create-share on our project cloud
#[root@ansibler]

    # Set the Manila API version.
    # https://stackoverflow.com/a/58806536
    export OS_SHARE_API_VERSION=2.51

    sharetype=ceph01_cephfs
    sharezone=nova
    shareprotocol=CEPHFS
    shareaccesstype=cephx

    sharecloud=${cloudname:?}
    sharename=test-$(pwgen 8 1)
    sharesize=5

    sharejson=$(mktemp)
    errorfile=$(mktemp)
    accessjson=$(mktemp)

    openstack \
        --os-cloud "${sharecloud:?}" \
        share show \
            --format json \
            "${sharename:?}" \
        1> "${sharejson:?}" \
        2> "${errorfile:?}"
        retcode=$?

    if [ ${retcode} -eq 0 ]
    then
        shareuuid=$(
            jq -r '.id' "${sharejson}"
            )
        echo "PASS : Share [${sharename}] selected [${shareuuid}]"

    elif [ ${retcode} -eq 1 ]
    then

        openstack \
            --os-cloud "${sharecloud:?}" \
            share create \
                --format json \
                --name "${sharename:?}" \
                --share-type "${sharetype:?}" \
                --availability-zone "${sharezone:?}" \
                "${shareprotocol:?}" \
                "${sharesize:?}" \
            1> "${sharejson:?}" \
            2> "${errorfile:?}"
            retcode=$?

        if [ ${retcode} -ne 0 ]
        then
            echo "FAIL : failed to create share [${sharename}], return code [${retcode}]"
            echo "---- ----"
            cat "${errorfile}"
            echo "---- ----"
        else
            shareuuid=$(
                jq -r '.id' "${sharejson}"
                )
            sharestatus=$(
                jq -r '.status' "${sharejson}"
                )
            echo "PASS : Share [${sharename}] created [${shareuuid}][${}]"

            while [ "${sharestatus}" == 'creating' ]
            do
                openstack \
                    --os-cloud "${sharecloud:?}" \
                    share show \
                        --format json \
                        "${shareuuid:?}" \
                    1> "${sharejson:?}" \
                    2> "${errorfile:?}"
                    retcode=$?

                if [ ${retcode} -eq 0 ]
                then
                    sharestatus=$(
                        jq -r '.status' "${sharejson}"
                        )
                    echo "PASS : Share [${sharename}] status [${shareuuid}][${sharestatus}]"
                else
                    sharestatus="error"
                    echo "FAIL : Failed to check share [${sharename}] status, return code [${retcode}]"
                    echo "---- ----"
                    cat "${errorfile}"
                    echo "---- ----"
                fi
            done

            if [ "${sharestatus}" != "good" ]
            then
                echo "FAIL : Failed to create share [${sharename}], share status [${sharestatus}]"
            else
                openstack \
                    --os-cloud "${sharecloud:?}" \
                    share access create \
                        --format json \
                        --access-level 'ro' \
                        "${shareuuid:?}" \
                        "${shareaccesstype:?}" \
                        "${sharename:?}-ro" \
                    1> "${accessjson:?}" \
                    2> "${errorfile:?}"
                    retcode=$?

                if [ ${retcode} -eq 0 ]
                then
                    echo "PASS : [ro] access created"
                else
                    echo "FAIL : Failed to create [ro] access to [${sharename}]"
                    echo "---- ----"
                    cat "${errorfile}"
                    echo "---- ----"
                fi

                openstack \
                    --os-cloud "${sharecloud:?}" \
                    share access create \
                        --format json \
                        --access-level 'rw' \
                        "${shareuuid:?}" \
                        "${shareaccesstype:?}" \
                        "${sharename:?}-rw" \
                    1> "${accessjson:?}" \
                    2> "${errorfile:?}"
                    retcode=$?

                if [ ${retcode} -eq 0 ]
                then
                    echo "PASS : [rw] access created"
                else
                    echo "FAIL : Failed to create [rw] access to [${sharename}]"
                    echo "---- ----"
                    cat "${errorfile}"
                    echo "---- ----"
                fi
            fi
        fi

    else
        echo "FAIL : failed to select share [${sharename}], code [${retcode}]"
        echo "---- ----"
        cat "${errorfile}"
        echo "---- ----"
    fi


    #
    # Our code looks good, but all the shares we create have status ERROR.
    # So do we need to check for this too ..
    #

    #
    # Try creating a share in data project ..
    sharecloud=iris-gaia-data

    #
    # Same result through the Horizon GUI.
    # Logged an issue with Cambridge.
    # https://github.com/wfau/aglais/issues/853

        Arcus cloud - unable to create CephFS shares via the Manila API or via the Horizon GUI.
        Share object is created but the status always reverts to error, with no further details.

    #
    # Cambridge Jira ticket HPCSSUP-46669
    # https://jira.hpc.cam.ac.uk/servicedesk/customer/portal/2/HPCSSUP-46669

        D.Morris - Tuesday 18:35
        Arcus cloud - unable to create CephFS shares via the Manila API or via the Horizon GUI.
        Share object is created but the status always reverts to error, with no details.

        Paul Browne Tuesday 23:11
        I can replicate in a staging environment, this has come about because of an unintentional update
        to the Manila containers backing image, which was required to be pinned to a specific release to
        maintain compatibility with the Ceph cluster behind Manila. Working on a fix for this now.



