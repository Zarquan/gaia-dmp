#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Deploy went through as normal, but example notebooks for test users fail.
        Almost all the notebook fail with what looks like low level Python library issues.

    Result:

        Work in progress ...

# -----------------------------------------------------

1. Start here

    No problems

# -----------------------------------------------------

2. Data holdings

    No problems

# -----------------------------------------------------

3. Source counts over the sky

    >   Fail to execute line 21: hp.mollview(array_data, fig=1, nest=True, coord='CG', unit = 'Star counts per HEALPixel', title='Gaia DR3 source counts at HEALPix level %d'%(healpix_level), cmap='viridis', norm = 'log')
    >   Traceback (most recent call last):
    >     File "/usr/local/lib64/python3.11/site-packages/healpy/visufunc.py", line 275, in mollview
    >       b = im.norm.inverse(np.linspace(0, 1, im.cmap.N + 1))
    >           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/healpy/projaxes.py", line 1195, in inverse
    >       return vmin * np.ma.power((vmax / vmin), val)
    >                                  ~~~~~^~~~~~
    >   ZeroDivisionError: float division by zero


# -----------------------------------------------------

4. Mean proper motions over the sky

    >   Fail to execute line 17: hp.mollview(array_data, fig = 1, coord='C', unit='mas/yr', nest=True, title='Mean RA proper motion at HEALPix level %d'%(healpix_level), cmap='rainbow')
    >   Traceback (most recent call last):
    >     File "/tmp/python8643931494195433022/zeppelin_python.py", line 162, in <module>
    >       exec(code, _zcUserQueryNameSpace)
    >     File "<stdin>", line 17, in <module>
    >     File "/usr/local/lib64/python3.11/site-packages/healpy/visufunc.py", line 332, in mollview
    >       pylab.draw()
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/pyplot.py", line 1111, in draw
    >       gcf().canvas.draw_idle()
    >     File "/tmp/python8643931494195433022/backend_zinline.py", line 136, in draw_idle
    >       self.draw(*args, **kwargs)
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/backends/backend_agg.py", line 388, in draw
    >       self.figure.draw(self.renderer)
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/artist.py", line 95, in draw_wrapper
    >       result = draw(artist, renderer, *args, **kwargs)
    >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/artist.py", line 72, in draw_wrapper
    >       return draw(artist, renderer)
    >              ^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/figure.py", line 3154, in draw
    >       mimage._draw_list_compositing_images(
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/image.py", line 132, in _draw_list_compositing_images
    >       a.draw(renderer)
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/artist.py", line 72, in draw_wrapper
    >       return draw(artist, renderer)
    >              ^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/axes/_base.py", line 3070, in draw
    >       mimage._draw_list_compositing_images(
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/image.py", line 132, in _draw_list_compositing_images
    >       a.draw(renderer)
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/artist.py", line 72, in draw_wrapper
    >       return draw(artist, renderer)
    >              ^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/image.py", line 649, in draw
    >       im, l, b, trans = self.make_image(
    >                         ^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/image.py", line 939, in make_image
    >       return self._make_image(self._A, bbox, transformed_bbox, clip,
    >              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/image.py", line 553, in _make_image
    >       output = self.norm(resampled_masked)
    >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/healpy/projaxes.py", line 1165, in __call__
    >       raise ValueError("values must all be positive")
    >   ValueError: values must all be positive


# -----------------------------------------------------

5. Working with Gaia XP spectra

    >   Fail to execute line 20: sampled_spectrum, sampling = convert(continuous_spectrum, save_file = False)
    >   Traceback (most recent call last):
    >     File "/tmp/python8643931494195433022/zeppelin_python.py", line 162, in <module>
    >       exec(code, _zcUserQueryNameSpace)
    >     File "<stdin>", line 20, in <module>
    >     File "/usr/local/lib/python3.11/site-packages/gaiaxpy/converter/converter.py", line 62, in convert
    >       return _convert(input_object=input_object, sampling=sampling, truncation=truncation,
    >              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib/python3.11/site-packages/gaiaxpy/converter/converter.py", line 94, in _convert
    >       spectra_df, positions = _create_spectra(parsed_input_data, truncation, design_matrices,
    >                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib/python3.11/site-packages/gaiaxpy/converter/converter.py", line 173, in _create_spectra
    >       positions = spectra_series.iloc[0].get_positions()
    >                   ~~~~~~~~~~~~~~~~~~~^^^
    >     File "/usr/local/lib64/python3.11/site-packages/pandas/core/indexing.py", line 1153, in __getitem__
    >       return self._getitem_axis(maybe_callable, axis=axis)
    >              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/pandas/core/indexing.py", line 1714, in _getitem_axis
    >       self._validate_integer(key, axis)
    >     File "/usr/local/lib64/python3.11/site-packages/pandas/core/indexing.py", line 1647, in _validate_integer
    >       raise IndexError("single positional indexer is out-of-bounds")
    >   IndexError: single positional indexer is out-of-bounds


# -----------------------------------------------------

6. Working with cross-matched surveys

    >   Traceback (most recent call last):
    >     File "/opt/spark/python/pyspark/serializers.py", line 437, in dumps
    >       return cloudpickle.dumps(obj, pickle_protocol)
    >              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle_fast.py", line 73, in dumps
    >       cp.dump(obj)
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle_fast.py", line 563, in dump
    >       return Pickler.dump(self, obj)
    >              ^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle_fast.py", line 653, in reducer_override
    >       return self._function_reduce(obj)
    >              ^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle_fast.py", line 526, in _function_reduce
    >       return self._dynamic_function_reduce(obj)
    >              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle_fast.py", line 507, in _dynamic_function_reduce
    >       state = _function_getstate(func)
    >               ^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle_fast.py", line 157, in _function_getstate
    >       f_globals_ref = _extract_code_globals(func.__code__)
    >                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle.py", line 236, in _extract_code_globals
    >       out_names = {names[oparg] for _, oparg in _walk_global_ops(co)}
    >                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle.py", line 236, in <setcomp>
    >       out_names = {names[oparg] for _, oparg in _walk_global_ops(co)}
    >                    ~~~~~^^^^^^^
    >   IndexError: tuple index out of range

    >   Fail to execute line 41: spark.udf.register('rasterize', cmd_raster_index, IntegerType())
    >   Traceback (most recent call last):
    >     File "/opt/spark/python/pyspark/serializers.py", line 437, in dumps
    >       return cloudpickle.dumps(obj, pickle_protocol)
    >              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle_fast.py", line 73, in dumps
    >       cp.dump(obj)
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle_fast.py", line 563, in dump
    >       return Pickler.dump(self, obj)
    >              ^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle_fast.py", line 653, in reducer_override
    >       return self._function_reduce(obj)
    >              ^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle_fast.py", line 526, in _function_reduce
    >       return self._dynamic_function_reduce(obj)
    >              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle_fast.py", line 507, in _dynamic_function_reduce
    >       state = _function_getstate(func)
    >               ^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle_fast.py", line 157, in _function_getstate
    >       f_globals_ref = _extract_code_globals(func.__code__)
    >                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle.py", line 236, in _extract_code_globals
    >       out_names = {names[oparg] for _, oparg in _walk_global_ops(co)}
    >                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/cloudpickle/cloudpickle.py", line 236, in <setcomp>
    >       out_names = {names[oparg] for _, oparg in _walk_global_ops(co)}
    >                    ~~~~~^^^^^^^
    >   IndexError: tuple index out of range
    >
    >   During handling of the above exception, another exception occurred:
    >
    >   Traceback (most recent call last):
    >     File "/tmp/python8643931494195433022/zeppelin_python.py", line 162, in <module>
    >       exec(code, _zcUserQueryNameSpace)
    >     File "<stdin>", line 41, in <module>
    >     File "/opt/spark/python/pyspark/sql/udf.py", line 362, in register
    >       self.sparkSession._jsparkSession.udf().registerPython(name, register_udf._judf)
    >                                                                   ^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/sql/udf.py", line 161, in _judf
    >       self._judf_placeholder = self._create_judf()
    >                                ^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/sql/udf.py", line 170, in _create_judf
    >       wrapped_func = _wrap_function(sc, self.func, self.returnType)
    >                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/sql/udf.py", line 34, in _wrap_function
    >       pickled_command, broadcast_vars, env, includes = _prepare_for_python_RDD(sc, command)
    >                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/rdd.py", line 2816, in _prepare_for_python_RDD
    >       pickled_command = ser.dumps(command)
    >                         ^^^^^^^^^^^^^^^^^^
    >     File "/opt/spark/python/pyspark/serializers.py", line 447, in dumps
    >       raise pickle.PicklingError(msg)
    >   _pickle.PicklingError: Could not serialize object: IndexError: tuple index out of range

# -----------------------------------------------------

7. Good astrometric solutions via ML Random Forest classifier

    >   Fail to execute line 15: plot.show()
    >   Traceback (most recent call last):
    >     File "/tmp/python8643931494195433022/zeppelin_python.py", line 167, in <module>
    >       exec(code, _zcUserQueryNameSpace)
    >     File "<stdin>", line 15, in <module>
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/pyplot.py", line 527, in show
    >       return _get_backend_mod().show(*args, **kwargs)
    >              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/tmp/python8643931494195433022/backend_zinline.py", line 72, in __call__
    >       manager.show(**kwargs)
    >     File "/tmp/python8643931494195433022/backend_zinline.py", line 208, in show
    >       zdisplay(self.canvas.figure, **kwargs)
    >     File "/tmp/python8643931494195433022/backend_zinline.py", line 290, in zdisplay
    >       src = fig.canvas.manager.angular_bind(**kwargs)
    >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/tmp/python8643931494195433022/backend_zinline.py", line 162, in angular_bind
    >       src = self.canvas.get_bytes(**kwargs)
    >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/tmp/python8643931494195433022/backend_zinline.py", line 96, in get_bytes
    >       self.print_figure(buf, **kwargs)
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/backend_bases.py", line 2193, in print_figure
    >       result = print_method(
    >                ^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/backend_bases.py", line 2043, in <lambda>
    >       print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
    >                                                                    ^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/backends/backend_agg.py", line 497, in print_png
    >       self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/backends/backend_agg.py", line 445, in _print_pil
    >       FigureCanvasAgg.draw(self)
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/backends/backend_agg.py", line 388, in draw
    >       self.figure.draw(self.renderer)
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/artist.py", line 95, in draw_wrapper
    >       result = draw(artist, renderer, *args, **kwargs)
    >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/artist.py", line 72, in draw_wrapper
    >       return draw(artist, renderer)
    >              ^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/figure.py", line 3154, in draw
    >       mimage._draw_list_compositing_images(
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/image.py", line 132, in _draw_list_compositing_images
    >       a.draw(renderer)
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/artist.py", line 72, in draw_wrapper
    >       return draw(artist, renderer)
    >              ^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/axes/_base.py", line 3070, in draw
    >       mimage._draw_list_compositing_images(
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/image.py", line 132, in _draw_list_compositing_images
    >       a.draw(renderer)
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/artist.py", line 72, in draw_wrapper
    >       return draw(artist, renderer)
    >              ^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/image.py", line 649, in draw
    >       im, l, b, trans = self.make_image(
    >                         ^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/image.py", line 939, in make_image
    >       return self._make_image(self._A, bbox, transformed_bbox, clip,
    >              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/matplotlib/image.py", line 553, in _make_image
    >       output = self.norm(resampled_masked)
    >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib64/python3.11/site-packages/healpy/projaxes.py", line 1165, in __call__
    >       raise ValueError("values must all be positive")
    >   ValueError: values must all be positive

# -----------------------------------------------------
8. Tips and tricks

    >   org.apache.zeppelin.interpreter.InterpreterException: org.apache.zeppelin.interpreter.InterpreterException: Fail to open JupyterKernelInterpreter:
    >   org.apache.zeppelin.interpreter.InterpreterException: Kernel prerequisite is not meet: jupyter-client is not installed, installed packages:
    >   acme==2.8.0
    >   aenum==3.1.15
    >   ....
    >   ....
    >   yarncleaner==0.1
    >   zipp==3.17.0
    >
    >   	at org.apache.zeppelin.jupyter.JupyterKernelInterpreter.open(JupyterKernelInterpreter.java:129)
    >   	at org.apache.zeppelin.python.IPythonInterpreter.open(IPythonInterpreter.java:110)
    >   	at org.apache.zeppelin.interpreter.LazyOpenInterpreter.open(LazyOpenInterpreter.java:70)
    >   	at org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:844)
    >   	at org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:752)
    >   	at org.apache.zeppelin.scheduler.Job.run(Job.java:172)
    >   	at org.apache.zeppelin.scheduler.AbstractScheduler.runJob(AbstractScheduler.java:132)
    >   	at org.apache.zeppelin.scheduler.FIFOScheduler.lambda$runJobInScheduler$0(FIFOScheduler.java:42)
    >   	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
    >   	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    >   	at java.lang.Thread.run(Thread.java:750)
    >
    >   	at org.apache.zeppelin.interpreter.LazyOpenInterpreter.open(LazyOpenInterpreter.java:76)
    >   	at org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:844)
    >   	at org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:752)
    >   	at org.apache.zeppelin.scheduler.Job.run(Job.java:172)
    >   	at org.apache.zeppelin.scheduler.AbstractScheduler.runJob(AbstractScheduler.java:132)
    >   	at org.apache.zeppelin.scheduler.FIFOScheduler.lambda$runJobInScheduler$0(FIFOScheduler.java:42)
    >   	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
    >   	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    >   	at java.lang.Thread.run(Thread.java:750)
    >   Caused by: org.apache.zeppelin.interpreter.InterpreterException: Fail to open JupyterKernelInterpreter:
    >   org.apache.zeppelin.interpreter.InterpreterException: Kernel prerequisite is not meet: jupyter-client is not installed, installed packages:
    >   acme==2.8.0
    >   aenum==3.1.15
    >   ....
    >   ....
    >   yarncleaner==0.1
    >   zipp==3.17.0
    >
    >   	at org.apache.zeppelin.jupyter.JupyterKernelInterpreter.open(JupyterKernelInterpreter.java:129)
    >   	at org.apache.zeppelin.python.IPythonInterpreter.open(IPythonInterpreter.java:110)
    >   	at org.apache.zeppelin.interpreter.LazyOpenInterpreter.open(LazyOpenInterpreter.java:70)
    >   	at org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:844)
    >   	at org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:752)
    >   	at org.apache.zeppelin.scheduler.Job.run(Job.java:172)
    >   	at org.apache.zeppelin.scheduler.AbstractScheduler.runJob(AbstractScheduler.java:132)
    >   	at org.apache.zeppelin.scheduler.FIFOScheduler.lambda$runJobInScheduler$0(FIFOScheduler.java:42)
    >   	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
    >   	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    >   	at java.lang.Thread.run(Thread.java:750)
    >
    >   	at org.apache.zeppelin.jupyter.JupyterKernelInterpreter.open(JupyterKernelInterpreter.java:145)
    >   	at org.apache.zeppelin.python.IPythonInterpreter.open(IPythonInterpreter.java:110)
    >   	at org.apache.zeppelin.interpreter.LazyOpenInterpreter.open(LazyOpenInterpreter.java:70)
    >   	... 8 more
    >   Caused by: org.apache.zeppelin.interpreter.InterpreterException: Kernel prerequisite is not meet: jupyter-client is not installed, installed packages:
    >   acme==2.8.0
    >   aenum==3.1.15
    >   ....
    >   ....
    >   yarncleaner==0.1
    >   zipp==3.17.0
    >
    >   	at org.apache.zeppelin.jupyter.JupyterKernelInterpreter.open(JupyterKernelInterpreter.java:129)
    >   	... 10 more


