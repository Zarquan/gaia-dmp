#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2023, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#
# AIMetrics: []
#

    Target:

        Figure out why the Kubernetes cluster deployment is failing.
        Need to track down where to look for error messages.

    Result:

        Work in progress ...


# -----------------------------------------------------
# Check which platform is live.
#[user@desktop]

    ssh fedora@live.gaia-dmp.uk \
        '
        date
        hostname
        '

    >   Thu 10 Aug 05:14:45 UTC 2023
    >   iris-gaia-green-20230308-zeppelin


# -----------------------------------------------------
# Create our client container.
#[user@desktop]

    agclient blue

    >   ....
    >   ....


# -----------------------------------------------------
# Delete and deploy everything.
#[root@ansibler]

    /deployments/openstack/bin/delete-all.sh \
        "${cloudname:?}"

    ansible-playbook \
        --inventory 'bootstrap,' \
        '/deployments/cluster-api/bootstrap/ansible/00-create-all.yml'

    >   ....
    >   ....


# -----------------------------------------------------
# -----------------------------------------------------
# Login to our bootstrap node as root.
#[root@ansibler]

    ssh root@bootstrap

    source loadconfig

cat << EOF
kindclustername [${kindclustername}]
kindclusterconf [${kindclusterconf}]
workclustername [${workclustername}]
workclusterconf [${workclusterconf}]
EOF

    >   kindclustername [iris-gaia-blue-20230810-kind]
    >   kindclusterconf [/opt/aglais/iris-gaia-blue-20230810-kind.yml]
    >   workclustername [iris-gaia-blue-20230810-work]
    >   workclusterconf [/opt/aglais/iris-gaia-blue-20230810-work.yml]


# -----------------------------------------------------
# Check the cluster status.
#[root@bootstrap]

    kubectl \
        --kubeconfig "${kindclusterconf:?}" \
        get OpenStackClusters

    >   NAME                           CLUSTER                        READY   NETWORK   SUBNET   BASTION IP   AGE
    >   iris-gaia-blue-20230810-work   iris-gaia-blue-20230810-work                                           45s


# -----------------------------------------------------
# Check the addon-provider logs.
#[root@bootstrap]

    kubectl \
        --kubeconfig "${kindclusterconf:?}" \
        get pods

    >   NAME                                                      READY   STATUS              RESTARTS   AGE
    >   cluster-api-addon-provider-66cc76bbbf-x89gp               1/1     Running             0          101s
    >   iris-gaia-blue-20230810-work-autoscaler-6f47bdf75-wwbbm   0/1     ContainerCreating   0          62s


    podname=$(
        kubectl \
            --kubeconfig "${kindclusterconf:?}" \
            get pods \
                --output json \
        | jq -r '.items[].metadata.name | select(test("cluster-api-addon-provider")) '
        )

    kubectl \
        --kubeconfig "${kindclusterconf:?}" \
        logs "${podname:?}" \
    | tee /tmp/cluster-api-addon-provider.log

    >   ....
    >   [2023-08-10 05:33:22,833] easykube.rest.client [INFO    ] API request: "
    >       PATCH https://10.96.0.1/apis/addons.stackhpc.com/v1alpha1/namespaces/default/helmreleases/iris-gaia-blue-20230810-work-kubernetes-dashboard
    >       " 200
    >   ....




# -----------------------------------------------------
# -----------------------------------------------------
# Login to our bootstrap node as root.
#[root@ansibler]

    ssh root@bootstrap

    source loadconfig

cat << EOF
kindclustername [${kindclustername}]
kindclusterconf [${kindclusterconf}]
workclustername [${workclustername}]
workclusterconf [${workclusterconf}]
EOF

    >   kindclustername [iris-gaia-blue-20230810-kind]
    >   kindclusterconf [/opt/aglais/iris-gaia-blue-20230810-kind.yml]
    >   workclustername [iris-gaia-blue-20230810-work]
    >   workclusterconf [/opt/aglais/iris-gaia-blue-20230810-work.yml]


    kubectl \
        --kubeconfig "${kindclusterconf:?}" \
        get pods \
            --namespace capi-kubeadm-control-plane-system

    >   NAME                                                             READY   STATUS    RESTARTS   AGE
    >   capi-kubeadm-control-plane-controller-manager-845544c868-h2sf2   1/1     Running   0          11m


    controlpod=$(
        kubectl \
            --kubeconfig "${kindclusterconf:?}" \
            get pods \
                --output json \
                --namespace capi-kubeadm-control-plane-system \
        | jq -r '.items[0] | .metadata.name'
        )

    kubectl \
        --kubeconfig "${kindclusterconf:?}" \
        logs \
            --namespace capi-kubeadm-control-plane-system  \
            "${controlpod:?}"

    >   ....
    >   I0810 05:32:22.211350       1 controller.go:346] "Reconcile KubeadmControlPlane" controller="kubeadmcontrolplane" controllerGroup="controlplane.cluster.x-k8s.io" controllerKind="KubeadmControlPlane" KubeadmControlPlane="default/iris-gaia-blue-20230810-work-control-plane" namespace="default" name="iris-gaia-blue-20230810-work-control-plane" reconcileID=aff953ae-c9fb-4aca-b05d-767a2e2a7109 Cluster="default/iris-gaia-blue-20230810-work"
    >   I0810 05:32:22.459203       1 controller.go:355] "Cluster infrastructure is not ready yet" controller="kubeadmcontrolplane" controllerGroup="controlplane.cluster.x-k8s.io" controllerKind="KubeadmControlPlane" KubeadmControlPlane="default/iris-gaia-blue-20230810-work-control-plane" namespace="default" name="iris-gaia-blue-20230810-work-control-plane" reconcileID=aff953ae-c9fb-4aca-b05d-767a2e2a7109 Cluster="default/iris-gaia-blue-20230810-work"
    >   E0810 05:32:22.569098       1 controller.go:214] "Failed to update KubeadmControlPlane Status" err="failed to create remote cluster client: failed to create cluster accessor: error fetching REST client config for remote cluster \"default/iris-gaia-blue-20230810-work\": failed to retrieve kubeconfig secret for Cluster default/iris-gaia-blue-20230810-work: Secret \"iris-gaia-blue-20230810-work-kubeconfig\" not found" controller="kubeadmcontrolplane" controllerGroup="controlplane.cluster.x-k8s.io" controllerKind="KubeadmControlPlane" KubeadmControlPlane="default/iris-gaia-blue-20230810-work-control-plane" namespace="default" name="iris-gaia-blue-20230810-work-control-plane" reconcileID=aff953ae-c9fb-4aca-b05d-767a2e2a7109 Cluster="default/iris-gaia-blue-20230810-work"
    >   E0810 05:32:22.636360       1 controller.go:324] "Reconciler error" err="failed to create remote cluster client: failed to create cluster accessor: error fetching REST client config for remote cluster \"default/iris-gaia-blue-20230810-work\": failed to retrieve kubeconfig secret for Cluster default/iris-gaia-blue-20230810-work: Secret \"iris-gaia-blue-20230810-work-kubeconfig\" not found" controller="kubeadmcontrolplane" controllerGroup="controlplane.cluster.x-k8s.io" controllerKind="KubeadmControlPlane" KubeadmControlPlane="default/iris-gaia-blue-20230810-work-control-plane" namespace="default" name="iris-gaia-blue-20230810-work-control-plane" reconcileID=aff953ae-c9fb-4aca-b05d-767a2e2a7109
    >   ....

