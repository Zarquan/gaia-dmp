#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#
# AIMetrics: []
#

    Target:

        Notes on how to merge changes from the main WFAU (uptream) repository.
        People have their own ways of doing this, but this documents the method I use.

        The way that I work is I make changes on a branch in my personal fork.
        https://github.com/Zarquan/gaia-dmp

        I commit and push the changes to my personal fork.
        https://github.com/Zarquan/gaia-dmp/commit/90fb7a4a229dcd6ed463d1c52019448d17b34fcc

        Then I create a pull request on the main WFAU (uptream) repository.
        https://github.com/wfau/gaia-dmp/pull/1283

        Once the pull request is approved and merged, then I use the following steps
        to update my personal fork to match the main WFAU (uptream) repository.

        (*) There is a 'update this fork' button in the GitHub UI, but I've had issues
        with this in the past. It has creates a new commit when it doesn't need to.
        Which gets you stuck in a loop, because that new commit then needs to be
        merged and synced ... which creates a new commit ...

        I find it easier to do this manually using the command line.
        YMMV YoutMilageMayVary.

    Result:

        Updated my personal fork on desktop and in GitHub.
        Synced with the main WFAU (uptream) repository to contain the latest changes.


# -----------------------------------------------------
# Check the main WFAU (upstream) repository is in the config,
# add it if needed.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        git remote -v

    >   origin      git@github.com:Zarquan/gaia-dmp.git (fetch)
    >   origin      git@github.com:Zarquan/gaia-dmp.git (push)

        # Add the main WFAU repository if it isn't in the list.
        git remote add 'upstream' 'https://github.com/wfau/gaia-dmp.git'


        git remote -v

    >   origin      git@github.com:Zarquan/gaia-dmp.git (fetch)
    >   origin      git@github.com:Zarquan/gaia-dmp.git (push)
    >   upstream    https://github.com/wfau/gaia-dmp.git (fetch)
    >   upstream    https://github.com/wfau/gaia-dmp.git (push)

    popd

    #
    # Note - the names 'origin' and 'upstream' are convention.
    # Technically, you can give them whatever names you want.
    #
    # You only need to do this once for a local clone.
    # The remote URLs will be stored in the local config file.
    #
    # I'm using the 'git@github.com' syntax for my personal fork, but the I'm using
    # the 'https://github.com' syntax for the main WFAU repository.
    # This means git will automatically use my ssh keys to authenticate for my fork,
    # but it will ask for username and password if it tries to modify files in the
    # main WFAU repository
    # This effectivley makes the main WFAU repository read only.
    #

# -----------------------------------------------------
# Merge upstream changes.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        git checkout master

        git pull

        # This fetches the latest changes from the main WFAU repository.
        git fetch upstream

    >   remote: Enumerating objects: 27, done.
    >   remote: Counting objects: 100% (18/18), done.
    >   remote: Compressing objects: 100% (14/14), done.
    >   remote: Total 27 (delta 7), reused 11 (delta 4), pack-reused 9
    >   Unpacking objects: 100% (27/27), 9.26 KiB | 526.00 KiB/s, done.
    >   ....
    >   ....


        # This merges changes to 'master' from the upstream WFAU repository..
        git merge upstream/master

    >   Updating b81b5ec..741f5b7
    >   Fast-forward
    >    notes/zrq/20240208-01-notebook-errors.txt | 911 ++++++++++++++++++++++++++++++
    >    notes/zrq/20240208-01-test-deploy.txt     | 232 ++++++++
    >    notes/zrq/20240209-01handover-notes.txt   | 306 ++++++++++
    >    3 files changed, 1449 insertions(+)
    >    create mode 100644 notes/zrq/20240208-01-notebook-errors.txt
    >    create mode 100644 notes/zrq/20240208-01-test-deploy.txt
    >    create mode 100644 notes/zrq/20240209-01handover-notes.txt

        # Sanity check
        git status

    >   On branch master
    >   Your branch is ahead of 'origin/master' by 8 commits.
    >     (use "git push" to publish your local commits)
    >   ....
    >   ....

        # Push the new changes to my own fork.
        git push

    >   Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
    >   To github.com:Zarquan/gaia-dmp.git
    >      b81b5ec..741f5b7  master -> master


    popd

    #
    # Assuming we haven't modifed the same files this should
    # go straight through without creating another commit.
    #
    # If we have modified the same files, you will need to resolve
    # the conflicts locally and comit the shanges before you can
    # complete the merge.
    #




