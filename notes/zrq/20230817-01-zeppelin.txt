#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2023, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#
# AIMetrics: []
#


    Target:

        Look at what needs doing to start deploying Zeppelin asgain.

    Result:

        Work in progress ...

        The main Apache repository.
        https://github.com/apache/zeppelin

        Our WFAU fork of the Apache repository.
        https://github.com/wfau/gaia-dmp-zeppelin

        Our personal fork of the Apache repository.
        https://github.com/Zarquan/gaia-dmp-zeppelin


# -----------------------------------------------------
# Set our environment variables.
#[user@desktop]

    source "${HOME:?}/projects.env"

    ZEPPELIN_HOME="${PROJECTS_ROOT:?}/WFAU/gaia-dmp-zeppelin"

    ZRQ_ZEPPELIN_REPO='git@github.com:Zarquan/gaia-dmp-zeppelin.git'
    ZRQ_ZEPPELIN_CODE="${ZEPPELIN_HOME:?}/github-zrq"

    WFAU_ZEPPELIN_REPO='git@github.com:WFAU/gaia-dmp-zeppelin.git'
    WFAU_ZEPPELIN_CODE="${ZEPPELIN_HOME:?}/github-wfau"


# -----------------------------------------------------
# Investigate our personal fork.
#[user@desktop]

    pushd "${ZRQ_ZEPPELIN_CODE:?}"

        git status

        git branch

        git remote -v

    popd

    >   On branch gaia-dmp-0.10
    >   Your branch is up to date with 'origin/gaia-dmp-0.10'.

    >   * gaia-dmp-0.10

    >   origin	git@github.com:Zarquan/gaia-dmp-zeppelin.git (fetch)
    >   origin	git@github.com:Zarquan/gaia-dmp-zeppelin.git (push)


# -----------------------------------------------------
# Investigate the WFAU fork.
#[user@desktop]

    pushd "${WFAU_ZEPPELIN_CODE:?}"

        git status

        git branch

        git remote -v

    popd

    >   On branch gaia-dmp-0.10.1
    >   Your branch is up to date with 'origin/gaia-dmp-0.10.1'.

    >   * gaia-dmp-0.10.1

    >   origin	git@github.com:wfau/gaia-dmp-zeppelin.git (fetch)
    >   origin	git@github.com:wfau/gaia-dmp-zeppelin.git (push)


# -----------------------------------------------------
# Check notes for changes to the code base.
#[user@desktop]

    ....
    ....

    Last notes for a Kubernetes deployment.
    https://github.com/wfau/gaia-dmp/blob/master/notes/zrq/20210127-01-kubernetes-deploy.txt

    The podman run command mounts sub-directories '${AGLAIS_CODE:?}/experiments'.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/notes/zrq/20210127-01-kubernetes-deploy.txt#L65-L67

    >   podman run \
    >       ....
    >       ....
    >       --volume "${AGLAIS_CODE:?}/experiments/common:/common:ro,z" \
    >       --volume "${AGLAIS_CODE:?}/experiments/openstack:/openstack:ro,z" \
    >       --volume "${AGLAIS_CODE:?}/experiments/kubernetes:/kubernetes:rw,z" \
    >       atolmis/ansible-client:2020.12.02 \
    >       bash

    Looks like these have been moved to '${AGLAIS_CODE:?}/deployments'.

        https://github.com/wfau/gaia-dmp/tree/master/deployments/common
        https://github.com/wfau/gaia-dmp/tree/master/deployments/openstack
        https://github.com/wfau/gaia-dmp/tree/master/deployments/kubernetes


    The main deployment happens in 'create-all.sh'.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/notes/zrq/20210127-01-kubernetes-deploy.txt#L102-L109
    https://github.com/wfau/gaia-dmp/blob/master/deployments/kubernetes/bin/create-all.sh

    >   # Create everything.
    >   #[root@kubernator]
    >   
    >       /kubernetes/bin/create-all.sh
    >   
    >       ....
    >       ....

    The 'create-all.sh' script calls 'magnum-create.sh' create the K8s cluster.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/bin/create-all.sh#L100-L105

    >   # -----------------------------------------------------
    >   # Create our Magnum cluster.
    >   
    >       "${treetop:?}/kubernetes/bin/magnum-create.sh" \
    >           "${cloudname:?}" \
    >           "${buildname:?}"
    >   
    >           ....
    >           ....
    >   


    It calls 'cephfs-router.sh' to create a router for CephFS traffic.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/bin/create-all.sh#L149-L154

    >   # -----------------------------------------------------
    >   # Create our CephFS router.
    >   
    >       "${treetop:?}/kubernetes/bin/cephfs-router.sh" \
    >           "${cloudname:?}" \
    >           "${buildname:?}"
    >   
    >           ....
    >           ....
    >   

    It creates a local (writeable) copy of our Helm charts.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/bin/create-all.sh#L171-L180

    We need a writeable copy because Helm downloads the dependencies to sub-directories of the 'charts' directory.
    We can't add a writeable sub directory to a readonly volume mount.

    However, it might be possible using overlays.
    https://stackoverflow.com/questions/29550736/can-i-mount-docker-host-directory-as-copy-on-write-overlay

    >   # -----------------------------------------------------
    >   # Create a local copy of our Helm charts.
    >   
    >       ....
    >       ....
    >   
    >       cp -a "${treetop:?}/kubernetes/helm" \
    >             "${hemlpath:?}"....

    Then it installs our 'main' Helm chart.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/bin/create-all.sh#L183C44-L201

    >   # -----------------------------------------------------
    >   # Install our main Helm chart.
    >   # Using 'upgrade --install' to make the command idempotent
    >   # https://github.com/helm/helm/issues/3134
    >   
    >       ....
    >       ....
    >   
    >       helm dependency update \
    >           "${hemlpath:?}"
    >   
    >       helm upgrade \
    >           --install \
    >           --create-namespace \
    >           --namespace "${namespace:?}" \
    >           'aglais' \
    >           "${hemlpath:?}"

    Our 'main' Helm chart pulls in our dependencies.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/helm/Chart.yaml#L45-L56

    >   dependencies:
    >     - name: ingress-nginx
    >       repository: https://kubernetes.github.io/ingress-nginx
    >       version: 3.7.1
    >   
    >     - name: ceph-csi-cephfs
    >       repository: https://ceph.github.io/csi-charts
    >       version: 3.1.1
    >   
    >     - name: openstack-manila-csi
    >       repository: https://kubernetes.github.io/cloud-provider-openstack
    >       version: 0.2.1

    The 'values.yaml' file for our 'main' Helm chart has configuration settings for the Openstack Manila CSI plugin.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/helm/values.yaml#L23-L36

    >   # Configuration for the Openstack Manila CSI plugin
    >   openstack-manila-csi:
    >   
    >     csimanila:
    >       image:
    >         repository: k8scloudprovider/manila-csi-plugin
    >         tag: v1.18.0
    >         pullPolicy: IfNotPresent
    >   
    >     shareProtocols:
    >       - protocolSelector: CEPHFS
    >         fwdNodePluginEndpoint:
    >           dir: /var/lib/kubelet/plugins/cephfs.csi.ceph.com
    >           sockFile: csi.sock

    Next, 'create-all.sh' installs the tools/dashboard Helm chart.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/bin/create-all.sh#L204-L251

    It then mounts the data shares and user shares.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/bin/create-all.sh#L253-L281
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/bin/create-all.sh#L283-L310

    Followed by our Zeppelin Helm chart, 'tools/zeppelin'.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/bin/create-all.sh#L312-L351

    Finally, it installs our Drupal Helm chart.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/bin/create-all.sh#L353-L376

# -----------------------------------------------------

    Our Zeppelin Helm chart contains 6 templates.
    https://github.com/wfau/gaia-dmp/tree/master/deployments/kubernetes/helm/tools/zeppelin

    A top level Service called 'zeppelin-server-service'.
    https://github.com/wfau/gaia-dmp/blob/master/deployments/kubernetes/helm/tools/zeppelin/templates/zeppelin-server-service.yaml#L18-L21

    An Ingress which handles the TLS certificate.
    https://github.com/wfau/gaia-dmp/blob/master/deployments/kubernetes/helm/tools/zeppelin/templates/zeppelin-server-ingress.yaml

    A ConfigMap to configure the internal NginX HTTP proxy from port 8080 to port 80.
    https://github.com/wfau/gaia-dmp/blob/master/deployments/kubernetes/helm/tools/zeppelin/templates/zeppelin-nginx-config.yaml

    A template to create the ServiceAccount, Role, and RoleBinding.
    https://github.com/wfau/gaia-dmp/blob/master/deployments/kubernetes/helm/tools/zeppelin/templates/zeppelin-server-account.yaml

    A ConfigMap to configure the Zeppelin and Spark containers.
    https://github.com/wfau/gaia-dmp/blob/master/deployments/kubernetes/helm/tools/zeppelin/templates/zeppelin-server-conf.yaml

    And then a Deployment which deploys three containers
    https://github.com/wfau/gaia-dmp/blob/master/deployments/kubernetes/helm/tools/zeppelin/templates/zeppelin-server-deploy.yaml

    The Zeppelin container, called 'zeppelin-server-actual'
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/helm/tools/zeppelin/templates/zeppelin-server-deploy.yaml#L47-L82

    >     - name: zeppelin-server-actual
    >       image: "{{ .Values.zeppelin_server_image }}"
    >       command: ["sh", "-c", "$(ZEPPELIN_HOME)/bin/zeppelin.sh"]
    >       lifecycle:
    >         preStop:
    >           exec:
    >             # SIGTERM triggers a quick exit; gracefully terminate instead
    >             command: ["sh", "-c", "ps -ef | grep org.apache.zeppelin.server.ZeppelinServer | grep -v grep | awk '{print $2}' | xargs kill"]
    >       ports:
    >       - name: http
    >         containerPort: 8080
    >       - name: https
    >         containerPort: 8443
    >       - name: rpc
    >         containerPort: 12320
    >       env:
    >       - name: POD_UID
    >         valueFrom:
    >           fieldRef:
    >             apiVersion: v1
    >             fieldPath: metadata.uid
    >       - name: POD_NAME
    >         valueFrom:
    >           fieldRef:
    >             apiVersion: v1
    >             fieldPath: metadata.name
    >       envFrom:
    >       - configMapRef:
    >           name: zeppelin-server-config
    >     # volumeMounts:
    >     #  - name: zeppelin-server-notebook-volume     # configure this to persist notebook
    >     #    mountPath: /zeppelin/notebook
    >     #  - name: zeppelin-server-conf                # configure this to persist Zeppelin configuration
    >     #    mountPath: /zeppelin/conf
    >     #  - name: zeppelin-server-custom-k8s          # configure this to mount customized Kubernetes spec for interpreter
    >     #    mountPath: /zeppelin/k8s

    The Nginx HTTP proxy, called 'zeppelin-server-nginx', and a DNS resolver for dynamic dns resolution.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/helm/tools/zeppelin/templates/zeppelin-server-deploy.yaml#L83-L114

    >     - name: zeppelin-server-nginx
    >       image: nginx:1.14.0
    >       command: ["/bin/sh", "-c"]
    >       env:
    >       - name: SERVICE_DOMAIN
    >         valueFrom:
    >           configMapKeyRef:
    >             name: zeppelin-server-config
    >             key: SERVICE_DOMAIN
    >       args:
    >         - cp -f /tmp/conf/nginx.conf /etc/nginx/nginx.conf;
    >           sed -i -e "s/SERVICE_DOMAIN/$SERVICE_DOMAIN/g" /etc/nginx/nginx.conf;
    >           sed -i -e "s/NAMESPACE/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/g" /etc/nginx/nginx.conf;
    >           cat /etc/nginx/nginx.conf;
    >           /usr/sbin/nginx
    >       volumeMounts:
    >         - name: nginx-conf
    >           mountPath: /tmp/conf
    >       lifecycle:
    >         preStop:
    >           exec:
    >             # SIGTERM triggers a quick exit; gracefully terminate instead
    >             command: ["/usr/sbin/nginx", "-s", "quit"]
    >     - name: zeppelin-server-dnsmasq  # nginx requires dns resolver for dynamic dns resolution
    >       image: "janeczku/go-dnsmasq:release-1.0.5"
    >       args:
    >         - --listen
    >         - "127.0.0.1:53"
    >         - --default-resolver
    >         - --append-search-domains
    >         - --hostsfile=/etc/hosts
    >         - --verbose

# -----------------------------------------------------

    The Zeppelin Deployment uses a setting in the values file to specify the container image.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/helm/tools/zeppelin/templates/zeppelin-server-deploy.yaml#L47-L48

    >         - name: zeppelin-server-actual
    >           image: "{{ .Values.zeppelin_server_image }}"

    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/helm/tools/zeppelin/values.yaml#L25-L26

    >   zeppelin_server_image: "aglais/zeppelin-dev:20210112-142531-debian-9-java-8"
    >   zeppelin_worker_image: "aglais/zeppelin-dev:20210112-142531-debian-9-java-8"

    The image name 'aglais/zeppelin-dev' refers to a container image posted on our Docker Hub account.

    https://hub.docker.com/r/aglais/zeppelin-dev/tags
    https://hub.docker.com/layers/aglais/zeppelin-dev/20210112-142531-debian-9-java-8/
    https://hub.docker.com/layers/aglais/zeppelin-dev/20210112-142531-debian-9-java-8/images/sha256-a67c0459e757087b8f777a0bc6130d2c99e53d032cae1321d2895db1b4a1bb4c

        Type : Image
        OS/ARCH : linux/amd64
        Compressed Size : 2.44 GB
        Last pushed : 3 years ago by yrvafhom

# -----------------------------------------------------

    The Zeppelin container image is build in three stages.

    The 'base' image contains Java JDK and a Conda environment with the numerical libraries.
    https://github.com/wfau/gaia-dmp/blob/master/deployments/kubernetes/docker/zeppelin/base/Dockerfile

    Note the 'base' image also explicitly installs 'tini', which may not be needed on Docker version 1.13 on greater.
    https://github.com/krallin/tini

    The 'base' image adds a fixed set of numerical libraries into a conda environment.
    We would probably need to modify this to use our own custom list of libraries configured closer to runtime.

    Not clear if this is also true for Podman yet.
    https://github.com/containers/podman/issues/1670

# -----------------------------------------------------

    The 'main' image configures the Zeppelin home directory.
    https://github.com/wfau/gaia-dmp/blob/master/deployments/kubernetes/docker/zeppelin/main/Dockerfile

# -----------------------------------------------------

    The 'dev' image updates the interpreter Pod specification and the Shiro conbfiguration file.
    https://github.com/wfau/gaia-dmp/blob/master/deployments/kubernetes/docker/zeppelin/dev/Dockerfile
    Both of which could be done using volume mounts instead.

    The interpreter spec creates a Pod, a Service, a Role and a RoleBinding.
    https://github.com/wfau/gaia-dmp/blob/master/deployments/kubernetes/docker/zeppelin/dev/k8s/interpreter/100-interpreter-spec.yaml

    Several sections of the interpreter spec are speficic to Spark, controlled by a conditional on the interpreter group name.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/docker/zeppelin/dev/k8s/interpreter/100-interpreter-spec.yaml#L36-L40

    >     {% if zeppelin.k8s.interpreter.group.name == "spark" %}
    >     automountServiceAccountToken: true
    >     {% else %}
    >     automountServiceAccountToken: false
    >     {% endif %}

    The interpreter spec mounts a hard coded list of Volumes for the science data and user directories.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/docker/zeppelin/dev/k8s/interpreter/100-interpreter-spec.yaml#L66-L94

    >       volumeMounts:
    >     {% if zeppelin.k8s.interpreter.group.name == "spark" %}
    >       - name: spark-home
    >         mountPath: /spark
    >       - name: aglais-gaia-dr2
    >         mountPath: /data/gaia/dr2
    >         readOnly: true
    >       ....
    >       ....
    >       - name: aglais-user-nch
    >         mountPath: /user/nch
    >         readOnly: false
    >       - name: aglais-user-stv
    >         mountPath: /user/stv
    >         readOnly: false
    >       - name: aglais-user-zrq
    >         mountPath: /user/zrq
    >         readOnly: false
    >     {% endif %}

    With corresponding PersistentVolumeClaims.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/docker/zeppelin/dev/k8s/interpreter/100-interpreter-spec.yaml#L104-L132

    >     volumes:
    >     {% if zeppelin.k8s.interpreter.group.name == "spark" %}
    >     - name: spark-home
    >       emptyDir: {}
    >     - name: aglais-gaia-dr2
    >       persistentVolumeClaim:
    >         claimName: aglais-gaia-dr2-claim
    >     - name: aglais-gaia-edr3
    >       persistentVolumeClaim:
    >         claimName: aglais-gaia-edr3-claim
    >     - name: aglais-wise-allwise
    >       persistentVolumeClaim:
    >         claimName: aglais-wise-allwise-claim
    >     - name: aglais-panstarrs-dr1
    >       persistentVolumeClaim:
    >         claimName: aglais-panstarrs-dr1-claim
    >     - name: aglais-twomass-allsky
    >       persistentVolumeClaim:
    >         claimName: aglais-twomass-allsky-claim
    >     - name: aglais-user-nch
    >       persistentVolumeClaim:
    >         claimName: aglais-user-nch-claim
    >     - name: aglais-user-stv
    >       persistentVolumeClaim:
    >         claimName: aglais-user-stv-claim
    >     - name: aglais-user-zrq
    >       persistentVolumeClaim:
    >         claimName: aglais-user-zrq-claim
    >     {% endif %}

# -----------------------------------------------------

    The 'builder' container image is based on the firethorn 'builder' image.
    https://github.com/wfau/gaia-dmp/blob/5d4d6a25d0ee28e6c0f1d774b4005a981df9729b/deployments/kubernetes/docker/builder/Dockerfile#L22-L23

    >   FROM firethorn/builder:latest
    >   MAINTAINER Dave Morris <docker-admin@metagrid.co.uk>

    The firethorn 'builder' image is available from our DockerHub account.
    https://hub.docker.com/r/firethorn/builder/tags

# -----------------------------------------------------
# -----------------------------------------------------

    We could use a patch to add the volume mounts and PersistentVolumeClaims.

    We could use volume mounts to add the interpreter Pod specification and the Shiro ini file.
    These could come from files on disc, or from plain text Secrets.

    We know how to store our Shiro user accounts in MariaDB, making them dynamic.

    We could use a volume mount for the notebooks directory.
    Need to know more about how Zeppelin manages the notebooks.
    See if we can hook or override the standard code to use our own methods.

    Our Helm charts are useful.
    The core ideas work, but probably easiest to start with a new simplified chart and build them up again.

    Interesting to see if we can use the official Docker image.
    https://zeppelin.apache.org/download.html#using-the-official-docker-image

# -----------------------------------------------------

    Next steps ..

    Get the dashboard and metrics working?
    Create a Pod/Deployment to run a simple webserver?
    Go for it and run a basic Zeppelin?

    Add a loadbalancer for application services.


