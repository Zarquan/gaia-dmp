#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2023, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#
# AIMetrics: [{"name": "ChatGPT","contribution": {"value": 90,"units": "%"}}]
#

    Target:

        Ask ChatGPT for help in accessing the components.

    Result:

        Work in progress ...

# -----------------------------------------------------
# -----------------------------------------------------
# ChatGPT

    >   If I have the kubernetes dashboard installed, how do I access it ?

    >   Assuming you have Kubernetes dashboard installed in your Kubernetes cluster, you can access it using the following steps:
    >   
    >   1. **Check Dashboard Installation:**
    >   First, make sure that the Kubernetes dashboard is installed and running in your cluster. You can verify this by running the following command:
    >   
    >   ```bash
    >   kubectl get pods -n kubernetes-dashboard
    >   ```
    >   
    >   If the dashboard is installed and running, you should see one or more pods listed with names containing "kubernetes-dashboard."
    >   
    >   2. **Create an Authentication Token (Skip if RBAC is disabled):**
    >   If your cluster has Role-Based Access Control (RBAC) enabled (which is the default for most Kubernetes installations), you need to create an authentication token to access the dashboard.
    >   
    >   a. Create a Service Account named 'dashboard-admin' and give it cluster-admin privileges:
    >   
    >   ```bash
    >   kubectl create serviceaccount dashboard-admin -n kube-system
    >   kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin
    >   ```
    >   
    >   b. Get the token associated with the 'dashboard-admin' Service Account:
    >   
    >   ```bash
    >   kubectl -n kube-system get secret | grep dashboard-admin
    >   kubectl -n kube-system describe secret <dashboard-admin-token-name>
    >   ```
    >   
    >   3. **Start the Kubernetes Dashboard Proxy:**
    >   The Kubernetes dashboard runs inside your cluster and is not directly accessible from outside. To access it, you need to create a proxy to forward the request to the dashboard:
    >   
    >   ```bash
    >   kubectl proxy
    >   ```
    >   
    >   By default, the proxy runs on `http://localhost:8001`.
    >   
    >   4. **Access the Kubernetes Dashboard:**
    >   Open your web browser and navigate to the Kubernetes dashboard using the proxy URL:
    >   
    >   ```
    >   http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
    >   ```
    >   
    >   If RBAC is enabled, you will be prompted for a login. Choose "Token" and enter the token you obtained in step 2.
    >   
    >   5. **Access Dashboard Without RBAC:**
    >   If you're running your cluster without RBAC enabled, you should be able to access the dashboard directly without authentication using the proxy URL:
    >   
    >   ```
    >   http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
    >   ```
    >   
    >   Please note that exposing the Kubernetes dashboard without proper authentication and authorization can be a security risk, so it's recommended to have RBAC enabled and use the authentication token method. Additionally, consider setting up an HTTPS connection if you are accessing the dashboard in a production environment.


# -----------------------------------------------------
# -----------------------------------------------------
# ChatGPT

    >   How do I tell if rbac is enabled ?

    >   To check if RBAC (Role-Based Access Control) is enabled in your Kubernetes cluster, you can follow these steps:
    >   
    >   1. **Check the API Server Arguments:**
    >   The most common way to enable or disable RBAC in a Kubernetes cluster is by configuring the API server with the appropriate arguments. To check the API server arguments, you can use the `kubectl` command:
    >   
    >   ```bash
    >   kubectl get pods -n kube-system -l component=kube-apiserver -o yaml | grep -iE "args:|authorization-mode"
    >   ```
    >   
    >   Look for the line that contains "authorization-mode" to see the configured authorization modes. If RBAC is enabled, you should see "RBAC" listed as one of the authorization modes. For example, it might look like this:
    >   
    >   ```
    >   - --authorization-mode=Node,RBAC
    >   ```
    >   
    >   2. **Check ClusterRole and ClusterRoleBinding (Optional):**
    >   Another way to check if RBAC is enabled is by examining the presence of ClusterRoles and ClusterRoleBindings. These are the RBAC resources that grant permissions across the entire cluster.
    >   
    >   To list all ClusterRoles, you can run:
    >   
    >   ```bash
    >   kubectl get clusterroles
    >   ```
    >   
    >   To list all ClusterRoleBindings, you can run:
    >   
    >   ```bash
    >   kubectl get clusterrolebindings
    >   ```
    >   
    >   If you see any ClusterRoles or ClusterRoleBindings listed, it indicates that RBAC is likely enabled.
    >   
    >   3. **Check Namespaces for Role and RoleBinding (Optional):**
    >   In addition to ClusterRoles and ClusterRoleBindings, RBAC can be used on a per-namespace basis. To check if RBAC is enabled for a specific namespace, you can look for Roles and RoleBindings within that namespace.
    >   
    >   To list all Roles within a namespace (replace `<NAMESPACE>` with the actual namespace name):
    >   
    >   ```bash
    >   kubectl get roles -n <NAMESPACE>
    >   ```
    >   
    >   To list all RoleBindings within a namespace:
    >   
    >   ```bash
    >   kubectl get rolebindings -n <NAMESPACE>
    >   ```
    >   
    >   If you find Roles and RoleBindings in a namespace, it indicates that RBAC is used for that namespace.
    >   
    >   Please note that the steps above provide a general way to determine if RBAC is enabled, but there might be variations in specific Kubernetes distributions or installations. For example, some managed Kubernetes services might enable RBAC by default. Always refer to the documentation or configuration settings specific to your Kubernetes environment for accurate information.



# -----------------------------------------------------
# Checking the authorization-mode to see if RBAC is enabled.
#[root@bootstrap]

    kubectl \
        --kubeconfig "${workclusterconf:?}" \
        get pods \
            --output yaml \
            --namespace kube-system \
            --selector 'component=kube-apiserver' \
    | grep -iE "args:|authorization-mode"

    >         - --authorization-mode=Node,RBAC
    >         - --authorization-mode=Node,RBAC
    >         - --authorization-mode=Node,RBAC


# -----------------------------------------------------
# Checking for existing dashboard-admin secret.
#[root@bootstrap]

    kubectl \
        --kubeconfig "${workclusterconf:?}" \
        get secret \
        --namespace kubernetes-dashboard

    >   NAME                                         TYPE                 DATA   AGE
    >   kubernetes-dashboard-certs                   Opaque               0      40m
    >   kubernetes-dashboard-csrf                    Opaque               1      40m
    >   kubernetes-dashboard-key-holder              Opaque               2      40m
    >   sh.helm.release.v1.kubernetes-dashboard.v1   helm.sh/release.v1   1      40m


# -----------------------------------------------------
# Checking for existing service accounts and role bindings.
#[root@bootstrap]

    kubectl \
        --kubeconfig "${workclusterconf:?}" \
        get serviceaccount \
        --all-namespaces \
    | grep dashboard

    >   NAMESPACE                NAME                                             SECRETS   AGE
    >   ....
    >   kubernetes-dashboard     default                                          0         43m
    >   kubernetes-dashboard     kubernetes-dashboard                             0         43m
    >   ....


    kubectl \
        --kubeconfig "${workclusterconf:?}" \
        get clusterrolebinding \
        --all-namespaces \
    | grep dashboard

    >   NAME                                                   ROLE                                                                               AGE
    >   ....
    >   kubernetes-dashboard-metrics                           ClusterRole/kubernetes-dashboard-metrics                                           45m
    >   ....


# -----------------------------------------------------
# Create the service account and role binding.
#[root@bootstrap]

    kubectl \
        --kubeconfig "${workclusterconf:?}" \
        create serviceaccount \
            dashboard-admin \
                --namespace kube-system

    >   serviceaccount/dashboard-admin created

    kubectl \
        --kubeconfig "${workclusterconf:?}" \
        create clusterrolebinding \
            dashboard-admin \
                --clusterrole=cluster-admin \
                --serviceaccount=kube-system:dashboard-admin

    >   clusterrolebinding.rbac.authorization.k8s.io/dashboard-admin created


# -----------------------------------------------------
# Get the token associated with the 'dashboard-admin' service account.
#[root@bootstrap]

    kubectl \
        --kubeconfig "${workclusterconf:?}" \
        get serviceaccount \
            --all-namespaces \
    | grep 'dashboard'

    >   kube-system              dashboard-admin                                  0         7m57s
    >   kubernetes-dashboard     default                                          0         57m
    >   kubernetes-dashboard     kubernetes-dashboard                             0         57m


    kubectl \
        --kubeconfig "${workclusterconf:?}" \
        get secret \
            --all-namespaces \
    | grep 'dashboard'

    >   kubernetes-dashboard     kubernetes-dashboard-certs                                     Opaque                          0      81m
    >   kubernetes-dashboard     kubernetes-dashboard-csrf                                      Opaque                          1      81m
    >   kubernetes-dashboard     kubernetes-dashboard-key-holder                                Opaque                          2      81m
    >   kubernetes-dashboard     sh.helm.release.v1.kubernetes-dashboard.v1                     helm.sh/release.v1              1      81m
    >   monitoring-system        sh.helm.release.v1.kube-prometheus-stack-dashboards.v1         helm.sh/release.v1              1      81m
    >   monitoring-system        sh.helm.release.v1.loki-stack-dashboards.v1                    helm.sh/release.v1              1      81m


    #
    # Not quite what ChatGPT suggested ...
    #
    # This might be the cause ?
    # https://artifacthub.io/packages/helm/k8s-dashboard/kubernetes-dashboard#breaking-change
    #
    #   ! Breaking change !
    #   Starting from the release v7 for the Helm chart and v3 for the Kubernetes Dashboard, underlying architecture has changed, and it requires a clean installation.
    #   Kubernetes Dashboard now requires cert-manager and nginx-ingress-controller to work properly.
    #



