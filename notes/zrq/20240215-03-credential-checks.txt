#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#
# AIMetrics: []
#

    Target:

        A test to check the user's credentials at the start of a deployment.
        Fix for issue #1282.
        https://github.com/wfau/gaia-dmp/issues/1282

    Result:

        Success.
        Working test to check that the user's credentials match the target cloud.


# -----------------------------------------------------
# Test code to check credentials.
#[root@ansibler]

    #
    # Issue a token to get the current project ID.
    openstack \
        --os-cloud "${cloudname}" \
        token issue \
            --format json

    >   {
    >     "expires": "2024-02-15T21:04:04+0000",
    >     "id": "gAAA.......ibPGhx",
    >     "project_id": "e918a13fed2648758175a15fac083569",
    >     "user_id": "5fa0c97a6dd14e01a3c7d91dad5c6b17"
    >   }


    openstack \
        --os-cloud "${cloudname}" \
        token issue \
            --format json \
    | jq -r '.project_id'

    >   e918a13fed2648758175a15fac083569


    #
    # Use the project ID from the token to get the project details.
    projectid=$(
        openstack \
            --os-cloud "${cloudname}" \
            token issue \
                --format json \
        | jq -r '.project_id'
        )

    openstack \
        --os-cloud "${cloudname}" \
        project show \
            --format json \
            "${projectid}"

    >   {
    >     "description": "IRIS@Cambridge Gaia-Blue",
    >     "domain_id": "default",
    >     "enabled": true,
    >     "id": "e918a13fed2648758175a15fac083569",
    >     "is_domain": false,
    >     "name": "iris-gaia-blue",
    >     "options": {},
    >     "parent_id": "default",
    >     "tags": []
    >   }


    #
    # Get the project (cloud) name.
    openstack \
        --os-cloud "${cloudname}" \
        project show \
            --format json \
            "${projectid}" \
    | jq -r '.name'

    >   iris-gaia-blue

    #
    # Get the project (cloud) name.
    projectname=$(
        openstack \
            --os-cloud "${cloudname}" \
            project show \
                --format json \
                "${projectid}" \
        | jq -r '.name'
        )

# -----------------------------------------------------
# Wrap it as a function.
#[root@ansibler]

    getprojectname()
        {
        local cloudname=${1:-'cloud name required'}
        local projectid

        projectid=$(
            openstack \
                --os-cloud "${cloudname}" \
                token issue \
                    --format json \
            | jq -r '.project_id'
            )

        openstack \
            --os-cloud "${cloudname}" \
            project show \
                --format json \
                "${projectid}" \
        | jq -r '.name'

        }

    checkcredentials()
        {
        local cloudname=${1:-'cloud name required'}
        local projectname

        echo ""
        echo "Checking credentials for [${cloudname}]"

        projectname=$(
            getprojectname "${cloudname}"
            )

        if [ "${cloudname}" == "${projectname}" ]
        then
            echo "PASS credentials match [${projectname}]"
        else
            echo "FAIL credentials match do not match [${cloudname}][${projectname}]"
        fi

        }


# -----------------------------------------------------
# Launch a new container and check our cloud credentials match.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    ansi-client 'blue'

        source /deployments/openstack/bin/credential-tools.sh

        checkcredentials "iris-gaia-red"
        checkcredentials "iris-gaia-green"
        checkcredentials "iris-gaia-blue"
        checkcredentials "iris-gaia-data"

    >   Checking credentials for [iris-gaia-red]
    >   PASS credentials match [iris-gaia-red]

    >   Checking credentials for [iris-gaia-green]
    >   PASS credentials match [iris-gaia-green]

    >   Checking credentials for [iris-gaia-blue]
    >   PASS credentials match [iris-gaia-blue]

    >   Checking credentials for [iris-gaia-data]
    >   PASS credentials match [iris-gaia-data]


# -----------------------------------------------------
# -----------------------------------------------------
# Deliberately corrupt our clouds file.
#[user@desktop]

    cp "${HOME}/clouds.yaml" "${HOME}/clouds.good"

    gedit "${HOME}/clouds.yaml" &

        #
        # Copy green credentials into config for red.
        #

# -----------------------------------------------------
# Launch a new container and check our cloud credentials match.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    ansi-client 'blue'

        source /deployments/openstack/bin/credential-tools.sh

        checkcredentials "iris-gaia-red"
        checkcredentials "iris-gaia-green"
        checkcredentials "iris-gaia-blue"
        checkcredentials "iris-gaia-data"

    >   Checking credentials for [iris-gaia-red]
    >   FAIL credentials match do not match [iris-gaia-red][iris-gaia-green]

    >   Checking credentials for [iris-gaia-green]
    >   PASS credentials match [iris-gaia-green]

    >   Checking credentials for [iris-gaia-blue]
    >   PASS credentials match [iris-gaia-blue]

    >   Checking credentials for [iris-gaia-data]
    >   PASS credentials match [iris-gaia-data]


# -----------------------------------------------------
# -----------------------------------------------------
# Deliberately corrupt our clouds file.
#[user@desktop]

    cp "${HOME}/clouds.yaml" "${HOME}/clouds.good"

    gedit "${HOME}/clouds.yaml" &

        #
        # Restore red credentials.
        # Corrupt the credential ID for green.
        #

# -----------------------------------------------------
# Launch a new container and check our cloud credentials match.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    ansi-client 'blue'

        source /deployments/openstack/bin/credential-tools.sh

        checkcredentials "iris-gaia-red"
        checkcredentials "iris-gaia-green"
        checkcredentials "iris-gaia-blue"
        checkcredentials "iris-gaia-data"

    >   Checking credentials for [iris-gaia-red]
    >   PASS credentials match [iris-gaia-red]

    >   Checking credentials for [iris-gaia-green]
    >   Could not find Application Credential: 5da9cd1dce0743db81418573b1b95ae. (HTTP 404) (Request-ID: req-6b42755c-6289-423a-a4a8-591d17532478)
    >   Could not find Application Credential: 5da9cd1dce0743db81418573b1b95ae. (HTTP 404) (Request-ID: req-bc8b04e1-4677-4ca6-8085-d03417b46368)
    >   FAIL credentials match do not match [iris-gaia-green][]

    >   Checking credentials for [iris-gaia-blue]
    >   PASS credentials match [iris-gaia-blue]

    >   Checking credentials for [iris-gaia-data]
    >   PASS credentials match [iris-gaia-data]


# -----------------------------------------------------
# -----------------------------------------------------
# Deliberately corrupt our clouds file.
#[user@desktop]

    cp "${HOME}/clouds.yaml" "${HOME}/clouds.good"

    gedit "${HOME}/clouds.yaml" &

        #
        # Restore green credentials.
        # Corrupt the credential secret for blue.
        #

# -----------------------------------------------------
# Launch a new container and check our cloud credentials match.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    ansi-client 'blue'

        source /deployments/openstack/bin/credential-tools.sh

        checkcredentials "iris-gaia-red"
        checkcredentials "iris-gaia-green"
        checkcredentials "iris-gaia-blue"
        checkcredentials "iris-gaia-data"

    >   Checking credentials for [iris-gaia-red]
    >   PASS credentials match [iris-gaia-red]

    >   Checking credentials for [iris-gaia-green]
    >   PASS credentials match [iris-gaia-green]

    >   Checking credentials for [iris-gaia-blue]
    >   The request you have made requires authentication. (HTTP 401) (Request-ID: req-e93d73dd-a2ec-40ff-b146-3a434e0143cb)
    >   The request you have made requires authentication. (HTTP 401) (Request-ID: req-09c3d7f7-314a-46df-bb81-5c247ac56b7b)
    >   FAIL credentials match do not match [iris-gaia-blue][]

    >   Checking credentials for [iris-gaia-data]
    >   PASS credentials match [iris-gaia-data]

    #
    # In the process I discovered it only checks the first 72 characters of the secret.
    # Any changes after character 72 are ignored.
    # Go figure.
    #


# -----------------------------------------------------
# Launch a new container and check the shell exit works.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    ansi-client 'blue'

    source /deployments/hadoop-yarn/bin/deploy.sh

    >   Checking credentials for [iris-gaia-blue]
    >   The request you have made requires authentication. (HTTP 401) (Request-ID: req-e2e9f27a-d71c-49b1-adc3-7cb21c22033e)
    >   The request you have made requires authentication. (HTTP 401) (Request-ID: req-19ac1228-19dc-49ff-8add-372fc241ed0b)
    >   FAIL credentials match do not match [iris-gaia-blue][]

    #
    # Nice :-)
    #

