#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Test a full deployment on the Arcus cloud.
        Downgrade to Fedora 31 to avoid compatibility issues with iPython and Python-3.8.

    Result:

        Success

          - HealpixSourceCounts PASS
          - MeanProperMotions   PASS
          - RandomForest        FAIL (CorruptedNoteException)


# -----------------------------------------------------
# Change the Fedora version
#[user@desktop]

    gedit "${AGLAIS_CODE:?}/deployments/hadoop-yarn/ansible/config/zeppelin-27.45-spark-6.27.45.yml

        # VM image
    -   baseimage: 'Fedora-33-1.2'
    +   baseimage: 'Fedora-31-1.9'


# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name ansibler \
        --hostname ansibler \
        --publish 3000:3000 \
        --publish 8088:8088 \
        --env "SSH_AUTH_SOCK=/mnt/ssh_auth_sock" \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw,z" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE:?}/deployments:/deployments:ro,z" \
        atolmis/ansible-client:2021.08.25 \
        bash


# -----------------------------------------------------
# Set the cloud and configuration.
#[root@ansibler]

    cloudname=iris-gaia-red

    configname=zeppelin-27.45-spark-6.27.45

# -----------------------------------------------------
# Delete everything.
#[root@ansibler]

    time \
        /deployments/openstack/bin/delete-all.sh \
            "${cloudname:?}" \


# -----------------------------------------------------
# Create everything, using the new config.
# Using 'prod' to skip the built-in tests.
#[root@ansibler]

    time \
        /deployments/hadoop-yarn/bin/create-all.sh \
            "${cloudname:?}" \
            "${configname:?}" \
            'prod' \
        | tee /tmp/create-all.log


    >   real    40m42.726s
    >   user    12m16.747s
    >   sys     4m29.289s


# -----------------------------------------------------
# Check the deployment status.
#[root@ansibler]

    cat '/tmp/aglais-status.yml'

    >   aglais:
    >     status:
    >       deployment:
    >         type: hadoop-yarn
    >         conf: zeppelin-27.45-spark-6.27.45
    >         name: iris-gaia-red-20220121
    >         date: 20220121T021308
    >     spec:
    >       openstack:
    >         cloud:
    >           base: arcus
    >           name: iris-gaia-red


# -----------------------------------------------------
# Add the Zeppelin user accounts.
#[root@ansibler]

    ssh zeppelin

        pushd "${HOME}"
        ln -s "zeppelin-0.10.0-bin-all" "zeppelin"

            pushd "zeppelin"

                # Manual edit to add names and passwords
                vi conf/shiro.ini

                # Restart Zeppelin for the changes to take.
                bin/zeppelin-daemon.sh restart

            popd
        popd
    exit

    >   Zeppelin stop                                              [  OK  ]
    >   Zeppelin start                                             [  OK  ]


# -----------------------------------------------------
# -----------------------------------------------------
# Setup a SSH tunnel SOCKS proxy.
# https://www.digitalocean.com/community/tutorials/how-to-route-web-traffic-securely-without-a-vpn-using-a-socks-tunnel
# Running 'htop' on the Zeppelin node to keep the connection alive.
#[user@desktop]

    podman exec \
        --tty \
        --interactive \
        ansibler \
            bash -c \
            '
            ssh \
                -t \
                -D "3000"  \
                zeppelin \
                    "
                    htop
                    "
            '

    >   ....
    >   ....


# -----------------------------------------------------
# Login to the Zeppelin UI using FoxyProxy SOCKS proxy.
#[user@desktop]

    firefox \
        'http://zeppelin:8080/' \
        'http://master01:8088/cluster' \
        'http://monitor:3000/login' \
        &

    firefox \
        'http://monitor:3000/datasources/new' \
        'http://monitor:3000/dashboard/import' \
        'http://monitor:3000/dashboard/import' \
        &

        Create our Prometheus data source.
        http://monitor:3000/datasources/new

            URL: http://monitor:9090/
            scrape: 1s

        Import our dashboards from local disc.
        http://monitor:3000/dashboard/import

            deployments/common/grafana/20210705-02-grafana-dash.json
            deployments/common/grafana/node-exporter-v20201010-1633446087511.json

            http://monitor:3000/d/34S3C8k7z/my-first-dash&refresh=5s
            http://monitor:3000/d/xfpJB9FGz/1-node-exporter-for-prometheus-dashboard-en-v20201010?orgId=1&refresh=5s


# -----------------------------------------------------
# Check the notebooks are loaded.
#[root@ansibler]

    ssh zeppelin

        pushd /home/fedora/zeppelin

            ls -al notebook

        popd
    exit

    >   drwxrwxrwx.  9 root   root         20 Jan 10 06:22  .
    >   drwxr-xr-x. 14 fedora fedora     4096 Jan 21 02:55  ..
    >   drwxr-xr-x.  2 fedora fedora        7 Jan 20 19:33  AglaisPublicExamples
    >   -rwxr-xr-x.  1 fedora fedora   895331 Jan  2 20:09 'Bulk data loading_2GS4YGH4S.zpln'
    >   -rwxr-xr-x.  1 fedora fedora   795339 Jan  2 20:09 'Bulk data loading by source ID_2GSDXABF6.zpln'
    >   -rwxr-xr-x.  1 fedora fedora   251883 Jan  2 20:09  DR3-array-ingest-tests_2GQE5ZPW1.zpln
    >   drwxr-xr-x.  5 fedora fedora        3 Jan  3 10:39  Experiments
    >   drwxrwxr-x.  7 fedora fedora        9 Jan  5 15:51  .git
    >   -rwxr-xr-x.  1 fedora fedora   778144 Jan  2 20:09 'Good astrometric solutions via ML Random Forrest classifier_2GSEFDUTU.zpln'
    >   -rwxr-xr-x.  1 fedora fedora   166783 Jan  2 20:09 'Good astrometric solutions via Random Forrest classifier_2GRX8QP8J.zpln'
    >   -rwxr-xr-x.  1 fedora fedora    12157 Jan  2 20:09 'Histogram plot_2GR6T52NA.zpln'
    >   -rwxr-xr-x.  1 fedora fedora    38832 Jan  2 20:09 'Kounkel and Covey groups demo_2GQ4VB9YP.zpln'
    >   -rwxr-xr-x.  1 fedora fedora    27183 Jan  2 20:09 'Kounkel & Covey Spark (Vectorized)_2GS5K9R39.zpln'
    >   -rwxr-xr-x.  1 fedora fedora    39280 Jan  2 20:09 'Kounkel & Covey - UDF_2GSNDGD1T.zpln'
    >   -rwxr-xr-x.  1 fedora fedora   625746 Jan  2 20:09 'Mean proper motions over the sky_2GSFCR1ZK.zpln'
    >   -rwxr-xr-x.  1 fedora fedora 11495307 Jan  2 20:09  ML_cuts_2GS88QBR7.zpln
    >   drwxr-xr-x.  2 fedora fedora        4 Dec 31 16:06 'Python Tutorial'
    >   -rwxr-xr-x.  1 fedora fedora  1006107 Jan  2 20:09  QC_cuts_dev_2GRTNDM2Y.zpln
    >   drwxr-xr-x.  2 fedora fedora        9 Dec 31 16:06 'Spark Tutorial'
    >   drwxrwxr-x.  2 fedora fedora       12 Jan  5 16:44  tmp
    >   drwxrwxr-x.  3 fedora fedora        2 Jan  5 15:51 '~Trash'
    >   -rwxr-xr-x.  1 fedora fedora  1398485 Jan  2 20:09  WD_detection_dev_2GRJFFQ39.zpln


# -----------------------------------------------------
# Add our secret function to the ansibler container.
#[root@ansibler]

    # TODO Move this into the Ansible setup.
    # TODO Move our secrets onto our infra-ops server.

    if [ ! -e "${HOME}/bin" ]
    then
        mkdir "${HOME}/bin"
    fi

    cat > "${HOME}/bin/secret" << 'EOF'
ssh -n \
    'secretserver' \
    "bin/secret '${1}'"
EOF

    chmod u+x "${HOME}/bin/secret"

    if [ ! -e "${HOME}/.ssh" ]
    then
        mkdir "${HOME}/.ssh"
    fi

    cat >> "${HOME}/.ssh/config" << 'EOF'
Host secretserver
  User     Zarquan
  Hostname data.metagrid.co.uk
  PubkeyAcceptedKeyTypes +ssh-rsa
EOF

    ssh-keyscan 'data.metagrid.co.uk' >> "${HOME}/.ssh/known_hosts"

    secret frog

    >   Green Frog


# -----------------------------------------------------
# Get the public IP address of our Zeppelin node.
#[root@ansibler]

    cloudname=$(
        yq eval \
            '.aglais.spec.openstack.cloud.name' \
            '/tmp/aglais-status.yml'
        )

    deployname=$(
        yq eval \
            '.aglais.status.deployment.name' \
            '/tmp/aglais-status.yml'
        )

    zeppelinid=$(
        openstack \
            --os-cloud "${cloudname:?}" \
            server list \
                --format json \
        | jq -r '.[] | select(.Name == "'${deployname:?}'-zeppelin") | .ID'
        )

    zeppelinip=$(
        openstack \
            --os-cloud "${cloudname:?}" \
            server show \
                --format json \
                "${zeppelinid:?}" \
        | jq -r ".addresses | .\"${deployname}-internal-network\" | .[1]"
        )

cat << EOF
Zeppelin ID [${zeppelinid:?}]
Zeppelin IP [${zeppelinip:?}]
EOF

    >   Zeppelin ID [05faf2df-af34-4a2b-ac08-80a821cf8972]
    >   Zeppelin IP [128.232.222.106]


# -----------------------------------------------------
# Update our DuckDNS record.
#[root@ansibler]

    duckhost=aglais-dev
    duckipv4=${zeppelinip:?}
    ducktoken=$(secret 'aglais.duckdns.token')

    curl "https://www.duckdns.org/update/${duckhost:?}/${ducktoken:?}/${duckipv4:?}"

    >   OK


# -----------------------------------------------------
# Add bind-utils to the client.
# https://github.com/wfau/atolmis/issues/17
#[root@ansibler]

    dnf -y install bind-utils

    >   ....
    >   Installed:
    >     bind-libs-32:9.16.21-1.fc34.x86_64
    >     bind-license-32:9.16.21-1.fc34.noarch
    >     bind-utils-32:9.16.21-1.fc34.x86_64


# -----------------------------------------------------
# Check the DuckDNS record.
#[root@ansibler]

    dig "${duckhost:?}.duckdns.org"

    >   ;; ANSWER SECTION:
    >   aglais-dev.duckdns.org.	60	IN	A	128.232.222.106


# -----------------------------------------------------
# -----------------------------------------------------
# Check the 'aglais.uk' public DNS records.
#[root@ansibler]

    dig "dev.aglais.uk"

    >   ;; ANSWER SECTION:
    >   dev.aglais.uk.		600	IN	CNAME	aglais-dev.duckdns.org.
    >   aglais-dev.duckdns.org.	45	IN	A	128.232.222.106


# -----------------------------------------------------
# -----------------------------------------------------
# Load our tests scripts.
#[root@ansibler]

    zeppelinhost=dev.aglais.uk
    zeppelinport=8080
    zeppelinurl=http://${zeppelinhost:?}:${zeppelinport:?}

    source /deployments/zeppelin/test/bin/rest-tests.sh


# -----------------------------------------------------
# Login to Zeppelin as a normal user.
#[root@ansibler]

    gaiauser=$(secret aglais.zeppelin.gaiauser)
    gaiapass=$(secret aglais.zeppelin.gaiapass)

    zeplogin "${gaiauser:?}" "${gaiapass}"

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "gaiauser",
    >       "ticket": "7eaecb10-9064-45fd-a240-1c96fe65e57c",
    >       "roles": "[\"user\"]"
    >     }
    >   }


# -----------------------------------------------------
# Run the SetUp notebook.
#[root@ansibler]

    noteid=2GP53P3PZ

    zepnbclear     ${noteid}
    zepnbexecstep  ${noteid}
    zepnbstatus    ${noteid}
    zepnbtotaltime ${noteid}


    >   {
    >     "status": "OK",
    >     "message": ""
    >   }

    >   Para [20210504-130917_57061499][null]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20210504-131126_1544574772][Catalogue structure definitions]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20210504-131319_1186301617][Utility function definitions]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20210504-131439_625331903][Set up the catalogues on the platform]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20210504-132955_1641890430][Show details of databases and tables]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20210504-141425_1480464936][Check location on disk for main catalogue table from metastore]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20210521-084938_875368697][null]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "paragraphs": [],
    >       "name": "SetUp",
    >       "id": "2GP53P3PZ",
    >       "defaultInterpreterGroup": "spark",
    >       "version": "0.10.0",
    >       "noteParams": {},
    >       "noteForms": {},
    >       "angularObjects": {},
    >       "config": {
    >         "isZeppelinNotebookCronEnable": false
    >       },
    >       "info": {},
    >       "path": "/AglaisPublicExamples/SetUp"
    >     }
    >   }

    >   0:0:39


# -----------------------------------------------------
# Run the HealpixSourceCounts notebook
#[root@ansibler]

    noteid=2GQ6WMH9W

    zepnbclear     ${noteid}
    zepnbexecstep  ${noteid}
    zepnbstatus    ${noteid}
    zepnbtotaltime ${noteid}

    >   {
    >     "status": "OK",
    >     "message": ""
    >   }

    >   Para [20210507-084613_357121151][null]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20200826-105718_1698521515][Set the resolution level and define the query]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20200826-110030_2095441495][Plot up the results]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20210507-091244_670006530][Further reading and resources]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20200826-110146_414730471][null]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20211029-084414_730906497][null]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "paragraphs": [],
    >       "name": "Source counts over the sky",
    >       "id": "2GQ6WMH9W",
    >       "defaultInterpreterGroup": "spark",
    >       "version": "0.10.0",
    >       "noteParams": {},
    >       "noteForms": {},
    >       "angularObjects": {},
    >       "config": {
    >         "isZeppelinNotebookCronEnable": false
    >       },
    >       "info": {},
    >       "path": "/AglaisPublicExamples/Source counts over the sky"
    >     }
    >   }

    >   0:0:35


# -----------------------------------------------------
# Run the MeanProperMotions notebook
#[root@ansibler]

    noteid=2GSNYBDWB

    zepnbclear     ${noteid}
    zepnbexecstep  ${noteid}
    zepnbstatus    ${noteid}
    zepnbtotaltime ${noteid}

    >   {
    >     "status": "OK",
    >     "message": ""
    >   }

    >   Para [20210510-111756_391695716][Set HEALPix resolution]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20210510-111538_106023214][Define a data frame by SQL query]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20210510-111939_1386609632][Mean RA proper motion plot]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20210510-111943_814907111][Mean Dec proper motion plot]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20210510-111956_1822284967][Further reading and resources]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20210510-132447_1514402898][Tidy-up]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]
    >   
    >   Para [20211207-132335_689637194][null]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "paragraphs": [],
    >       "name": "Mean proper motions over the sky",
    >       "id": "2GSNYBDWB",
    >       "defaultInterpreterGroup": "spark",
    >       "version": "0.10.0",
    >       "noteParams": {},
    >       "noteForms": {},
    >       "angularObjects": {},
    >       "config": {
    >         "isZeppelinNotebookCronEnable": false
    >       },
    >       "info": {},
    >       "path": "/AglaisPublicExamples/Mean proper motions over the sky"
    >     }
    >   }

    >   0:0:36


# -----------------------------------------------------
# Run the RandomForest notebook.
#[root@ansibler]

    noteid=2GQDKZ59J

    zepnbclear     ${noteid}
    zepnbexecstep  ${noteid}
    zepnbstatus    ${noteid}
    zepnbtotaltime ${noteid}

    >   {
    >     "exception": "CorruptedNoteException",
    >     "message": "noteId: 2GQDKZ59J - Fail to parse note json: ",
    >     ....
    >     ....
    >   }




