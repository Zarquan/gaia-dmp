#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#


    Target:
    
        Test the configurations work. 

    Result:
    
        Work in progress ..


# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name ansibler \
        --hostname ansibler \
        --publish 3000:3000 \
        --publish 8088:8088 \
        --env "SSH_AUTH_SOCK=/mnt/ssh_auth_sock" \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw,z" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE:?}/deployments:/deployments:ro,z" \
        atolmis/ansible-client:2021.08.25 \
        bash


# -----------------------------------------------------
# Set the target cloud.
#[root@ansibler]

    # Using prod as dev because Dennis is using dev as prod.

    cloudname=gaia-prod


# -----------------------------------------------------
# Delete everything.
#[root@ansibler]

    time \
        /deployments/openstack/bin/delete-all.sh \
            "${cloudname:?}"

    >   real    3m18.395s
    >   user    1m8.670s
    >   sys     0m8.713s


# -----------------------------------------------------
# Create everything, using the new config.
#[root@ansibler]

    time \
        /deployments/hadoop-yarn/bin/create-all.sh \
            "${cloudname:?}" \
            'cclake-large-06'

    >   real    34m33.377s
    >   user    11m11.382s
    >   sys     4m28.651s


# -----------------------------------------------------
# Check the deployment status.
#[root@ansibler]

    cat '/tmp/aglais-status.yml'

    >       aglais:
    >         status:
    >           deployment:
    >             type: hadoop-yarn
    >             conf: cclake-large-06
    >             name: gaia-prod-20211005
    >             date: 20211005T102022
    >         spec:
    >           openstack:
    >             cloud: gaia-prod


# -----------------------------------------------------
# Add the Zeppelin user accounts.
#[root@ansibler]

    ssh zeppelin

        pushd "${HOME}"
        ln -s "zeppelin-0.8.2-bin-all" "zeppelin"

            pushd "zeppelin"

                # Manual edit to add names and passwords
                vi conf/shiro.ini

                # Restart Zeppelin for the changes to take.
                bin/zeppelin-daemon.sh restart

            popd
        popd
    exit

    >   Zeppelin stop                                              [  OK  ]
    >   Zeppelin start                                             [  OK  ]


# -----------------------------------------------------
# Add the notebooks from github.
#[root@ansibler]

    ssh zeppelin

        pushd /home/fedora/zeppelin

            mv -b notebook \
               notebook-origin

	        git clone git@github.com:wfau/aglais-notebooks.git notebook

	        bin/zeppelin-daemon.sh restart

        popd
    exit

    >   Zeppelin stop                                              [  OK  ]
    >   Zeppelin start                                             [  OK  ]


# -----------------------------------------------------
# Add our secret function to the ansibler container.
#[root@ansibler]

    # TODO Move this into the Ansible setup.
    # TODO Move our secrets onto our infra-ops server.

    if [ ! -e "${HOME}/bin" ]
    then
        mkdir "${HOME}/bin"
    fi

    cat > "${HOME}/bin/secret" << 'EOF'
ssh -n \
    'secretserver' \
    "bin/secret '${1}'"
EOF

    chmod u+x "${HOME}/bin/secret"

    if [ ! -e "${HOME}/.ssh" ]
    then
        mkdir "${HOME}/.ssh"
    fi

    cat >> "${HOME}/.ssh/config" << 'EOF'
Host secretserver
  User     Zarquan
  Hostname data.metagrid.co.uk
  PubkeyAcceptedKeyTypes +ssh-rsa
EOF

    ssh-keyscan 'data.metagrid.co.uk' >> "${HOME}/.ssh/known_hosts"

    secret frog

    >   Green Frog


# -----------------------------------------------------
# Get the public IP address of our Zeppelin node.
#[root@ansibler]

    deployname=$(
        yq eval \
            '.aglais.status.deployment.name' \
            '/tmp/aglais-status.yml'
        )

    zeppelinid=$(
        openstack \
            --os-cloud "${cloudname:?}" \
            server list \
                --format json \
        | jq -r '.[] | select(.Name == "'${deployname:?}'-zeppelin") | .ID'
        )

    zeppelinip=$(
        openstack \
            --os-cloud "${cloudname:?}" \
            server show \
                --format json \
                "${zeppelinid:?}" \
        | jq -r ".addresses | .\"${deployname}-internal-network\" | .[1]"
        )

cat << EOF
Zeppelin ID [${zeppelinid:?}]
Zeppelin IP [${zeppelinip:?}]
EOF

    >   Zeppelin ID [503c570b-de51-45cc-be78-15d82c3dcd80]
    >   Zeppelin IP [128.232.227.212]


# -----------------------------------------------------
# Update our DuckDNS record.
#[root@ansibler]

    # Using prod as dev because Dennis is using dev as prod.

    ducktoken=$(secret 'aglais.duckdns.token')    
    duckipv4=${zeppelinip:?}
    duckhost=aglais-prod

    curl --verbose "https://www.duckdns.org/update/${duckhost:?}/${ducktoken:?}/${duckipv4:?}"
    
    > GET /update/aglais-prod/....
    > Host: www.duckdns.org
    > user-agent: curl/7.76.1
    > accept: */*
    > 

    < HTTP/2 200 
    < date: Tue, 05 Oct 2021 13:33:14 GMT
    < server: nginx/1.20.0
    < x-clacks-overhead: GNU Terry Pratchett
    < x-frame-options: DENY


# -----------------------------------------------------
# Check the DNS record.
#[root@ansibler]

    dig "${duckhost:?}.duckdns.org"

    >   ....
    >   ;; ANSWER SECTION:
    >   aglais-prod.duckdns.org. 60	IN	A	128.232.227.212
    >   ....


    dig "zeppelin.${cloudname}.aglais.uk"

    >   ....
    >   ;; ANSWER SECTION:
    >   zeppelin.gaia-prod.aglais.uk. 600 IN	CNAME	aglais-prod.duckdns.org.
    >   aglais-prod.duckdns.org. 42	IN	A	128.232.227.212
    >   ....


# -----------------------------------------------------
# -----------------------------------------------------
# Login to our Zeppelin node and generate a new interpreter.json file.
# TODO Convert this to an Ansible playbook.
#[root@ansibler]

    ssh zeppelin

        # Create a new list of interpreter bindings.
        find /home/fedora/zeppelin/notebook \
            -mindepth 1 \
            -maxdepth 1 \
            -type d \
            ! -name '.git' \
            -printf '%f\n' \
        | sed '
            1 i \
"interpreterBindings": {
        s/^\(.*\)$/"\1": ["spark", "md", "sh"]/
        $ ! s/^\(.*\)$/\1,/
        $ a \
},
            ' \
            | tee /tmp/bindings.json

    >   "interpreterBindings": {
    >   "2C35YU814": ["spark", "md", "sh"],
    >   "2EZ3MQG4S": ["spark", "md", "sh"],
    >   ....
    >   ....
    >   "2G9BXYCKP": ["spark", "md", "sh"],
    >   "2FF2VTAAM": ["spark", "md", "sh"]
    >   },


        # Replace the existing interpreter bindings.
        jq '
            del(.interpreterBindings[])
            ' \
        /home/fedora/zeppelin/conf/interpreter.json \
        | sed '
            /interpreterBindings/ {
                r /tmp/bindings.json
                d
                }
            ' \
        | jq '.' \
        | tee /tmp/interpreter-new.json

    >   ....
    >   ....


    # Replace the original interpreter.json
    mv /home/fedora/zeppelin/conf/interpreter.json \
       /home/fedora/zeppelin/conf/interpreter.origin

    cp /tmp/interpreter-new.json \
       /home/fedora/zeppelin/conf/interpreter.json

    # Restart Zeppelin to take effect
    /home/fedora/zeppelin/bin/zeppelin-daemon.sh restart

    exit

    >   Zeppelin stop                                              [  OK  ]
    >   Zeppelin start                                             [  OK  ]


# -----------------------------------------------------
# -----------------------------------------------------
# Setup a SSH tunnel SOCKS proxy.
# https://www.digitalocean.com/community/tutorials/how-to-route-web-traffic-securely-without-a-vpn-using-a-socks-tunnel
# Running 'htop' on the Zeppelin node to keep the connection alive.
#[user@desktop]

    podman exec \
        --tty \
        --interactive \
        ansibler \
            bash -c \
            '
            ssh \
                -t \
                -D "3000"  \
                zeppelin \
                    "
                    htop
                    "
            '


# -----------------------------------------------------
# -----------------------------------------------------
# Login to the Spark UI using Firefox.
# (*) using FoxyProxy Firefox plugin to select the SOCKS proxy for internal hostnames.
#[user@desktop]

    firefox --new-window 'http://master01:8088/cluster' &


# -----------------------------------------------------
# Login to Grafana using Firefox.
# (*) using FoxyProxy Firefox plugin to select the SOCKS proxy for internal hostnames.
#[user@desktop]

    firefox --new-window 'http://monitor:3000/login' &

        user: admin
        pass: admin


    # Set new password in the next page
        ########


# -----------------------------------------------------
# Add Prometheus Data Source
# From Stelios's notes

    # Click on button "Data Sources: Add your first data source"
    # Select Prometheus as the Data source
    # Set the url to: http://monitor:9090
    # Set the Scrape interval to 5s


# -----------------------------------------------------
# Add our dashboards from local JSON files.
#[user@desktop]

    deployments/common/grafana/20210705-02-grafana-dash.json
    deployments/common/grafana/node-exporter-v20201010-1633446087511.json

# -----------------------------------------------------
# -----------------------------------------------------
# Load our tests scripts.
#[root@ansibler]

    cloudname=gaia-prod

    zeppelinhost=zeppelin.${cloudname:?}.aglais.uk
    zeppelinport=8080
    zeppelinurl=http://${zeppelinhost:?}:${zeppelinport:?}

    source /deployments/zeppelin/test/bin/rest-tests.sh


# -----------------------------------------------------
# Login to Zeppelin as a normal user.
#[root@ansibler]

    gaiauser=$(secret aglais.zeppelin.gaiauser)
    gaiapass=$(secret aglais.zeppelin.gaiapass)

    zeplogin "${gaiauser:?}" "${gaiapass}"

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "gaiauser",
    >       "ticket": "....",
    >       "roles": "[\"user\"]"
    >     }
    >   }


# -----------------------------------------------------
# Run the SetUp notebook.
#[root@ansibler]

    noteid=2G7GZKWUH

    zepnbclear    ${noteid}
    zepnbexecstep ${noteid}

    zepnbstatus    ${noteid}
    zepnbtotaltime ${noteid}

    >   {
    >     "status": "OK",
    >     "message": ""
    >   }

    >   Para [20210504-130917_57061499][null]
    >   {
    >     "status": "OK",
    >     "body": {
    >       "code": "SUCCESS"
    >     }
    >   }
    >   Result [SUCCESS]

    >   Para [20210504-131126_1544574772][Catalogue structure definitions]
    >   {
    >     "status": "INTERNAL_SERVER_ERROR",
    >     "body": {
    >       "code": "ERROR"
    >     }
    >   }
    >   Result [ERROR]
    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "paragraphs": [],
    >       "name": "/AglaisPublicExamples/SetUp",
    >       "id": "2G7GZKWUH",
    >       "noteParams": {},
    >       "noteForms": {},
    >       "angularObjects": {
    >         "md:shared_process": [],
    >         "spark:dcr:": []
    >       },
    >       "config": {
    >         "isZeppelinNotebookCronEnable": false
    >       },
    >       "info": {}
    >     }
    >   }
    >   -1510:16:37

    #
    # Check the error message in the notebook.
    # Fixed on the live server for testing ..
    # Changes replicated in config.
    #

    >   java.lang.RuntimeException: Invalid maximum heap size: -Xmx39936 #
    >   Error: Could not create the Java Virtual Machine.
    >   Error: A fatal exception has occurred. Program will exit.
    

        -   spark.driver.memory                  39936
        +   spark.driver.memory                 39936M

        -   spark.executor.memory                 7168
        +   spark.executor.memory                7168M


    >   java.lang.IllegalArgumentException: requirement failed: initial executor number 30 must between min executor number 1 and max executor number 11


        -   spark.executor.instances                30
        +   #spark.executor.instances               30

            ....
            ....

            spark.dynamicAllocation.minExecutors      1
        -   spark.dynamicAllocation.maxExecutors     11
        +   spark.dynamicAllocation.maxExecutors     30
        -   spark.dynamicAllocation.initialExecutors  3
        +   spark.dynamicAllocation.initialExecutors 15


    >   : org.apache.spark.SparkException: Job aborted due to stage failure: Total size of serialized results of 7 tasks (16.3 KB) is bigger than spark.driver.maxResultSize (16.0 KB)




# -----------------------------------------------------
# Run the SetUp notebook.
#[root@ansibler]

    noteid=2G7GZKWUH

    zepnbclear    ${noteid}
    zepnbexecstep ${noteid}

    zepnbstatus    ${noteid}
    zepnbtotaltime ${noteid}


    >   {
    >     "status": "OK",
    >     "message": ""
    >   }

    >   ....
    >   ....

    >   0:0:32


# -----------------------------------------------------
# Run the HealpixSourceCounts notebook
#[root@ansibler]

    noteid=2FKJ25GVF

    zepnbclear    ${noteid}
    zepnbexecstep ${noteid}

    zepnbstatus    ${noteid}
    zepnbtotaltime ${noteid}

    >   ....
    >   ....


# -----------------------------------------------------
# Run the MeanProperMotions notebook
#[root@ansibler]

    noteid=2G748GZSW

    zepnbclear    ${noteid}
    zepnbexecstep ${noteid}

    zepnbstatus    ${noteid}
    zepnbtotaltime ${noteid}

    >   0:0:24


# -----------------------------------------------------
# Run the RandomForest notebook.
#[root@ansibler]

    noteid=2G5NU6HTK

    zepnbclear    ${noteid}
    zepnbexecstep ${noteid}

    zepnbstatus    ${noteid}
    zepnbtotaltime ${noteid}

    >   0:8:13

