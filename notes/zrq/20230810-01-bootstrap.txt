#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2023, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#
# AIMetrics: []
#


    Target:

        Figure out why the Kubernetes cluster deployment is failing.
        Need to track down where to look for error messages.

    Result:

        Work in progress ...


# -----------------------------------------------------
# Check which platform is live.
#[user@desktop]

    ssh fedora@live.gaia-dmp.uk \
        '
        date
        hostname
        '

    >   Thu 10 Aug 04:26:28 UTC 2023
    >   iris-gaia-green-20230308-zeppelin


# -----------------------------------------------------
# Create our client container.
#[user@desktop]

    agclient blue

    >   ....
    >   ....


# -----------------------------------------------------
# Delete and deploy everything.
#[root@ansibler]

    /deployments/openstack/bin/delete-all.sh \
        "${cloudname:?}"

    ansible-playbook \
        --inventory 'bootstrap,' \
        '/deployments/cluster-api/bootstrap/ansible/00-create-all.yml'

    >   ....
    >   ....


# -----------------------------------------------------
# Login to our bootstrap node as root.
#[root@ansibler]

    ssh root@bootstrap

    source loadconfig

cat << EOF
kindclustername [${kindclustername}]
kindclusterconf [${kindclusterconf}]
workclustername [${workclustername}]
workclusterconf [${workclusterconf}]
EOF

    >   kindclustername [iris-gaia-blue-20230810-kind-cluster]
    >   kindclusterconf [/opt/aglais/iris-gaia-blue-20230810-kind-cluster.yml]
    >   workclustername [iris-gaia-blue-20230810-work-cluster]
    >   workclusterconf [/opt/aglais/iris-gaia-blue-20230810-work-cluster.yml]


# -----------------------------------------------------
# Check the cluster status.
#[root@bootstrap]

    kubectl \
        --kubeconfig "${kindclusterconf:?}" \
        get OpenStackClusters

    >   NAME                                   CLUSTER                                READY   NETWORK   SUBNET   BASTION IP   AGE
    >   iris-gaia-blue-20230810-work-cluster   iris-gaia-blue-20230810-work-cluster                                           2m7s


# -----------------------------------------------------
# Check the addon-provider logs.
#[root@bootstrap]

    kubectl \
        --kubeconfig "${kindclusterconf:?}" \
        get pods

    >   NAME                                                              READY   STATUS              RESTARTS   AGE
    >   cluster-api-addon-provider-66cc76bbbf-9zxmf                       1/1     Running             0          3m4s
    >   iris-gaia-blue-20230810-work-cluster-autoscaler-854b58fd44bcrcg   0/1     ContainerCreating   0          2m26s


    podname=$(
        kubectl \
            --kubeconfig "${kindclusterconf:?}" \
            get pods \
                --output json \
        | jq -r '.items[].metadata.name | select(test("cluster-api-addon-provider")) '
        )

    kubectl \
        --kubeconfig "${kindclusterconf:?}" \
        logs "${podname:?}" \
    | tee /tmp/cluster-api-addon-provider.log

    >   ....
    >   ....
    >   easykube.kubernetes.client.errors.ApiError:
    >       HelmRelease.addons.stackhpc.com
    >           "iris-gaia-blue-20230810-work-cluster-kubernetes-dashboard"
    >       is invalid:
    >       metadata.annotations:
    >           Invalid value:
    >               "secret.addons.stackhpc.com/iris-gaia-blue-20230810-work-cluster-kubernetes-dashboard-config":
    >           name part must be no more than 63 characters
    >   ....
    >   ....
    >   easykube.kubernetes.client.errors.ApiError:
    >       HelmRelease.addons.stackhpc.com
    >           "iris-gaia-blue-20230810-work-cluster-node-feature-discovery"
    >       is invalid:
    >       metadata.annotations:
    >           Invalid value:
    >               "secret.addons.stackhpc.com/iris-gaia-blue-20230810-work-cluster-node-feature-discovery-config":
    >           name part must be no more than 63 characters
    >   ....
    >   ....
    >   easykube.kubernetes.client.errors.ApiError:
    >       HelmRelease.addons.stackhpc.com
    >           "iris-gaia-blue-20230810-work-cluster-mellanox-network-operator"
    >       is invalid:
    >       metadata.annotations:
    >           Invalid value:
    >               "secret.addons.stackhpc.com/iris-gaia-blue-20230810-work-cluster-mellanox-network-operator-config":
    >           name part must be no more than 63 characters
    >   ....
    >   ....

    #
    # Poot.
    #

             1         2         3         4         5         6
    123456789012345678901234567890123456789012345678901234567890123
    iris-gaia-blue-20230810-work-cluster-kubernetes-dashboard-config
    iris-gaia-blue-20230810-work-cluster-node-feature-discovery-config
    iris-gaia-blue-20230810-work-cluster-mellanox-network-operator-config

    #
    # If we drop the 'work-cluster' part we will be good.
    #

             1         2         3         4         5         6
    123456789012345678901234567890123456789012345678901234567890123
    iris-gaia-blue-20230810-kubernetes-dashboard-config
    iris-gaia-blue-20230810-node-feature-discovery-config
    iris-gaia-blue-20230810-mellanox-network-operator-config

    #
    # Note that on the Ansible side, all we get is this:
    #

    >   ....
    >   TASK [Create work cluster [iris-gaia-blue-20230810-work-cluster]] **********************************************
    >   fatal: [bootstrap]: FAILED! => {
    >       "changed": false,
    >       "command": "
    >           /usr/local/bin/helm
    >               --version=0.1.0
    >               upgrade
    >               -i
    >               --reset-values
    >               --wait
    >               --values=/opt/aglais/clusterapi-config.yml
    >               --values=/opt/aglais/openstack-clouds.yml
    >               iris-gaia-blue-20230810-work-cluster capi/openstack-cluster
    >               ",
    >       "msg": "
    >           Failure when executing Helm command.
    >           Exited 1.
    >           stdout:
    >               Release \"iris-gaia-blue-20230810-work-cluster\" does not exist.
    >               Installing it now.
    >           stderr:
    >               Error: context deadline exceeded
    >               ",
    >       "stderr": "Error: context deadline exceeded",
    >       "stderr_lines": [
    >           "Error: context deadline exceeded"
    >           ],
    >       "stdout": "Release \"iris-gaia-blue-20230810-work-cluster\" does not exist. Installing it now.",
    >       "stdout_lines": [
    >           "Release \"iris-gaia-blue-20230810-work-cluster\" does not exist. Installing it now."
    >           ]
    >       }
    >   ....

    #
    # Deadline (timeout) exceeded because it is waiting for something that is never goning to happen.
    # Crappy templating ontop of templating design.
    # No way that real error messages are going to propagate through that mess.
    #
    # THIS is the problem with declarative design.
    # Fine if it all works, "Â£$%^&*( if you need to debug it.
    #



