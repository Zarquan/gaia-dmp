#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Full deployment using the large memory config.

    Result:

        Work in progress ..



# -----------------------------------------------------
# Check the current branch.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        git branch

    popd

    >     20210113-zrq-source-build
    >   * 20211011-zrq-hdbscan-config
    >     20211105-zrq-iris-2022
    >     20211202-zrq-PR-testing
    >     master


# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name ansibler \
        --hostname ansibler \
        --publish 3000:3000 \
        --publish 8088:8088 \
        --env "SSH_AUTH_SOCK=/mnt/ssh_auth_sock" \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw,z" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE:?}/deployments:/deployments:ro,z" \
        atolmis/ansible-client:2021.08.25 \
        bash


# -----------------------------------------------------
# Set the target cloud.
#[root@ansibler]

    cloudname=gaia-dev

    configname=zeppelin-28.180-spark-6.27.45

# -----------------------------------------------------
# Delete everything from dev and test.
#[root@ansibler]

    time \
        /deployments/openstack/bin/delete-all.sh \
            'gaia-dev'

    >   real	3m28.822s
    >   user	1m16.303s
    >   sys	0m9.798s


    time \
        /deployments/openstack/bin/delete-all.sh \
            'gaia-test'

    >   real	0m57.742s
    >   user	0m25.603s
    >   sys	0m3.235s


# -----------------------------------------------------
# Create everything, using the new config.
#[root@ansibler]

    time \
        /deployments/hadoop-yarn/bin/create-all.sh \
            "${cloudname:?}" \
            "${configname:?}" \
            'test' \
        | tee /tmp/create-all.log

    >   TASK [Run benchmarker] **************************************************************************
    >   changed: [localhost] => {
    >       "changed": true,
    >       "cmd": "python3 /tmp/run-test.py | tee /tmp/test-result.json",
    >       "delta": "2:14:39.599556",
    >       "end": "2021-12-07 04:11:28.880852",
    >       "rc": 0,
    >       "start": "2021-12-07 01:56:49.281296",
    >       "stderr": "",
    >       "stderr_lines": [],
    >       "stdout": "Test completed after: 8079.32 seconds ....",
    >       "stdout_lines": [
    >           "Test completed after: 8079.32 seconds",
    >           ....
    >           ]
    >       }
    >   
    >   PLAY RECAP **************************************************************************************
    >   localhost : ok=9    changed=6    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

    >   {
    >     "SetUp": {
    >       "totaltime": "44.83",
    >       "status": "SUCCESS",
    >       "msg": "",
    >       "valid": "TRUE"
    >     },
    >     "Mean_proper_motions_over_the_sky": {
    >       "totaltime": "44.21",
    >       "status": "SUCCESS",
    >       "msg": "",
    >       "valid": "TRUE"
    >     },
    >     "Source_counts_over_the_sky.json": {
    >       "totaltime": "12.70",
    >       "status": "SUCCESS",
    >       "msg": "",
    >       "valid": "TRUE"
    >     },
    >     "Good_astrometric_solutions_via_ML_Random_Forrest_classifier": {
    >       "totaltime": "480.58",
    >       "status": "SUCCESS",
    >       "msg": "",
    >       "valid": "TRUE"
    >     },
    >     "QC_cuts_dev.json": {
    >       "totaltime": "4167.50",
    >       "status": "SUCCESS",
    >       "msg": "",
    >       "valid": "TRUE"
    >     },
    >     "WD_detection_dev.json": {
    >       "totaltime": "3329.49",
    >       "status": "SUCCESS",
    >       "msg": "",
    >       "valid": "TRUE"
    >     }
    >   }


# -----------------------------------------------------
# -----------------------------------------------------
# Setup a SSH tunnel SOCKS proxy.
# https://www.digitalocean.com/community/tutorials/how-to-route-web-traffic-securely-without-a-vpn-using-a-socks-tunnel
# Running 'htop' on the Zeppelin node to keep the connection alive.
#[user@desktop]

    podman exec \
        --tty \
        --interactive \
        ansibler \
            bash -c \
            '
            ssh \
                -t \
                -D "3000"  \
                zeppelin \
                    "
                    htop
                    "
            '


# -----------------------------------------------------
# Login to the Zeppelin UI using FoxyProxy SOCKS proxy.
#[user@desktop]

    firefox \
        'http://zeppelin:8080/' \
        'http://master01:8088/cluster' \
        'http://monitor:3000/login' \
        &

    firefox \
        'http://monitor:3000/datasources/new' \
        'http://monitor:3000/dashboard/import' \
        'http://monitor:3000/dashboard/import' \
        &

        Create our Prometheus data source.
        http://monitor:3000/datasources/new

            URL: http://monitor:9090/
            scrape: 1s

        Import our dashboards from local disc.
        http://monitor:3000/dashboard/import

            deployments/common/grafana/20210705-02-grafana-dash.json
            deployments/common/grafana/node-exporter-v20201010-1633446087511.json

            http://monitor:3000/d/34S3C8k7z/my-first-dash&refresh=5s
            http://monitor:3000/d/xfpJB9FGz/1-node-exporter-for-prometheus-dashboard-en-v20201010?orgId=1&refresh=5s


# -----------------------------------------------------

    Screenshots
    screenshots/20211208

    Zeppelin main page, after tests completed
    ....

    Using ML to define an astrometrically clean sample of stars
    ....

    HEALPix density map
    ....

    Mean RA proper motion plot
    ....

    Training a Random Forest to identify White Dwarf Stars
    ....


# -----------------------------------------------------

    Spark UI
    ....

    Grafana
    ....

    Grafana
    ....


