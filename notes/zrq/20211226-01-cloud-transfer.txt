#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Repeated interruptions, out-of-space errors and openstack crashes means we keep having to re-try the transfers.
        Re-formatted the transfer commands a functions that can be invoked in a single line.

    Result:

        Transfer functions are easier to re-try.
        Still not completed the data transfer yet.

# -----------------------------------------------------


    https://serverfault.com/questions/344731/rsync-copying-over-timestamps-only


        Using -t (preserve timestamps) and --size-only will only compare files on size.
        If the size matches, rsync will not copy the file but since -t is specified,
        it will update the timestamp on the destination file without recopying it.
        https://serverfault.com/a/450856

        Using --size-only will cause rsync to skip comparing file timestamps
        (and therefore file contents) if the sizes match.
        Combining this with --times will clone the timestamps across to the target tree.
        https://serverfault.com/a/375262


    transfershares()
        {
        local sharetype=${1:?}
        local sharelist=${sharetype:?}.yaml

        for shareid in $(
            yq eval ".${sharetype:?}.[].id" "${sharelist}"
            )
        do

            sharename=$(
                yq eval ".${sharetype:?}.[] | select(.id == \"${shareid}\").sharename" "${sharelist}"
                )
            sharepath=$(
                yq eval ".${sharetype:?}.[] | select(.id == \"${shareid}\").mountpath" "${sharelist}"
                )

            transfershare ${sharetype:?} ${sharename:?} ${sharepath:?}

        done
        }


    transfershare()
        {
        local sharetype=${1:?}
        local sharename=${2:?}
        local sharepath=${3:?}

        echo ""
        echo "-----------------------------------------------------"
        echo "Share type [${sharetype:?}]"
        echo "Share name [${sharename:?}]"
        echo "Share path [${sharepath:?}]"

        destpath="${sharetype:?}/${sharename:?}"
        echo "Dest  path [${destpath:?}]"

        #   --checksum \
        rsync \
            --stats \
            --progress \
            --human-readable \
            --recursive \
            --links \
            --times \
            --size-only \
            "zrq@zeppelin.gaia-dev.aglais.uk:${sharepath}" \
            "${sharetype:?}/${sharename:?}"

        }


    transfershares datashares

    transfershares usershares



