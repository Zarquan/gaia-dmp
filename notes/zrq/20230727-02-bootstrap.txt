#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2023, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#
# AIMetrics: [{"name": "ChatGPT","contribution": {"value": 0,"units": "%"}}]
#


    Target:

        Check that changes to the Ansible scripts haven't broken anything.

    Result:

        Work in progress ...

# -----------------------------------------------------
# Check which platform is live.
#[user@desktop]

    ssh fedora@live.gaia-dmp.uk \
        '
        date
        hostname
        '

    >   Thu 27 Jul 16:14:34 UTC 2023
    >   iris-gaia-green-20230308-zeppelin


# -----------------------------------------------------
# Create our client container.
#[user@desktop]

    agclient blue

    >   ....
    >   ....


# -----------------------------------------------------
# Delete everything.
#[root@ansibler]

    /deployments/openstack/bin/delete-all.sh \
        "${cloudname:?}"

    >   ....
    >   ....


# -----------------------------------------------------
# Deploy our bootstrap node.
#[root@ansibler]

    /deployments/cluster-api/bootstrap/bin/init-status.sh \
        "${cloudname:?}"

    ansible-playbook \
        --inventory \
        '/deployments/cluster-api/bootstrap/ansible/config/inventory.yml' \
        '/deployments/cluster-api/bootstrap/ansible/00-create-all.yml'

    >   aglais:
    >     deployment:
    >       type: cluster-api
    >       name: iris-gaia-blue-20230727
    >       date: 20230727T201315
    >     openstack:
    >       cloud:
    >         name: iris-gaia-blue
    >       user:
    >         id: 5fa0c97a6dd14e01a3c7d91dad5c6b17
    >         name: dmorris_gaia
    >       project:
    >         id: e918a13fed2648758175a15fac083569
    >         name: iris-gaia-blue

    >   ....
    >   ....


# -----------------------------------------------------
# Login to our bootstrap node as root.
#[root@ansibler]

    ssh root@bootstrap

    statusyml=/opt/aglais/aglais-status.yml
    touch "${statusyml:?}"

# -----------------------------------------------------
# Create the initial Kubernetes in Docker (KinD) cluster.
# TODO Move this into the Ansible playbooks.
#[root@bootstrap]

    kindclustername=kindcluster-$(date '+%Y%m%d')
    kindclusterconf=/opt/aglais/${kindclustername:?}-kubeconfig.yml

    mkdir -p $(dirname "${kindclusterconf}")

    yq eval \
        --inplace \
        "
        .aglais.kubernetes.kind.name = \"${kindclustername}\",
        .aglais.kubernetes.kind.conf = \"${kindclusterconf}\"
        " \
        "${statusyml:?}"

    kind create cluster \
        --name "${kindclustername:?}" \
        --kubeconfig "${kindclusterconf:?}"

    >   Creating cluster "kindcluster-20230727" ...
    >    ✓ Ensuring node image (kindest/node:v1.25.3) 🖼
    >    ✓ Preparing nodes 📦
    >    ✓ Writing configuration 📜
    >    ✓ Starting control-plane 🕹️
    >    ✓ Installing CNI 🔌
    >    ✓ Installing StorageClass 💾
    >   Set kubectl context to "kind-kindcluster-20230727"
    >   ....
    >   ....


# -----------------------------------------------------
# Install the Openstack ClusterAPI components.
# TODO Move this into the Ansible playbooks.
#[root@bootstrap]

    clusterctl init \
        --kubeconfig "${kindclusterconf:?}" \
        --infrastructure openstack

    >   Fetching providers
    >   Installing cert-manager Version="v1.12.2"
    >   Waiting for cert-manager to be available...
    >   Installing Provider="cluster-api" Version="v1.5.0" TargetNamespace="capi-system"
    >   Installing Provider="bootstrap-kubeadm" Version="v1.5.0" TargetNamespace="capi-kubeadm-bootstrap-system"
    >   Installing Provider="control-plane-kubeadm" Version="v1.5.0" TargetNamespace="capi-kubeadm-control-plane-system"
    >   Installing Provider="infrastructure-openstack" Version="v0.7.3" TargetNamespace="capo-system"
    >   ....
    >   ....


# -----------------------------------------------------
# Install the StackHPC Helm charts.
# TODO Move this into the Ansible playbooks.
#[root@bootstrap]

    helm repo add \
        capi \
        https://stackhpc.github.io/capi-helm-charts

    helm repo add \
        capi-addons \
        https://stackhpc.github.io/cluster-api-addon-provider

    helm upgrade \
        --wait \
        --kubeconfig "${kindclusterconf:?}" \
        cluster-api-addon-provider \
        capi-addons/cluster-api-addon-provider \
            --install \
            --version "0.1.0"

    >   Release "cluster-api-addon-provider" does not exist. Installing it now.
    >   NAME: cluster-api-addon-provider
    >   LAST DEPLOYED: Thu Jul 27 16:34:46 2023
    >   NAMESPACE: default
    >   STATUS: deployed
    >   REVISION: 1
    >   TEST SUITE: None


# -----------------------------------------------------
# Enable NGINX ingress, monitoring and dashboard.
# TODO Move this into the Ansible playbooks.
# TODO Access rules for the dashboard.
# TODO Load balancer for Ngunx ERROR.
#[root@bootstrap]

#   yq eval \
#       --inplace \
#       "
#       .addons.ingress.enabled = true,
#       .addons.monitoring.enabled = true,
#       .addons.kubernetesDashboard.enabled = true
#       " \
#       /opt/aglais/clusterapi-config.yml


# -----------------------------------------------------
# Deploy our work cluster.
#[root@bootstrap]

    workclustername=workcluster-$(date '+%Y%m%d')
    workclusterconf=/opt/aglais/${workclustername:?}-kubeconfig.yml

    yq eval \
        --inplace \
        "
        .aglais.kubernetes.work.name = \"${workclustername}\",
        .aglais.kubernetes.work.conf = \"${workclusterconf}\"
        " \
        "${statusyml:?}"

    helm upgrade \
        --wait \
        --kubeconfig "${kindclusterconf:?}" \
        "${workclustername:?}" \
        capi/openstack-cluster \
            --install \
            --version "0.1.0" \
            --values '/opt/aglais/clusterapi-config.yml' \
            --values '/opt/aglais/openstack-clouds.yaml'

    >   NAME: workcluster-one-20230727
    >   LAST DEPLOYED: Thu Jul 27 16:39:01 2023
    >   NAMESPACE: default
    >   STATUS: deployed
    >   REVISION: 1
    >   TEST SUITE: None


# -----------------------------------------------------
# Fetch the work cluster config.
#[root@bootstrap]

    mkdir -p $(dirname "${workclusterconf}")

    clusterctl \
        --kubeconfig "${kindclusterconf:?}" \
        get \
            kubeconfig "${workclustername:?}" \
    | tee "${workclusterconf}" \
    | yq '.'

    >   apiVersion: v1
    >   clusters:
    >     - cluster:
    >         certificate-authority-data: ........
    >         server: https://128.232.226.6:6443
    >       name: workcluster-one-20230727
    >   contexts:
    >     - context:
    >         cluster: workcluster-one-20230727
    >         user: workcluster-one-20230727-admin
    >       name: workcluster-one-20230727-admin@workcluster-one-20230727
    >   current-context: workcluster-one-20230727-admin@workcluster-one-20230727
    >   kind: Config
    >   preferences: {}
    >   users:
    >     - name: workcluster-one-20230727-admin
    >       user:
    >         client-certificate-data: ........
    >         client-key-data: ........


# -----------------------------------------------------
# Watch the cluster status.
#[root@bootstrap]

    watch clusterctl \
        --kubeconfig "${kindclusterconf:?}" \
        describe cluster \
            "${workclustername:?}"


# -----------------------------------------------------
# Check the cluster status.
#[root@bootstrap]

    kubectl \
        --kubeconfig "${kindclusterconf:?}" \
        get OpenStackClusters

    >   NAME                       CLUSTER                    READY   NETWORK                                SUBNET                                 BASTION IP   AGE
    >   workcluster-one-20230727   workcluster-one-20230727   true    ed7bca21-1338-489a-b24e-35ecd1f57d01   87c66ddd-5256-4e3d-96f9-12baa9788c3d                11m

