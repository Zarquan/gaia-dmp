#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2022, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Try to find out more about the limits on concurrent users.
        Started with a clean deployment 20220601-01-blue-deploy.txt

    Result:

        Work in progress ...

# -----------------------------------------------------
# Create some test users.
# TODO Move the create-user-tools to ansible/client/bin.
# TODO Add ansible/client/bin to the client PATH.
#[root@ansibler]

    source /deployments/zeppelin/bin/create-user-tools.sh

    testnames01=(
        Rhaelhall
        Fipa
        Mythicson
        Balline
        Hiness
        Anskelisia
        Iflee
        Mischiellis
        Kellaug
        Liphima
        Jarters
        Williazoga
        Carrovieus
        Pierione
        Hayesphasia
        Collinotter
        Adazoga
        Harinabla
        Sanderlotus
        Bellgrin
        )

    testnames02=(
        Hamar
        Carclop
        Halda
        Jaden
        Mavaca
        Franilley
        Masonania
        Webbbron
        Granwaler
        Stelama
        )

    testnames03=(
        Smical
        Reyesfan
        Evison
        Surbron
        Floresslight
        )

    createarrayusers \
        "${testnames01[@]}" \
    | tee /tmp/testusers-01.json \
    | jq '[ .users[] | {"name": .shirouser.name, "pass": .shirouser.pass} ]'

    >   [
    >     {
    >       "name": "Rhaelhall",
    >       "pass": "ea8aiqu1liubachohthahwieh3ko1O"
    >     }
    >     {
    >       "name": "Fipa",
    >       "pass": "eigheiZoo9Mei4fereim1ahp3weu1E"
    >     }
    >     ....
    >     ....
    >   ]


    createarrayusers \
        "${testnames02[@]}" \
    | tee /tmp/testusers-02.json \
    | jq '[ .users[] | {"name": .shirouser.name, "pass": .shirouser.pass} ]'

    >   [
    >     {
    >       "name": "Hamar",
    >       "pass": "fausaimuugh8ue3aNowaig4uozes6o"
    >     },
    >     {
    >       "name": "Carclop",
    >       "pass": "aeX8Xie9oozeasiehoh4pheeyahliC"
    >     },
    >     ....
    >     ....
    >   ]


    createarrayusers \
        "${testnames03[@]}" \
    | tee /tmp/testusers-03.json \
    | jq '[ .users[] | {"name": .shirouser.name, "pass": .shirouser.pass} ]'

    >   [
    >     {
    >       "name": "Smical",
    >       "pass": "roh1ohpaeYohY4hiequeiseiMoh0ah"
    >     },
    >     {
    >       "name": "Reyesfan",
    >       "pass": "eeyah5iegeis5ne6ohPh4hagaiduk8"
    >     },
    >     ....
    >     ....
    >   ]


# -----------------------------------------------------
# Create our benchmark script.
# TODO Create run-benchmark.py in ansible/client/bin.
# Learning Python:
#   Command line args
#   https://realpython.com/python-command-line-arguments/
#   String.format()
#   https://docs.python.org/3/library/string.html#formatstrings
#   Escape {} in format()
#   https://stackoverflow.com/a/5466478
#[root@ansibler]

    cat > /tmp/run-benchmark.py << 'EOF'
#!/bin/python3
import sys
from aglais_benchmark import AglaisBenchmarker

try:

    opts = [opt for opt in sys.argv[1:] if opt.startswith("-")]
    args = [arg for arg in sys.argv[1:] if not arg.startswith("-")]

    endpoint = args[0]
    testconfig = args[1]
    userlist = args[2]
    usercount = int(args[3])

except IndexError:

    raise SystemExit(f"Usage: {sys.argv[0]} <Zepelin endpoint> <test config> <list of users> <number of users>")

print(
"""
{{
\"config\": {{
    \"endpoint\":   \"{}\",
    \"testconfig\": \"{}\",
    \"userlist\":   \"{}\",
    \"usercount\":  \"{}\"
    }}
}}
""".format(
        endpoint,
        testconfig,
        userlist,
        usercount
        )
    )

AglaisBenchmarker(
    testconfig,
    userlist,
    "/tmp/",
    endpoint
    ).run(
        concurrent=True,
        users=usercount
        )

EOF

    chmod 'a+x' /tmp/run-benchmark.py


# -----------------------------------------------------
# Run a quick test with one user.
#[root@ansibler]

    mkdir /tmp/results

    endpoint="http://zeppelin:8080"

    testconfig=/deployments/zeppelin/test/config/quick.json

    testusers=/tmp/testusers-01.json
    testname=single-user-01
    usercount=1

    /tmp/run-benchmark.py \
        "${endpoint:?}"  \
        "${testconfig:?}"  \
        "${testusers:?}" \
        "${usercount:?}" \
    | tee "/tmp/results/${testname:?}.txt"


    >   Test started [Multi User]
    >   b'Create notebook: 2H667AYP5\n'
    >   b'Create notebook: 2H5A6XXYR\n'
    >   b'Create notebook: 2H6QYSP33\n'
    >   b'Create notebook: 2H47M43R1\n'
    >   Test completed! (47.49 seconds)
    >   ------------ Test Result: [PASS] ------------
    >   [{'GaiaDMPSetup': { .... }}]

    sed "
        0,/^----/ d
        s/\"/#/g
        s/'\(-\{0,1\}[0-9.]\{1,\}\)'/\1/g
        s/:[[:space:]]*\([a-zA-Z]\{1,\}\)\([,}]\)/:'\1'\2/g
        s/:[[:space:]]*\([,}]\),/: ''\1/g
        s/'/\"/g
        " \
        "/tmp/results/${testname:?}.txt" \
    | tee "/tmp/results/${testname:?}.json" \
    | jq '
        .[] | keys as $x | [ $x[] as $y | {name: $y, value: .[$y].result, time: .[$y].time.elapsed } ]
        '

    >   [
    >     {
    >       "name": "GaiaDMPSetup",
    >       "value": "PASS",
    >       "time": 3.63
    >     },
    >     {
    >       "name": "Library_Validation.json",
    >       "value": "PASS",
    >       "time": 6.80
    >     },
    >     {
    >       "name": "Mean_proper_motions_over_the_sky",
    >       "value": "PASS",
    >       "time": 15.03
    >     },
    >     {
    >       "name": "Source_counts_over_the_sky.json",
    >       "value": "PASS",
    >       "time": 22.01
    >     }
    >   ]


# -----------------------------------------------------
# Run the same test 10 times ..
#[root@ansibler]

    usercount=1

    for i in $(seq 0 9)
    do
        echo ""
        echo "-----------------------------------------------------"
        echo "Loop [${i}]"
        testname="single-user-0${i}"

        /tmp/run-benchmark.py \
            "${endpoint:?}"  \
            "${testconfig:?}"  \
            "${testusers:?}" \
            "${usercount:?}" \
        | tee "/tmp/results/${testname:?}.txt"
    done

    >   -----------------------------------------------------
    >   Loop [0]
    >   ....
    >   ....
    >   
    >   -----------------------------------------------------
    >   Loop [8]
    >   ------------ Test Result: [PASS] ------------
    >   [{'GaiaDMPSetup': { .... }}]
    >   ....
    >   -----------------------------------------------------
    >   Loop [9]
    >   ------------ Test Result: [PASS] ------------
    >   [{'GaiaDMPSetup': { .... }}]



# -----------------------------------------------------
# Try 2 concurrent users 10 times ..
#[root@ansibler]

    usercount=2
    loopcount=10

    for i in $(seq 0 $((loopcount - 1)))
    do
        echo ""
        echo "-----------------------------------------------------"
        echo "Loop [${i}]"
        testname="multi-user-$(printf "%02d" ${usercount})-$(printf "%02d" ${i})"

        /tmp/run-benchmark.py \
            "${endpoint:?}"  \
            "${testconfig:?}"  \
            "${testusers:?}" \
            "${usercount:?}" \
        | tee "/tmp/results/${testname:?}.txt"
    done

    >   ....
    >   ....
    >   -----------------------------------------------------
    >   Loop [9]
    >   
    >       {
    >       "config": {
    >           "endpoint":   "http://128.232.222.52:8080",
    >           "testconfig": "/deployments/zeppelin/test/config/quick.json",
    >           "userlist":   "/tmp/testusers-01.json",
    >           "usercount":  "2"
    >           }
    >       }
    >   
    >       /tmp/testusers-01.json
    >       Test started [Multi User]
    >       b'Create notebook: 2H48AHMJT\n'
    >       b'Create notebook: 2H7B1YN8S\n'
    >       b'Create notebook: 2H7E5N83J\n'
    >       b'Create notebook: 2H48UEFJY\n'
    >       b'Create notebook: 2H4872JVA\n'
    >       b'Create notebook: 2H6UWG925\n'
    >       b'Create notebook: 2H5ABEHER\n'
    >       b'Create notebook: 2H79XX5BV\n'
    >       Test completed! (28.12 seconds)
    >       ------------ Test Result: [PASS] ------------
    >       [{'GaiaDMPSetup': { .... }}]
    >   


    grep 'Test Result:' /tmp/results/multi-user-*

    >   /tmp/results/multi-user-02-00.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-02-01.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-02-02.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-02-03.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-02-04.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-02-05.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-02-06.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-02-07.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-02-08.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-02-09.txt:------------ Test Result: [PASS] ------------


# -----------------------------------------------------
# Try 4 concurrent users 10 times ..
#[root@ansibler]

    usercount=4
    loopcount=10

    for i in $(seq 0 $((loopcount - 1)))
    do
        echo ""
        echo "-----------------------------------------------------"
        echo "Loop [${i}]"
        testname="multi-user-$(printf "%02d" ${usercount})-$(printf "%02d" ${i})"

        /tmp/run-benchmark.py \
            "${endpoint:?}"  \
            "${testconfig:?}"  \
            "${testusers:?}" \
            "${usercount:?}" \
        | tee "/tmp/results/${testname:?}.txt"
    done

    >   ....
    >   ....

    >   -----------------------------------------------------
    >   Loop [1]
    >   ....
    >   Test started [Multi User]
    >   ERROR:root:list index out of range
    >   Traceback (most recent call last):
    >     File "/usr/local/lib/python3.10/site-packages/aglais_benchmark/aglais_benchmark.py", line 114, in run_notebook
    >       notebookid = text.split(": ")[1]
    >   IndexError: list index out of range
    >   b'Create notebook: 2H4XXB4A7\n'
    >   b'status_code:500\n'
    >   b'Create notebook: 2H4YU62GV\n'
    >   b'Create notebook: 2H48C7WRT\n'
    >   ....
    >   ------------ Test Result: [FAIL] ------------
    >   ....

    >   ....
    >   ....

    >   ....
    >   ....
    >   -----------------------------------------------------
    >   Loop [9]
    >   
    >   {
    >   "config": {
    >       "endpoint":   "http://128.232.222.52:8080",
    >       "testconfig": "/deployments/zeppelin/test/config/quick.json",
    >       "userlist":   "/tmp/testusers-01.json",
    >       "usercount":  "4"
    >       }
    >   }
    >   
    >   /tmp/testusers-01.json
    >   Test started [Multi User]
    >   b'Create notebook: 2H76YPGQV\n'
    >   b'Create notebook: 2H654MVKV\n'
    >   b'Create notebook: 2H3WM2J3N\n'
    >   b'Create notebook: 2H4MZFKHJ\n'
    >   b'Create notebook: 2H77GBM2S\n'
    >   b'Create notebook: 2H4E6Z8A2\n'
    >   b'Create notebook: 2H5Q6NDGG\n'
    >   b'Create notebook: 2H55VSVK6\n'
    >   b'Create notebook: 2H58T3VGV\n'
    >   b'Create notebook: 2H4RJ9Q8U\n'
    >   b'Create notebook: 2H5QY7JHT\n'
    >   b'Create notebook: 2H43MEC8Z\n'
    >   b'Create notebook: 2H5KK6RNU\n'
    >   b'Create notebook: 2H6ETAKCK\n'
    >   b'Create notebook: 2H5VX7EMJ\n'
    >   b'Create notebook: 2H51QAZ4D\n'
    >   Test completed! (59.38 seconds)
    >   ------------ Test Result: [PASS] ------------
    >   [{'GaiaDMPSetup': { .... }}]


    sed "
        0,/^----/ d
        s/\"/#/g
        s/'\(-\{0,1\}[0-9.]\{1,\}\)'/\1/g
        s/:[[:space:]]*\([a-zA-Z]\{1,\}\)\([,}]\)/:'\1'\2/g
        s/:[[:space:]]*\([,}]\),/: ''\1/g
        s/'/\"/g
        " \
        "/tmp/results/${testname:?}.txt" \
    | tee "/tmp/results/${testname:?}.json" \
    | jq '
        .[] | keys as $x | [ $x[] as $y | {name: $y, value: .[$y].result, time: .[$y].time.elapsed } ]
        '

    >   [
    >     {
    >       "name": "GaiaDMPSetup",
    >       "value": "PASS",
    >       "time": 3.62
    >     },
    >     {
    >       "name": "Library_Validation.json",
    >       "value": "PASS",
    >       "time": 5.61
    >     },
    >     {
    >       "name": "Mean_proper_motions_over_the_sky",
    >       "value": "PASS",
    >       "time": 6.91
    >     },
    >     {
    >       "name": "Source_counts_over_the_sky.json",
    >       "value": "PASS",
    >       "time": 17.44
    >     }
    >   ]
    >   [
    >     {
    >       "name": "GaiaDMPSetup",
    >       "value": "PASS",
    >       "time": 3.64
    >     },
    >     {
    >       "name": "Library_Validation.json",
    >       "value": "PASS",
    >       "time": 5.66
    >     },
    >     {
    >       "name": "Mean_proper_motions_over_the_sky",
    >       "value": "PASS",
    >       "time": 5.83
    >     },
    >     {
    >       "name": "Source_counts_over_the_sky.json",
    >       "value": "PASS",
    >       "time": 19.37
    >     }
    >   ]
    >   [
    >     {
    >       "name": "GaiaDMPSetup",
    >       "value": "PASS",
    >       "time": 3.64
    >     },
    >     {
    >       "name": "Library_Validation.json",
    >       "value": "PASS",
    >       "time": 6.49
    >     },
    >     {
    >       "name": "Mean_proper_motions_over_the_sky",
    >       "value": "PASS",
    >       "time": 5.78
    >     },
    >     {
    >       "name": "Source_counts_over_the_sky.json",
    >       "value": "PASS",
    >       "time": 43.44
    >     }
    >   ]
    >   [
    >     {
    >       "name": "GaiaDMPSetup",
    >       "value": "PASS",
    >       "time": 3.61
    >     },
    >     {
    >       "name": "Library_Validation.json",
    >       "value": "PASS",
    >       "time": 6.75
    >     },
    >     {
    >       "name": "Mean_proper_motions_over_the_sky",
    >       "value": "PASS",
    >       "time": 5.85
    >     },
    >     {
    >       "name": "Source_counts_over_the_sky.json",
    >       "value": "PASS",
    >       "time": 19.37
    >     }
    >   ]

    #
    # We are seeing faliures in the notebook create steps, but the concurrent execution part works.
    # Logged a couple of issues about creating multiple notebooks.
    #
    # Add error handling and diagnostics to create notebook step in AglaisBenchmarke
    # https://github.com/wfau/aglais/issues/741
    #
    # Update AglaisBenchmarker to use exsiting notebooks
    # https://github.com/wfau/aglais/issues/742
    #

    #
    # As far as I know we have not seen errors during the create-user clone-notebook steps.
    # Does this suggest we are get errors when multiple users tyr to create notebooks at the same time?
    #


    grep 'Test Result:' /tmp/results/multi-user-04-*

    >   /tmp/results/multi-user-04-00.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-04-01.txt:------------ Test Result: [FAIL] ------------
    >   /tmp/results/multi-user-04-02.txt:------------ Test Result: [FAIL] ------------
    >   /tmp/results/multi-user-04-03.txt:------------ Test Result: [FAIL] ------------
    >   /tmp/results/multi-user-04-04.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-04-05.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-04-06.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-04-07.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-04-08.txt:------------ Test Result: [PASS] ------------
    >   /tmp/results/multi-user-04-09.txt:------------ Test Result: [PASS] ------------


    less /tmp/results/multi-user-04-01.txt

    >   ....
    >   Test started [Multi User]
    >   b'Create notebook: 2H4XXB4A7\n'
    >   b'status_code:500\n'
    >   b'Create notebook: 2H4YU62GV\n'
    >   b'Create notebook: 2H48C7WRT\n'
    >   b'Create notebook: 2H5HD1MFX\n'
    >   b'Create notebook: 2H4PCT4A8\n'
    >   b'Create notebook: 2H3WXBYAN\n'
    >   b'Create notebook: 2H69U63WE\n'
    >   b'Create notebook: 2H4PC8MUP\n'
    >   b'Create notebook: 2H46Y6415\n'
    >   b'Create notebook: 2H4YUSQQJ\n'
    >   b'Create notebook: 2H3VK8W99\n'
    >   b'Create notebook: 2H56SNMKC\n'
    >   b'Create notebook: 2H6MRPMZW\n'
    >   b'Create notebook: 2H74DYMXV\n'
    >   b'Create notebook: 2H5QM4HDU\n'
    >   Test completed! (119.43 seconds)
    >   ....


    less /tmp/results/multi-user-04-02.txt

    >   ....
    >   Test started [Multi User]
    >   b'Create notebook: 2H4CX7YR7\n'
    >   b'Create notebook: 2H6UZJZSF\n'
    >   b'Create notebook: 2H4PA56Y8\n'
    >   b'Create notebook: 2H78GH1FT\n'
    >   b'Create notebook: 2H7CYF8BB\n'
    >   b'Create notebook: 2H4C2EAWZ\n'
    >   b'Create notebook: 2H3W9114F\n'
    >   b'Create notebook: 2H52F6BT9\n'
    >   b'Create notebook: 2H3RE238N\n'
    >   b'status_code:500\n'
    >   b'Create notebook: 2H6WAKH5P\n'
    >   b'Create notebook: 2H4PADFB6\n'
    >   b'Create notebook: 2H41T5HZW\n'
    >   b'Create notebook: 2H67DY58X\n'
    >   b'Create notebook: 2H5RDZZG5\n'
    >   b'Create notebook: 2H43H533Z\n'
    >   Test completed! (94.81 seconds)
    >   ....


    less /tmp/results/multi-user-04-03.txt

    >   ....
    >   Test started [Multi User]
    >   b'Create notebook: 2H5W73K4Z\n'
    >   b'Create notebook: 2H7B8P9H8\n'
    >   b'Create notebook: 2H7DN6VFA\n'
    >   b'Create notebook: 2H49EM5AU\n'
    >   b'Create notebook: 2H623G7KT\n'
    >   b'Create notebook: 2H3PJHDJU\n'
    >   b'Create notebook: 2H4C9BQD6\n'
    >   b'Create notebook: 2H7FU2MRR\n'
    >   b'Create notebook: 2H49YTWRJ\n'
    >   b'Create notebook: 2H4DKNTFB\n'
    >   b'Create notebook: 2H5UTD5EM\n'
    >   b'Create notebook: 2H45NAVKB\n'
    >   b'Create notebook: 2H5MXKQDP\n'
    >   b'Create notebook: 2H6TM5FS7\n'
    >   b'Create notebook: 2H47V1E75\n'
    >   b'Create notebook: 2H49RA2C6\n'
    >   Test completed! (71.33 seconds)
    >   ....


    testname=multi-user-04-01

    sed "
        0,/^----/ d
        s/\"/#/g
        s/'\(-\{0,1\}[0-9.]\{1,\}\)'/\1/g
        s/:[[:space:]]*\([a-zA-Z]\{1,\}\)\([,}]\)/:'\1'\2/g
        s/:[[:space:]]*\([,}]\),/: ''\1/g
        s/'/\"/g
        " \
        "/tmp/results/${testname:?}.txt" \
    | tee "/tmp/results/${testname:?}.json" \
    | jq '
        .[] | keys as $x | [ $x[] as $y | {name: $y, value: .[$y].result, time: .[$y].time.elapsed } ]
        '

    >   [
    >     {
    >       "name": "GaiaDMPSetup",
    >       "value": "PASS",
    >       "time": 3.86
    >     },
    >     {
    >       "name": "Library_Validation.json",
    >       "value": "PASS",
    >       "time": 6.43
    >     },
    >     {
    >       "name": "Mean_proper_motions_over_the_sky",
    >       "value": "PASS",
    >       "time": 19.41
    >     },
    >     {
    >       "name": "Source_counts_over_the_sky.json",
    >       "value": "PASS",
    >       "time": 78.24
    >     }
    >   ]
    >   [
    >     {
    >       "name": "GaiaDMPSetup",
    >       "value": "PASS",
    >       "time": 3.82
    >     },
    >     {
    >       "name": "Library_Validation.json",
    >       "value": "PASS",
    >       "time": 6.52
    >     },
    >     {
    >       "name": "Mean_proper_motions_over_the_sky",
    >       "value": "PASS",
    >       "time": 5.92
    >     },
    >     {
    >       "name": "Source_counts_over_the_sky.json",
    >       "value": "PASS",
    >       "time": 10.30
    >     }
    >   ]
    >   [
    >     {
    >       "name": "GaiaDMPSetup",
    >       "value": "PASS",
    >       "time": 3.88
    >     },
    >     {
    >       "name": "Library_Validation.json",
    >       "value": "PASS",
    >       "time": 6.49
    >     },
    >     {
    >       "name": "Mean_proper_motions_over_the_sky",
    >       "value": "PASS",
    >       "time": 19.42
    >     },
    >     {
    >       "name": "Source_counts_over_the_sky.json",
    >       "value": "PASS",
    >       "time": 89.61
    >     }
    >   ]
    >   [
    >     {
    >       "name": "GaiaDMPSetup",
    >       "value": "PASS",
    >       "time": 3.91
    >     },
    >     {
    >       "name": "Library_Validation.json",
    >       "value": "PASS",
    >       "time": 6.54
    >     },
    >     {
    >       "name": "Mean_proper_motions_over_the_sky",
    >       "value": "FAIL",
    >       "time": 0.99
    >     },
    >     {
    >       "name": "Source_counts_over_the_sky.json",
    >       "value": "PASS",
    >       "time": 96.03
    >     }
    >   ]

    #
    # The 4th user fails on the proper_motions notebook.
    #

    jq '.[3]' "/tmp/results/${testname:?}.json"

    >   ....
    >     "Mean_proper_motions_over_the_sky": {
    >       "result": "FAIL",
    >       "outputs": {
    >         "valid": "True"
    >       },
    >       "time": {
    >         "result": "FAST",
    >         "elapsed": 0.99,
    >         "expected": 55.00,
    >         "percent": -98.20,
    >         "start": "2022-06-01T14:06:33.174644",
    >         "finish": "2022-06-01T14:06:34.162608"
    >       },
    >       "logs": ""
    >     },
    >   ....

    #
    # Nothing in the test results to indicate why it failed.
    #

    #
    # Nothing in the test output to show what user the test is using.
    # Assume it is one of the first four users in the first list.
    #

    jq '
        [ .users[0:4] | .[].shirouser | {name, pass} ]
        ' /tmp/testusers-01.json \
    | tee /tmp/fourusers.json

    >   [
    >     {
    >       "name": "Rhaelhall",
    >       "pass": "ea8aiqu1liubachohthahwieh3ko1O"
    >     },
    >     {
    >       "name": "Fipa",
    >       "pass": "eigheiZoo9Mei4fereim1ahp3weu1E"
    >     },
    >     {
    >       "name": "Mythicson",
    >       "pass": "iereizuephiengoisaiqu9AeLai4Ee"
    >     },
    >     {
    >       "name": "Balline",
    >       "pass": "IeJuthei9aijuvahwumahRei4Ogooy"
    >     }
    >   ]


    for username in $(
        jq -r '.[].name' /tmp/fourusers.json
        )
    do
        password=$(
             jq -r '
                .[] | select(.name == "'${username}'") | .pass
                ' /tmp/fourusers.json
            )
        echo "Login [${username}][${password}]"
    done

    >   Login [Rhaelhall][ea8aiqu1liubachohthahwieh3ko1O]
    >   Login [Fipa][eigheiZoo9Mei4fereim1ahp3weu1E]
    >   Login [Mythicson][iereizuephiengoisaiqu9AeLai4Ee]
    >   Login [Balline][IeJuthei9aijuvahwumahRei4Ogooy]


# -----------------------------------------------------
# Login to Zeppelin as a test user.
#[root@ansibler]

    zeppelinurl=http://zeppelin:8080

    source '/deployments/zeppelin/bin/zeppelin-rest-tools.sh'

    zeplogin "${username:?}" "${password:?}"

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "Balline",
    >       "ticket": "f449766c-4056-496d-abef-7aa46a0d4302",
    >       "roles": "[\"user\"]"
    >     }
    >   }


# -----------------------------------------------------
# List the user's notebooks
#[root@ansibler]

    curl \
        --silent \
        --cookie "${zepcookies:?}" \
        "${zeppelinurl:?}/api/notebook" \
    | jq "[.body[] | select(.path | startswith(\"/Users/${username:?}\"))]"

    >   [
    >     {
    >       "id": "2H6BY1RQ1",
    >       "path": "/Users/Balline/1. Start here"
    >     },
    >     {
    >       "id": "2H5VA1B5H",
    >       "path": "/Users/Balline/2. Data holdings"
    >     },
    >     {
    >       "id": "2H6KB3TMG",
    >       "path": "/Users/Balline/3. Source counts over the sky"
    >     },
    >     {
    >       "id": "2H6SBW7SK",
    >       "path": "/Users/Balline/4. Mean proper motions over the sky"
    >     },
    >     {
    >       "id": "2H6U6WHDZ",
    >       "path": "/Users/Balline/5. Working with Gaia XP spectra"
    >     },
    >     {
    >       "id": "2H6YUJ3FU",
    >       "path": "/Users/Balline/6. Working with cross-matched surveys"
    >     },
    >     {
    >       "id": "2H4KCJRQH",
    >       "path": "/Users/Balline/7. Good astrometric solutions via ML Random Forrest classifier"
    >     },
    >     {
    >       "id": "2H493DJD8",
    >       "path": "/Users/Balline/8. Tips and tricks"
    >     }
    >   ]

    #
    # These are the user's clone of the public notebooks.
    # What about the test notebooks that AglaisBenchmarker created ?
    #

# -----------------------------------------------------
# List the notebooks in /tmp.
#[root@ansibler]

    curl \
        --silent \
        --cookie "${zepcookies:?}" \
        "${zeppelinurl:?}/api/notebook" \
    | jq '
        [
        .body[]
        | select(
            .path | startswith("/tmp")
            )
        ]
        '

    >   [
    >     {
    >       "id": "2H6BNM8B3",
    >       "path": "/tmp/09UKVH2TDO.json"
    >     },
    >     {
    >       "id": "2H3RE238N",
    >       "path": "/tmp/0HYOKR8OXW.json"
    >     },
    >     ....
    >     ....
    >     {
    >       "id": "2H3NUJZ7D",
    >       "path": "/tmp/YIV1CNDWAI.json"
    >     }
    >   ]


# -----------------------------------------------------
# Count the notebooks in /tmp.
#[root@ansibler]

    curl \
        --silent \
        --cookie "${zepcookies:?}" \
        "${zeppelinurl:?}/api/notebook" \
    | jq '
        [
        .body[]
        | select(
            .path | startswith("/tmp")
            )
        ]
        | length
        '

    >   39


# -----------------------------------------------------
# List the permissions for a notebook.
#[root@ansibler]

    noteid=2H3NUJZ7D

    curl \
        --silent \
        --cookie "${zepcookies:?}" \
        "${zeppelinurl:?}/api/notebook/${noteid:?}/permissions" \
    | jq '.'

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "readers": [
    >         "Balline"
    >       ],
    >       "owners": [
    >         "Balline"
    >       ],
    >       "writers": [
    >         "Balline"
    >       ],
    >       "runners": [
    >         "Balline"
    >       ]
    >     }
    >   }


# -----------------------------------------------------
# Putting it together.
#[root@ansibler]

    for noteid in $(
        curl \
            --silent \
            --cookie "${zepcookies:?}" \
            "${zeppelinurl:?}/api/notebook" \
        | jq -r '
            .body[]
            | select(
                .path | startswith("/tmp")
                )
            | .id
            '
        )
    do
        owner=$(
            curl \
                --silent \
                --cookie "${zepcookies:?}" \
                "${zeppelinurl:?}/api/notebook/${noteid:?}/permissions" \
            | jq -r '.body.owners[0]'
            )
cat << EOF
{
"id":    "${noteid}",
"owner": "${owner}"
}
EOF

    done

    >   {
    >   "id":    "2H6BNM8B3",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H3RE238N",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H49RA2C6",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H43RQS6R",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H6ETAKCK",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H5KK6RNU",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H5HD1MFX",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H6TM5FS7",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H6MZ7VHR",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H4PADFB6",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H6WAKH5P",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H5VX7EMJ",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H4PCT4A8",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H3R2QYQY",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H3QYXU5F",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H77J69XP",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H51QAZ4D",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H47V1E75",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H46E9DUX",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H5AEJTS6",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H3WXBYAN",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H4WE2NKY",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H43RBB4D",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H42RPNFR",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H564QGVP",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H5RZ7AED",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H5K64FK5",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H5ZT5JXY",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H6Q8AFB8",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H5MXKQDP",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H65X6KSQ",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H5CFXCJD",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H45CYQNV",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H3J89FQN",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H43A3ZGD",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H69U63WE",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H74VFG5U",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H4QBG6M7",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H3NUJZ7D",
    >   "owner": "Balline"
    >   }

    #
    # Why are all the notes owned by Balline ?
    #

    #
    # Add some debug to AglaisBenchmarker ..
    #


# -----------------------------------------------------
# Try 2 concurrent users 2 times ..
#[root@ansibler]

    usercount=2
    loopcount=2

    for i in $(seq 0 $((loopcount - 1)))
    do
        echo ""
        echo "-----------------------------------------------------"
        echo "Loop [${i}]"
        testname="multi-user-$(printf "%02d" ${usercount})-$(printf "%02d" ${i})"

        /tmp/run-benchmark.py \
            "${endpoint:?}"  \
            "${testconfig:?}"  \
            "${testusers:?}" \
            "${usercount:?}" \
        | tee "/tmp/results/${testname:?}.txt"
    done


    >   -----------------------------------------------------
    >   Loop [0]
    >   
    >   {
    >   "config": {
    >       "endpoint":   "http://zeppelin:8080",
    >       "testconfig": "/deployments/zeppelin/test/config/quick.json",
    >       "userlist":   "/tmp/testusers-01.json",
    >       "usercount":  "2"
    >       }
    >   }
    >   
    >   /tmp/testusers-01.json
    >   Test started [Multi User]
    >   ERROR:root:list index out of range
    >   Traceback (most recent call last):
    >     File "/usr/local/lib/python3.10/site-packages/aglais_benchmark/aglais_benchmark.py", line 115, in run_notebook
    >       notebookid = text.split(": ")[1]
    >   IndexError: list index out of range
    >   Config [/tmp/user2.yml]
    >   b'status_code:500\n'
    >   Config [/tmp/user2.yml]
    >   b'Create notebook: 2H6RDY45N\n'
    >   Config [/tmp/user2.yml]
    >   b'Create notebook: 2H65TFVMD\n'
    >   Config [/tmp/user2.yml]
    >   b'Create notebook: 2H6833AW7\n'
    >   Config [/tmp/user1.yml]
    >   b'Create notebook: 2H49223X3\n'
    >   Config [/tmp/user1.yml]
    >   b'Create notebook: 2H3X184V7\n'
    >   Config [/tmp/user1.yml]
    >   b'Create notebook: 2H6S7EYJ7\n'
    >   Config [/tmp/user1.yml]
    >   b'Create notebook: 2H3XGAPAQ\n'
    >   Test completed! (45.41 seconds)
    >   ------------ Test Result: [FAIL] ------------
    >   [{'GaiaDMPSetup': { .... }}]
    >   
    >   
    >   
    >   -----------------------------------------------------
    >   Loop [1]
    >   
    >   {
    >   "config": {
    >       "endpoint":   "http://zeppelin:8080",
    >       "testconfig": "/deployments/zeppelin/test/config/quick.json",
    >       "userlist":   "/tmp/testusers-01.json",
    >       "usercount":  "2"
    >       }
    >   }
    >   
    >   /tmp/testusers-01.json
    >   Test started [Multi User]
    >   Config [/tmp/user1.yml]
    >   b'Create notebook: 2H3XCN3YN\n'
    >   Config [/tmp/user1.yml]
    >   b'Create notebook: 2H5ED6FGA\n'
    >   Config [/tmp/user1.yml]
    >   b'Create notebook: 2H44AKRYY\n'
    >   Config [/tmp/user1.yml]
    >   b'Create notebook: 2H4N42MQU\n'
    >   Config [/tmp/user2.yml]
    >   b'Create notebook: 2H4SHWP5W\n'
    >   Config [/tmp/user2.yml]
    >   b'Create notebook: 2H5TMJFK5\n'
    >   Config [/tmp/user2.yml]
    >   b'Create notebook: 2H78HBZSB\n'
    >   Config [/tmp/user2.yml]
    >   b'Create notebook: 2H5WEBRUB\n'
    >   Test completed! (31.55 seconds)
    >   ------------ Test Result: [PASS] ------------
    >   [{'GaiaDMPSetup': { .... }}]

    #
    # OK, so it is using two of the user configurations.
    #

    cat /tmp/user1.yml

    >   zeppelin_url: http://zeppelin:8080
    >   zeppelin_auth: true
    >   zeppelin_user: Fipa
    >   zeppelin_password: eigheiZoo9Mei4fereim1ahp3weu1E

    cat /tmp/user2.yml

    >   zeppelin_url: http://zeppelin:8080
    >   zeppelin_auth: true
    >   zeppelin_user: Mythicson
    >   zeppelin_password: iereizuephiengoisaiqu9AeLai4Ee


# -----------------------------------------------------
# Count the notebooks in /tmp.
#[root@ansibler]

    curl \
        --silent \
        --cookie "${zepcookies:?}" \
        "${zeppelinurl:?}/api/notebook" \
    | jq '
        [
        .body[]
        | select(
            .path | startswith("/tmp")
            )
        ]
        | length
        '

    >   39


# -----------------------------------------------------
# Check the owner of the test notebooks.
#[root@ansibler]

    for noteid in $(
        curl \
            --silent \
            --cookie "${zepcookies:?}" \
            "${zeppelinurl:?}/api/notebook" \
        | jq -r '
            .body[]
            | select(
                .path | startswith("/tmp")
                )
            | .id
            '
        )
    do
        owner=$(
            curl \
                --silent \
                --cookie "${zepcookies:?}" \
                "${zeppelinurl:?}/api/notebook/${noteid:?}/permissions" \
            | jq -r '.body.owners[0]'
            )
cat << EOF
{
"id":    "${noteid}",
"owner": "${owner}"
}
EOF
    done

    >   {
    >   "id":    "2H6BNM8B3",
    >   "owner": "Balline"
    >   }
    >   {
    >   "id":    "2H3RE238N",
    >   "owner": "Balline"
    >   }
    >   ....
    >   ....

    #
    # Same list ... becase that is who we are logged in as.
    # We are logged in as Balline so we only see Balline's notebooks.
    # Duh!
    #





# -----------------------------------------------------
# Loop through the first four users and count the user's notebooks in /tmp.
#[root@ansibler]

    jq '
        [ .users[0:4] | .[].shirouser | {name, pass} ]
        ' /tmp/testusers-01.json \
    | tee /tmp/fourusers.json


    for username in $(
        jq -r '.[].name' /tmp/fourusers.json
        )
    do
        password=$(
             jq -r '
                .[] | select(.name == "'${username}'") | .pass
                ' /tmp/fourusers.json
            )

        echo
        echo "-----------------------------------------------------"
        echo "Login [${username}]"

        zeplogin "${username:?}" "${password:?}"

        curl \
            --silent \
            --cookie "${zepcookies:?}" \
            "${zeppelinurl:?}/api/notebook" \
        | jq '
            [
            .body[]
            | select(
                .path | startswith("/tmp")
                )
            ]
            | length
            '
    done

    >   -----------------------------------------------------
    >   Login [Rhaelhall]
    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "Rhaelhall",
    >       "ticket": "5ddfca82-8a83-4463-acb4-a0aad0be3f8f",
    >       "roles": "[\"user\"]"
    >     }
    >   }
    >   0
    >   
    >   -----------------------------------------------------
    >   Login [Fipa]
    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "Fipa",
    >       "ticket": "5fa2a098-ce5c-4d36-aedc-8af7b0cf53cf",
    >       "roles": "[\"user\"]"
    >     }
    >   }
    >   140
    >   
    >   -----------------------------------------------------
    >   Login [Mythicson]
    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "Mythicson",
    >       "ticket": "b3036c86-a728-49cb-8e25-ab8ae32f16e3",
    >       "roles": "[\"user\"]"
    >     }
    >   }
    >   87
    >   
    >   -----------------------------------------------------
    >   Login [Balline]
    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "Balline",
    >       "ticket": "f449766c-4056-496d-abef-7aa46a0d4302",
    >       "roles": "[\"user\"]"
    >     }
    >   }
    >   39


# -----------------------------------------------------
# Loop through the first four users and list the user's notebooks in /tmp.
#[root@ansibler]

    for username in $(
        jq -r '.[].name' /tmp/fourusers.json
        )
    do
        password=$(
             jq -r '
                .[] | select(.name == "'${username}'") | .pass
                ' /tmp/fourusers.json
            )

        echo
        echo "-----------------------------------------------------"
        echo "Login [${username}]"

        zeplogin "${username:?}" "${password:?}"

        curl \
            --silent \
            --cookie "${zepcookies:?}" \
            "${zeppelinurl:?}/api/notebook" \
        | jq '
            [
            .body[]
            | select(
                .path | startswith("/tmp")
                )
            ]
            '
    done


    >   
    >   -----------------------------------------------------
    >   Login [Rhaelhall]
    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "Rhaelhall",
    >       "ticket": "5ddfca82-8a83-4463-acb4-a0aad0be3f8f",
    >       "roles": "[\"user\"]"
    >     }
    >   }
    >   []
    >   
    >   -----------------------------------------------------
    >   Login [Fipa]
    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "Fipa",
    >       "ticket": "5fa2a098-ce5c-4d36-aedc-8af7b0cf53cf",
    >       "roles": "[\"user\"]"
    >     }
    >   }
    >   [
    >     {
    >       "id": "2H59GEJKF",
    >       "path": "/tmp/022R7M2V83.json"
    >     },
    >     {
    >       "id": "2H66Y9K13",
    >       "path": "/tmp/0FQ0MYHY03.json"
    >     },
    >     {
    >       "id": "2H46Y6415",
    >       "path": "/tmp/105JZ3HW87.json"
    >     },
    >     {
    >       "id": "2H4GKACU8",
    >       "path": "/tmp/133PZPR7IP.json"
    >     },
    >     {
    >       "id": "2H5ZE87KH",
    >       "path": "/tmp/15SRZ9RFOZ.json"
    >     },
    >     {
    >       "id": "2H4CX7YR7",
    >       "path": "/tmp/1FVCRYLLWU.json"
    >     },
    >     {
    >       "id": "2H78GH1FT",
    >       "path": "/tmp/1UP4CEQ030.json"
    >     },
    >     {
    >       "id": "2H6C6PBN1",
    >       "path": "/tmp/27MZ3NBUEJ.json"
    >     },
    >     {
    >       "id": "2H4816V59",
    >       "path": "/tmp/2RS0QRA48Z.json"
    >     },
    >     {
    >       "id": "2H4CZCEFB",
    >       "path": "/tmp/3IR5X8IN3T.json"
    >     },
    >     {
    >       "id": "2H61J4CU4",
    >       "path": "/tmp/3P5WG9HMBR.json"
    >     },
    >     {
    >       "id": "2H43RRGS7",
    >       "path": "/tmp/40KBLJ92DG.json"
    >     },
    >     {
    >       "id": "2H6ZV9ZZX",
    >       "path": "/tmp/48ZVFH5BAL.json"
    >     },
    >     {
    >       "id": "2H5U9N9JP",
    >       "path": "/tmp/4GWGY005HK.json"
    >     },
    >     {
    >       "id": "2H6QYSP33",
    >       "path": "/tmp/4W1HF3M8HY.json"
    >     },
    >     {
    >       "id": "2H7D4W72G",
    >       "path": "/tmp/53Y96C03WT.json"
    >     },
    >     {
    >       "id": "2H76M4DGM",
    >       "path": "/tmp/57B4L0N8R5.json"
    >     },
    >     {
    >       "id": "2H5KDYF7M",
    >       "path": "/tmp/59UU952R0U.json"
    >     },
    >     {
    >       "id": "2H5X8SRQD",
    >       "path": "/tmp/5S8QAL1HSF.json"
    >     },
    >     {
    >       "id": "2H5ED6FGA",
    >       "path": "/tmp/5SVVV4WFJM.json"
    >     },
    >     {
    >       "id": "2H3UJAB31",
    >       "path": "/tmp/5TWE1O2T6G.json"
    >     },
    >     {
    >       "id": "2H6S7EYJ7",
    >       "path": "/tmp/69DV6JIQBM.json"
    >     },
    >     {
    >       "id": "2H5DDTQUA",
    >       "path": "/tmp/69O40VYIB0.json"
    >     },
    >     {
    >       "id": "2H4VRHFU7",
    >       "path": "/tmp/6C583WLR6X.json"
    >     },
    >     {
    >       "id": "2H7C25UT9",
    >       "path": "/tmp/6GWCLVOYLT.json"
    >     },
    >     {
    >       "id": "2H6UYX3P3",
    >       "path": "/tmp/6RNTRY88TQ.json"
    >     },
    >     {
    >       "id": "2H6EZ6DJW",
    >       "path": "/tmp/6SBUI2HETY.json"
    >     },
    >     {
    >       "id": "2H49223X3",
    >       "path": "/tmp/77Z0OVRY7S.json"
    >     },
    >     {
    >       "id": "2H5RTZS15",
    >       "path": "/tmp/8CCMY7UDW0.json"
    >     },
    >     {
    >       "id": "2H4B1JB72",
    >       "path": "/tmp/90FK6F71ZH.json"
    >     },
    >     {
    >       "id": "2H4YUSQQJ",
    >       "path": "/tmp/93P71ADYMZ.json"
    >     },
    >     {
    >       "id": "2H4KJEX4G",
    >       "path": "/tmp/9FGCUNENZJ.json"
    >     },
    >     {
    >       "id": "2H48AHMJT",
    >       "path": "/tmp/A1T8AMLHJT.json"
    >     },
    >     {
    >       "id": "2H5A6XXYR",
    >       "path": "/tmp/A6G0T5A3NI.json"
    >     },
    >     {
    >       "id": "2H6H4RUA6",
    >       "path": "/tmp/AC5Y5CFFNP.json"
    >     },
    >     {
    >       "id": "2H42Y7X6V",
    >       "path": "/tmp/AFAEF5SKPM.json"
    >     },
    >     {
    >       "id": "2H4F644A7",
    >       "path": "/tmp/AN5MRNU0G8.json"
    >     },
    >     {
    >       "id": "2H42GH33E",
    >       "path": "/tmp/ANMYK1U0Y5.json"
    >     },
    >     {
    >       "id": "2H4V7VJ19",
    >       "path": "/tmp/BPIUBIL0DS.json"
    >     },
    >     {
    >       "id": "2H49YTWRJ",
    >       "path": "/tmp/CRL2HYCR4P.json"
    >     },
    >     {
    >       "id": "2H7E5N83J",
    >       "path": "/tmp/CT2XL34HCH.json"
    >     },
    >     {
    >       "id": "2H4PJ869P",
    >       "path": "/tmp/D4GKFQGM90.json"
    >     },
    >     {
    >       "id": "2H6UJZQMD",
    >       "path": "/tmp/D6KWMDTL32.json"
    >     },
    >     {
    >       "id": "2H6ZKAVCQ",
    >       "path": "/tmp/DUIV6WT1UU.json"
    >     },
    >     {
    >       "id": "2H7BWG83K",
    >       "path": "/tmp/DVJXJFQ24R.json"
    >     },
    >     {
    >       "id": "2H4JBS2YW",
    >       "path": "/tmp/DXFNBQ4PAB.json"
    >     },
    >     {
    >       "id": "2H54AW8BM",
    >       "path": "/tmp/DXZFOQ6YGR.json"
    >     },
    >     {
    >       "id": "2H5VGD2J8",
    >       "path": "/tmp/ECS2N9LM74.json"
    >     },
    >     {
    >       "id": "2H4H99QME",
    >       "path": "/tmp/EH6F3CMC6A.json"
    >     },
    >     {
    >       "id": "2H45NAVKB",
    >       "path": "/tmp/EH9XFGVQWQ.json"
    >     },
    >     {
    >       "id": "2H7AJ2CXJ",
    >       "path": "/tmp/EINUPFN12V.json"
    >     },
    >     {
    >       "id": "2H4MZFKHJ",
    >       "path": "/tmp/EW3BA5GCBQ.json"
    >     },
    >     {
    >       "id": "2H6TDSFQP",
    >       "path": "/tmp/F7OFFBPRJZ.json"
    >     },
    >     {
    >       "id": "2H6H13VMT",
    >       "path": "/tmp/F91TW47GX2.json"
    >     },
    >     {
    >       "id": "2H3UZ7D51",
    >       "path": "/tmp/FDFKXBOP2N.json"
    >     },
    >     {
    >       "id": "2H548U9VD",
    >       "path": "/tmp/FJXYHVMTYF.json"
    >     },
    >     {
    >       "id": "2H3XGAPAQ",
    >       "path": "/tmp/FPDZB0PDLZ.json"
    >     },
    >     {
    >       "id": "2H5Z2T5UX",
    >       "path": "/tmp/FQO91RK18Q.json"
    >     },
    >     {
    >       "id": "2H5XN2Q6V",
    >       "path": "/tmp/FZ6XX9YK4A.json"
    >     },
    >     {
    >       "id": "2H61NBVVF",
    >       "path": "/tmp/G6AFC2879C.json"
    >     },
    >     {
    >       "id": "2H6NM2Y47",
    >       "path": "/tmp/GFWVBA9YLW.json"
    >     },
    >     {
    >       "id": "2H5Q8NRDW",
    >       "path": "/tmp/GI4UCF8Y7U.json"
    >     },
    >     {
    >       "id": "2H64HJNJW",
    >       "path": "/tmp/GMZE1O6420.json"
    >     },
    >     {
    >       "id": "2H3X184V7",
    >       "path": "/tmp/GTWIBS6910.json"
    >     },
    >     {
    >       "id": "2H4WZMYBZ",
    >       "path": "/tmp/GVXIXV68UH.json"
    >     },
    >     {
    >       "id": "2H78899PG",
    >       "path": "/tmp/H2OJ5ZHTS5.json"
    >     },
    >     {
    >       "id": "2H3Z12XPF",
    >       "path": "/tmp/HJZBJH3FTE.json"
    >     },
    >     {
    >       "id": "2H3KZHCAY",
    >       "path": "/tmp/HNPF8IG8W3.json"
    >     },
    >     {
    >       "id": "2H5WB11GM",
    >       "path": "/tmp/HOP8RGEZRM.json"
    >     },
    >     {
    >       "id": "2H574VQMD",
    >       "path": "/tmp/HRV31LU3K9.json"
    >     },
    >     {
    >       "id": "2H568J4VY",
    >       "path": "/tmp/HYH4TVT8YH.json"
    >     },
    >     {
    >       "id": "2H4KF1RYF",
    >       "path": "/tmp/HZQQOQSPPK.json"
    >     },
    >     {
    >       "id": "2H6ACC5NB",
    >       "path": "/tmp/IF43YWJFDS.json"
    >     },
    >     {
    >       "id": "2H443CBPC",
    >       "path": "/tmp/JKRSUH4TQ0.json"
    >     },
    >     {
    >       "id": "2H3XCN3YN",
    >       "path": "/tmp/JPL5NPWC7O.json"
    >     },
    >     {
    >       "id": "2H3XTWMXC",
    >       "path": "/tmp/JSZ4GJR4F5.json"
    >     },
    >     {
    >       "id": "2H5D41ZT1",
    >       "path": "/tmp/K43XH0UJ6O.json"
    >     },
    >     {
    >       "id": "2H47M43R1",
    >       "path": "/tmp/LE3Y8UCH96.json"
    >     },
    >     {
    >       "id": "2H6VH55HN",
    >       "path": "/tmp/LYA9S5405S.json"
    >     },
    >     {
    >       "id": "2H7973RPH",
    >       "path": "/tmp/M91IP70AKW.json"
    >     },
    >     {
    >       "id": "2H4H3ZAV9",
    >       "path": "/tmp/MKRVOILKAU.json"
    >     },
    >     {
    >       "id": "2H3ZXE99D",
    >       "path": "/tmp/MMZP51EDNE.json"
    >     },
    >     {
    >       "id": "2H626U6WH",
    >       "path": "/tmp/MRZU8ON5VS.json"
    >     },
    >     {
    >       "id": "2H5EY7CDK",
    >       "path": "/tmp/N9F1AQ9PJ1.json"
    >     },
    >     {
    >       "id": "2H4SRWZNK",
    >       "path": "/tmp/NGL9ILJ4SG.json"
    >     },
    >     {
    >       "id": "2H5C1QNKH",
    >       "path": "/tmp/NLBHEJ8GY8.json"
    >     },
    >     {
    >       "id": "2H46DW2JT",
    >       "path": "/tmp/NLQL7886ZC.json"
    >     },
    >     {
    >       "id": "2H6J1HCC6",
    >       "path": "/tmp/NUTCTPNQNN.json"
    >     },
    >     {
    >       "id": "2H4BGR6M9",
    >       "path": "/tmp/NUVSLSTD5H.json"
    >     },
    >     {
    >       "id": "2H3YPJQAU",
    >       "path": "/tmp/O40L8D7HS1.json"
    >     },
    >     {
    >       "id": "2H4N42MQU",
    >       "path": "/tmp/O8XVALB2HF.json"
    >     },
    >     {
    >       "id": "2H6STG5FG",
    >       "path": "/tmp/OMMN0WNKIP.json"
    >     },
    >     {
    >       "id": "2H6DAKW7X",
    >       "path": "/tmp/OUT98TRUBK.json"
    >     },
    >     {
    >       "id": "2H72R9WEQ",
    >       "path": "/tmp/PEDT3WL0EM.json"
    >     },
    >     {
    >       "id": "2H6B5Y4BC",
    >       "path": "/tmp/PM8PB35OL1.json"
    >     },
    >     {
    >       "id": "2H4KJR49E",
    >       "path": "/tmp/QCOTOO1UP2.json"
    >     },
    >     {
    >       "id": "2H6JAEXHH",
    >       "path": "/tmp/QVMDJCW5UG.json"
    >     },
    >     {
    >       "id": "2H4PC8MUP",
    >       "path": "/tmp/QW455FPI76.json"
    >     },
    >     {
    >       "id": "2H4PA56Y8",
    >       "path": "/tmp/QZ1NG52WYN.json"
    >     },
    >     {
    >       "id": "2H719STY7",
    >       "path": "/tmp/R1W4ZNMZNZ.json"
    >     },
    >     {
    >       "id": "2H58JX2DJ",
    >       "path": "/tmp/R6VRWBPORS.json"
    >     },
    >     {
    >       "id": "2H3MUAV71",
    >       "path": "/tmp/R8DFL93OWO.json"
    >     },
    >     {
    >       "id": "2H4EHABB9",
    >       "path": "/tmp/RCRCO6Q9SX.json"
    >     },
    >     {
    >       "id": "2H7DGY5BJ",
    >       "path": "/tmp/RLFVC7ANMW.json"
    >     },
    >     {
    >       "id": "2H3RWY4T3",
    >       "path": "/tmp/RUON9YEFL2.json"
    >     },
    >     {
    >       "id": "2H5J5GPRT",
    >       "path": "/tmp/S0P5VGGH1X.json"
    >     },
    >     {
    >       "id": "2H76YPGQV",
    >       "path": "/tmp/S3QJ9XY9WZ.json"
    >     },
    >     {
    >       "id": "2H7EC37T2",
    >       "path": "/tmp/SRIDFBZ84T.json"
    >     },
    >     {
    >       "id": "2H667AYP5",
    >       "path": "/tmp/T7DW02BKTN.json"
    >     },
    >     {
    >       "id": "2H5UTD5EM",
    >       "path": "/tmp/TBNPDGDYRV.json"
    >     },
    >     {
    >       "id": "2H6UCUZCF",
    >       "path": "/tmp/TL8T4WCLOM.json"
    >     },
    >     {
    >       "id": "2H4Y1D3PT",
    >       "path": "/tmp/TQJR7EPDTE.json"
    >     },
    >     {
    >       "id": "2H5VUTQQZ",
    >       "path": "/tmp/TR0JWQH38B.json"
    >     },
    >     {
    >       "id": "2H7B1YN8S",
    >       "path": "/tmp/TTZ2B41UHL.json"
    >     },
    >     {
    >       "id": "2H44AKRYY",
    >       "path": "/tmp/U71TT7149H.json"
    >     },
    >     {
    >       "id": "2H3WM2J3N",
    >       "path": "/tmp/U8U3FRKXDN.json"
    >     },
    >     {
    >       "id": "2H72DVTGP",
    >       "path": "/tmp/UD0U3GLNWN.json"
    >     },
    >     {
    >       "id": "2H3QKXAGH",
    >       "path": "/tmp/UFO784N17C.json"
    >     },
    >     {
    >       "id": "2H6HWC2KU",
    >       "path": "/tmp/UUN1EV5FWN.json"
    >     },
    >     {
    >       "id": "2H48UEFJY",
    >       "path": "/tmp/UWZV3KAG0V.json"
    >     },
    >     {
    >       "id": "2H4B7CV9K",
    >       "path": "/tmp/UZAHP43K2M.json"
    >     },
    >     {
    >       "id": "2H654MVKV",
    >       "path": "/tmp/VEBGE5YMCN.json"
    >     },
    >     {
    >       "id": "2H7ECETYM",
    >       "path": "/tmp/VXLPMAKTPH.json"
    >     },
    >     {
    >       "id": "2H4KBJRY7",
    >       "path": "/tmp/WB3SYJHWJB.json"
    >     },
    >     {
    >       "id": "2H5V3T2AG",
    >       "path": "/tmp/WG8H0C0T2C.json"
    >     },
    >     {
    >       "id": "2H64AWF8J",
    >       "path": "/tmp/WN8BBX6761.json"
    >     },
    >     {
    >       "id": "2H73JFFPP",
    >       "path": "/tmp/WYCWMKYSEN.json"
    >     },
    >     {
    >       "id": "2H6U5P5JN",
    >       "path": "/tmp/WYDQK9NRR1.json"
    >     },
    >     {
    >       "id": "2H4DKNTFB",
    >       "path": "/tmp/X2MVYGJHVO.json"
    >     },
    >     {
    >       "id": "2H5PKN1Q9",
    >       "path": "/tmp/X3ZUOYNGHD.json"
    >     },
    >     {
    >       "id": "2H3S98NHP",
    >       "path": "/tmp/XWJVR4UGHK.json"
    >     },
    >     {
    >       "id": "2H3VK8W99",
    >       "path": "/tmp/XYTUPTIQBU.json"
    >     },
    >     {
    >       "id": "2H6NF6C3D",
    >       "path": "/tmp/Y0LHFNGREQ.json"
    >     },
    >     {
    >       "id": "2H4ZR25YW",
    >       "path": "/tmp/Y75PD9WABF.json"
    >     },
    >     {
    >       "id": "2H43C7Y1Z",
    >       "path": "/tmp/YS1LITVII4.json"
    >     },
    >     {
    >       "id": "2H6UZJZSF",
    >       "path": "/tmp/YSQD56ZD1W.json"
    >     },
    >     {
    >       "id": "2H559D6GA",
    >       "path": "/tmp/YUQQDK5YMG.json"
    >     },
    >     {
    >       "id": "2H4EVN2UU",
    >       "path": "/tmp/ZATB76TL21.json"
    >     },
    >     {
    >       "id": "2H4WFTPZ6",
    >       "path": "/tmp/ZD61L7EDGC.json"
    >     },
    >     {
    >       "id": "2H4KXXGBB",
    >       "path": "/tmp/ZPH1KAF24P.json"
    >     }
    >   ]
    >   
    >   -----------------------------------------------------
    >   Login [Mythicson]
    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "Mythicson",
    >       "ticket": "b3036c86-a728-49cb-8e25-ab8ae32f16e3",
    >       "roles": "[\"user\"]"
    >     }
    >   }
    >   [
    >     {
    >       "id": "2H4872JVA",
    >       "path": "/tmp/0TJUG7VHRR.json"
    >     },
    >     {
    >       "id": "2H5KC4XCW",
    >       "path": "/tmp/1U71FHT4G4.json"
    >     },
    >     {
    >       "id": "2H6YRQTRC",
    >       "path": "/tmp/296LJK6LVI.json"
    >     },
    >     {
    >       "id": "2H4ZJKFTJ",
    >       "path": "/tmp/2FQWKLZ4DL.json"
    >     },
    >     {
    >       "id": "2H55AFVDE",
    >       "path": "/tmp/2I43ITIDDG.json"
    >     },
    >     {
    >       "id": "2H75HDV7F",
    >       "path": "/tmp/2SI94BS4VC.json"
    >     },
    >     {
    >       "id": "2H623G7KT",
    >       "path": "/tmp/2VXZEQLBX6.json"
    >     },
    >     {
    >       "id": "2H7FU2MRR",
    >       "path": "/tmp/3APXG7JVUX.json"
    >     },
    >     {
    >       "id": "2H3YTV7SY",
    >       "path": "/tmp/3Z3XL4SY5A.json"
    >     },
    >     {
    >       "id": "2H7B897E9",
    >       "path": "/tmp/4MCJQ34TKR.json"
    >     },
    >     {
    >       "id": "2H4YVKSZR",
    >       "path": "/tmp/4NS07CLBT4.json"
    >     },
    >     {
    >       "id": "2H6VXFT27",
    >       "path": "/tmp/53IZQ3F4QT.json"
    >     },
    >     {
    >       "id": "2H5PTNF1G",
    >       "path": "/tmp/62XT04DLVY.json"
    >     },
    >     {
    >       "id": "2H5F5Y4BW",
    >       "path": "/tmp/73T1U2VXZQ.json"
    >     },
    >     {
    >       "id": "2H4AK3AV4",
    >       "path": "/tmp/7SFWC7XNQX.json"
    >     },
    >     {
    >       "id": "2H52F6BT9",
    >       "path": "/tmp/8AML4Z4EXA.json"
    >     },
    >     {
    >       "id": "2H3PJHDJU",
    >       "path": "/tmp/9MZQLTGFRS.json"
    >     },
    >     {
    >       "id": "2H5ABEHER",
    >       "path": "/tmp/A6WBFEVEBQ.json"
    >     },
    >     {
    >       "id": "2H7DUJU9T",
    >       "path": "/tmp/AA3U4IMX2R.json"
    >     },
    >     {
    >       "id": "2H4PAR2SK",
    >       "path": "/tmp/AT15DYU6EM.json"
    >     },
    >     {
    >       "id": "2H4XXB4A7",
    >       "path": "/tmp/AXPTY45S4Z.json"
    >     },
    >     {
    >       "id": "2H5TMJFK5",
    >       "path": "/tmp/B5UEGMXG1T.json"
    >     },
    >     {
    >       "id": "2H79XX5BV",
    >       "path": "/tmp/BC39WRIW68.json"
    >     },
    >     {
    >       "id": "2H4DCYKX3",
    >       "path": "/tmp/BIE950BZCX.json"
    >     },
    >     {
    >       "id": "2H6VHKCP8",
    >       "path": "/tmp/BKP6NNNEL9.json"
    >     },
    >     {
    >       "id": "2H65TFVMD",
    >       "path": "/tmp/BRHX2IEJ6U.json"
    >     },
    >     {
    >       "id": "2H5Q5M6ZM",
    >       "path": "/tmp/CEJ6Y4RJ1M.json"
    >     },
    >     {
    >       "id": "2H5YXJR6F",
    >       "path": "/tmp/CIK3T3SWKO.json"
    >     },
    >     {
    >       "id": "2H57PJFTU",
    >       "path": "/tmp/CKJU8KWOW9.json"
    >     },
    >     {
    >       "id": "2H5PTZT67",
    >       "path": "/tmp/D3MPQ687P4.json"
    >     },
    >     {
    >       "id": "2H77GBM2S",
    >       "path": "/tmp/EMOW54U9PO.json"
    >     },
    >     {
    >       "id": "2H6GWTB3S",
    >       "path": "/tmp/FCAHMWNYXH.json"
    >     },
    >     {
    >       "id": "2H4YU62GV",
    >       "path": "/tmp/G2LSMUN5PE.json"
    >     },
    >     {
    >       "id": "2H4TKMASU",
    >       "path": "/tmp/G7AIN3CZ06.json"
    >     },
    >     {
    >       "id": "2H4TQC2RC",
    >       "path": "/tmp/GBE3J2DNLO.json"
    >     },
    >     {
    >       "id": "2H48PA9Q4",
    >       "path": "/tmp/GIG8HC1RCL.json"
    >     },
    >     {
    >       "id": "2H5XGFP7T",
    >       "path": "/tmp/GVD0Z9F33X.json"
    >     },
    >     {
    >       "id": "2H3RF6M8U",
    >       "path": "/tmp/H9SIZTF7UM.json"
    >     },
    >     {
    >       "id": "2H5URS6D2",
    >       "path": "/tmp/HEO3I3RRJA.json"
    >     },
    >     {
    >       "id": "2H5BA914H",
    >       "path": "/tmp/HVBHA4VEAW.json"
    >     },
    >     {
    >       "id": "2H4C9BQD6",
    >       "path": "/tmp/HWT0Z44R80.json"
    >     },
    >     {
    >       "id": "2H6NWE6NN",
    >       "path": "/tmp/IRN6U5TWN3.json"
    >     },
    >     {
    >       "id": "2H7CYF8BB",
    >       "path": "/tmp/J3U7H23XY8.json"
    >     },
    >     {
    >       "id": "2H45CAU7Y",
    >       "path": "/tmp/K190YEP5V3.json"
    >     },
    >     {
    >       "id": "2H3WGFWRJ",
    >       "path": "/tmp/KKHCGIZKIV.json"
    >     },
    >     {
    >       "id": "2H5JQ2VQP",
    >       "path": "/tmp/KXRRDTWKFI.json"
    >     },
    >     {
    >       "id": "2H5WEBRUB",
    >       "path": "/tmp/L6JQ95Z137.json"
    >     },
    >     {
    >       "id": "2H4X25BZE",
    >       "path": "/tmp/L9SN7ITRXT.json"
    >     },
    >     {
    >       "id": "2H42XGQN9",
    >       "path": "/tmp/M02GM977UA.json"
    >     },
    >     {
    >       "id": "2H3MVW8XW",
    >       "path": "/tmp/MCFJKNALYD.json"
    >     },
    >     {
    >       "id": "2H3MA2V4A",
    >       "path": "/tmp/MPIMUVP9YC.json"
    >     },
    >     {
    >       "id": "2H48WVDKM",
    >       "path": "/tmp/MRNAHBIY3E.json"
    >     },
    >     {
    >       "id": "2H46MA5K3",
    >       "path": "/tmp/N07WPBO8KW.json"
    >     },
    >     {
    >       "id": "2H55SPQ5M",
    >       "path": "/tmp/N9VS7NL3QR.json"
    >     },
    >     {
    >       "id": "2H6X5Y2CU",
    >       "path": "/tmp/O34MMYYK3A.json"
    >     },
    >     {
    >       "id": "2H6U3E8N4",
    >       "path": "/tmp/O4WYZDZYJY.json"
    >     },
    >     {
    >       "id": "2H6JAQSRR",
    >       "path": "/tmp/O8O0FN3M1H.json"
    >     },
    >     {
    >       "id": "2H4SHWP5W",
    >       "path": "/tmp/OO0NDL6NEX.json"
    >     },
    >     {
    >       "id": "2H4C2EAWZ",
    >       "path": "/tmp/PQAF8UUN6F.json"
    >     },
    >     {
    >       "id": "2H3KQREJQ",
    >       "path": "/tmp/PYI7RWGSMK.json"
    >     },
    >     {
    >       "id": "2H5YBEJ22",
    >       "path": "/tmp/PZD3QOWDM1.json"
    >     },
    >     {
    >       "id": "2H62V5ARM",
    >       "path": "/tmp/Q86Y489VCW.json"
    >     },
    >     {
    >       "id": "2H3W9114F",
    >       "path": "/tmp/QF23185FCY.json"
    >     },
    >     {
    >       "id": "2H55VSVK6",
    >       "path": "/tmp/RI1DW2B08X.json"
    >     },
    >     {
    >       "id": "2H5CEUKC1",
    >       "path": "/tmp/RLS1M1YOOA.json"
    >     },
    >     {
    >       "id": "2H6W4BPSV",
    >       "path": "/tmp/RT8G9QRUFT.json"
    >     },
    >     {
    >       "id": "2H6833AW7",
    >       "path": "/tmp/RYM7WNSJ26.json"
    >     },
    >     {
    >       "id": "2H5DHDU2T",
    >       "path": "/tmp/S8611GAM44.json"
    >     },
    >     {
    >       "id": "2H48C7WRT",
    >       "path": "/tmp/S9YRTKXMRH.json"
    >     },
    >     {
    >       "id": "2H6JG1X4F",
    >       "path": "/tmp/SCC2KIUHCR.json"
    >     },
    >     {
    >       "id": "2H5U6FUCD",
    >       "path": "/tmp/SJL8ZNQRAX.json"
    >     },
    >     {
    >       "id": "2H3T8YR14",
    >       "path": "/tmp/SNSBSUWV9W.json"
    >     },
    >     {
    >       "id": "2H46TXTNW",
    >       "path": "/tmp/SV647A878F.json"
    >     },
    >     {
    >       "id": "2H6UWG925",
    >       "path": "/tmp/SX0NS7SBHM.json"
    >     },
    >     {
    >       "id": "2H78HBZSB",
    >       "path": "/tmp/T8FZI7RCSS.json"
    >     },
    >     {
    >       "id": "2H53JRJ1F",
    >       "path": "/tmp/TAPDG2D4QM.json"
    >     },
    >     {
    >       "id": "2H6RDY45N",
    >       "path": "/tmp/THQVGYUC0O.json"
    >     },
    >     {
    >       "id": "2H5Q6NDGG",
    >       "path": "/tmp/TNBT7ZOOCW.json"
    >     },
    >     {
    >       "id": "2H7E23JXF",
    >       "path": "/tmp/TUB43BURDT.json"
    >     },
    >     {
    >       "id": "2H4DFPV2K",
    >       "path": "/tmp/U8SWHBXBX2.json"
    >     },
    >     {
    >       "id": "2H7231BFU",
    >       "path": "/tmp/UHYRZEP1EL.json"
    >     },
    >     {
    >       "id": "2H462AVYB",
    >       "path": "/tmp/UOZR3K7CQS.json"
    >     },
    >     {
    >       "id": "2H6WNDATP",
    >       "path": "/tmp/UPLR6VS44M.json"
    >     },
    >     {
    >       "id": "2H5V94KT9",
    >       "path": "/tmp/UQAMRH2UTK.json"
    >     },
    >     {
    >       "id": "2H6MCCZBQ",
    >       "path": "/tmp/WCJ3SGV47P.json"
    >     },
    >     {
    >       "id": "2H3S1TZ9M",
    >       "path": "/tmp/YWP8GTSOU8.json"
    >     },
    >     {
    >       "id": "2H4E6Z8A2",
    >       "path": "/tmp/Z1PAB6EI4Y.json"
    >     }
    >   ]
    >   
    >   -----------------------------------------------------
    >   Login [Balline]
    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "Balline",
    >       "ticket": "f449766c-4056-496d-abef-7aa46a0d4302",
    >       "roles": "[\"user\"]"
    >     }
    >   }
    >   [
    >     {
    >       "id": "2H6BNM8B3",
    >       "path": "/tmp/09UKVH2TDO.json"
    >     },
    >     {
    >       "id": "2H3RE238N",
    >       "path": "/tmp/0HYOKR8OXW.json"
    >     },
    >     {
    >       "id": "2H49RA2C6",
    >       "path": "/tmp/0PONYR2NL7.json"
    >     },
    >     {
    >       "id": "2H43RQS6R",
    >       "path": "/tmp/1KEH0UM16N.json"
    >     },
    >     {
    >       "id": "2H6ETAKCK",
    >       "path": "/tmp/3AEQJ5A42O.json"
    >     },
    >     {
    >       "id": "2H5KK6RNU",
    >       "path": "/tmp/3NYCOV9NPM.json"
    >     },
    >     {
    >       "id": "2H5HD1MFX",
    >       "path": "/tmp/3Y5ADJ7WE8.json"
    >     },
    >     {
    >       "id": "2H6TM5FS7",
    >       "path": "/tmp/4ISOU8J6DY.json"
    >     },
    >     {
    >       "id": "2H6MZ7VHR",
    >       "path": "/tmp/4Y8LW90FT8.json"
    >     },
    >     {
    >       "id": "2H4PADFB6",
    >       "path": "/tmp/5Z0VRGJU64.json"
    >     },
    >     {
    >       "id": "2H6WAKH5P",
    >       "path": "/tmp/6F5QRM85F2.json"
    >     },
    >     {
    >       "id": "2H5VX7EMJ",
    >       "path": "/tmp/74TPUCKVU9.json"
    >     },
    >     {
    >       "id": "2H4PCT4A8",
    >       "path": "/tmp/7VRO2XDW0X.json"
    >     },
    >     {
    >       "id": "2H3R2QYQY",
    >       "path": "/tmp/CTKRC426N9.json"
    >     },
    >     {
    >       "id": "2H3QYXU5F",
    >       "path": "/tmp/D3T55EFR83.json"
    >     },
    >     {
    >       "id": "2H77J69XP",
    >       "path": "/tmp/EQ6GDVS5UP.json"
    >     },
    >     {
    >       "id": "2H51QAZ4D",
    >       "path": "/tmp/FB9BL6P4L4.json"
    >     },
    >     {
    >       "id": "2H47V1E75",
    >       "path": "/tmp/FOBTUAC9QB.json"
    >     },
    >     {
    >       "id": "2H46E9DUX",
    >       "path": "/tmp/FUPN1FH4F1.json"
    >     },
    >     {
    >       "id": "2H5AEJTS6",
    >       "path": "/tmp/GLIDE6E9BY.json"
    >     },
    >     {
    >       "id": "2H3WXBYAN",
    >       "path": "/tmp/GW3VVKCRT3.json"
    >     },
    >     {
    >       "id": "2H4WE2NKY",
    >       "path": "/tmp/HLNTGZ5EKQ.json"
    >     },
    >     {
    >       "id": "2H43RBB4D",
    >       "path": "/tmp/HRJM10QDWJ.json"
    >     },
    >     {
    >       "id": "2H42RPNFR",
    >       "path": "/tmp/IUAPBKKU8M.json"
    >     },
    >     {
    >       "id": "2H564QGVP",
    >       "path": "/tmp/J5ZQ0WHPQ8.json"
    >     },
    >     {
    >       "id": "2H5RZ7AED",
    >       "path": "/tmp/K23I0HVPYZ.json"
    >     },
    >     {
    >       "id": "2H5K64FK5",
    >       "path": "/tmp/KGRLO5X2D6.json"
    >     },
    >     {
    >       "id": "2H5ZT5JXY",
    >       "path": "/tmp/L3PW5XOLKD.json"
    >     },
    >     {
    >       "id": "2H6Q8AFB8",
    >       "path": "/tmp/N01D7XINSX.json"
    >     },
    >     {
    >       "id": "2H5MXKQDP",
    >       "path": "/tmp/O744JYL4PI.json"
    >     },
    >     {
    >       "id": "2H65X6KSQ",
    >       "path": "/tmp/OKYQ6GRE0Z.json"
    >     },
    >     {
    >       "id": "2H5CFXCJD",
    >       "path": "/tmp/P6WQTOVZ12.json"
    >     },
    >     {
    >       "id": "2H45CYQNV",
    >       "path": "/tmp/PF5FMJVIZD.json"
    >     },
    >     {
    >       "id": "2H3J89FQN",
    >       "path": "/tmp/PNZ3SUXEX6.json"
    >     },
    >     {
    >       "id": "2H43A3ZGD",
    >       "path": "/tmp/S18M179NL1.json"
    >     },
    >     {
    >       "id": "2H69U63WE",
    >       "path": "/tmp/URUNWDNPE1.json"
    >     },
    >     {
    >       "id": "2H74VFG5U",
    >       "path": "/tmp/X13PJEY4J9.json"
    >     },
    >     {
    >       "id": "2H4QBG6M7",
    >       "path": "/tmp/X2ZADIA763.json"
    >     },
    >     {
    >       "id": "2H3NUJZ7D",
    >       "path": "/tmp/YIV1CNDWAI.json"
    >     }
    >   ]

    #
    # Each user creates a separate set of notebooks - check
    # Each notebook gets a unique id in the repository - check
    # Each notebook gets a unique path/name in the repository - check
    #






